---
source: macros/core/tests/gservice.rs
expression: result
---
impl<'a, 'b, T, TEventTrigger> SomeService<'a, 'b, T, TEventTrigger>
where
    T: Clone,
    TEventTrigger: EventTrigger<events::SomeEvents>,
{
    pub fn do_this(&mut self) -> u32 {
        42
    }
}
pub struct Exposure<T> {
    message_id: sails_rtl::MessageId,
    route: &'static [u8],
    inner: T,
}
impl<'a, 'b, T, TEventTrigger> Exposure<SomeService<'a, 'b, T, TEventTrigger>>
where
    T: Clone,
    TEventTrigger: EventTrigger<events::SomeEvents>,
{
    pub fn do_this(&mut self) -> u32 {
        let exposure_scope = sails_rtl::gstd::services::ExposureCallScope::new(self);
        self.inner.do_this()
    }
    pub async fn handle(&mut self, mut input: &[u8]) -> Vec<u8> {
        self.try_handle(input)
            .await
            .unwrap_or_else(|| {
                {
                    let mut __input = input;
                    let input = String::decode(&mut __input)
                        .unwrap_or_else(|_| {
                            if input.len() <= 8 {
                                format!("0x{}", sails_rtl::hex::encode(input))
                            } else {
                                format!(
                                    "0x{}..{}", sails_rtl::hex::encode(& input[..4]),
                                    sails_rtl::hex::encode(& input[input.len() - 4..])
                                )
                            }
                        });
                    panic!("Unknown request: {}", input)
                }
            })
    }
    pub async fn try_handle(&mut self, input: &[u8]) -> Option<Vec<u8>> {
        if input.starts_with(&[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8]) {
            let output = self.__do_this(&input[7usize..]).await;
            static INVOCATION_ROUTE: [u8; 7usize] = [
                24u8,
                68u8,
                111u8,
                84u8,
                104u8,
                105u8,
                115u8,
            ];
            return Some([INVOCATION_ROUTE.as_ref(), &output].concat());
        }
        None
    }
    async fn __do_this(&mut self, mut input: &[u8]) -> Vec<u8> {
        let request = __DoThisParams::decode(&mut input)
            .expect("Failed to decode request");
        let result = self.do_this();
        return result.encode();
    }
}
impl<'a, 'b, T, TEventTrigger> sails_rtl::gstd::services::Exposure
for Exposure<SomeService<'a, 'b, T, TEventTrigger>>
where
    T: Clone,
    TEventTrigger: EventTrigger<events::SomeEvents>,
{
    fn message_id(&self) -> sails_rtl::MessageId {
        self.message_id
    }
    fn route(&self) -> &'static [u8] {
        self.route
    }
}
impl<'a, 'b, T, TEventTrigger> sails_rtl::gstd::services::Service
for SomeService<'a, 'b, T, TEventTrigger>
where
    T: Clone,
    TEventTrigger: EventTrigger<events::SomeEvents>,
{
    type Exposure = Exposure<SomeService<'a, 'b, T, TEventTrigger>>;
    fn expose(
        self,
        message_id: sails_rtl::MessageId,
        route: &'static [u8],
    ) -> Self::Exposure {
        Self::Exposure {
            message_id,
            route,
            inner: self,
        }
    }
}
impl<'a, 'b, T, TEventTrigger> sails_rtl::meta::ServiceMeta
for SomeService<'a, 'b, T, TEventTrigger>
where
    T: Clone,
    TEventTrigger: EventTrigger<events::SomeEvents>,
{
    fn commands() -> sails_rtl::scale_info::MetaType {
        sails_rtl::scale_info::MetaType::new::<meta::CommandsMeta>()
    }
    fn queries() -> sails_rtl::scale_info::MetaType {
        sails_rtl::scale_info::MetaType::new::<meta::QueriesMeta>()
    }
    fn events() -> sails_rtl::scale_info::MetaType {
        sails_rtl::scale_info::MetaType::new::<meta::EventsMeta>()
    }
    fn base_services() -> impl Iterator<Item = sails_rtl::meta::AnyServiceMeta> {
        [].into_iter()
    }
}
use sails_rtl::Decode as __ServiceDecode;
use sails_rtl::Encode as __ServiceEncode;
use sails_rtl::TypeInfo as __ServiceTypeInfo;
#[derive(__ServiceDecode, __ServiceTypeInfo)]
#[codec(crate = sails_rtl::scale_codec)]
#[scale_info(crate = sails_rtl::scale_info)]
pub struct __DoThisParams {}
mod meta {
    use super::*;
    #[derive(__ServiceTypeInfo)]
    #[scale_info(crate = sails_rtl::scale_info)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(__ServiceTypeInfo)]
    #[scale_info(crate = sails_rtl::scale_info)]
    pub enum QueriesMeta {}
    #[derive(__ServiceTypeInfo)]
    #[scale_info(crate = sails_rtl::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = events::SomeEvents;
}

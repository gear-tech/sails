---
source: macros/core/tests/gservice.rs
expression: result
---
impl SomeService {
    pub fn do_this(&mut self) -> u32 {
        42
    }
    pub fn this(&self) -> bool {
        true
    }
    fn notify_on(&mut self, event: SomeEvents) -> sails_rtl::errors::Result<()> {
        #[cfg(not(target_arch = "wasm32"))]
        {
            let self_ptr = self as *const _ as usize;
            let event_listeners = event_listeners().lock();
            if let Some(event_listener_ptr) = event_listeners.get(&self_ptr) {
                let event_listener = unsafe {
                    &mut *(*event_listener_ptr as *mut Box<dyn FnMut(&SomeEvents)>)
                };
                core::mem::drop(event_listeners);
                event_listener(&event);
            }
        }
        sails_rtl::gstd::events::__notify_on(event)
    }
}
pub struct Exposure<T> {
    message_id: sails_rtl::MessageId,
    route: &'static [u8],
    #[cfg(not(target_arch = "wasm32"))]
    inner: Box<T>,
    #[cfg(not(target_arch = "wasm32"))]
    inner_ptr: *const T,
    #[cfg(target_arch = "wasm32")]
    inner: T,
}
#[cfg(not(target_arch = "wasm32"))]
impl<T> Drop for Exposure<T> {
    fn drop(&mut self) {
        let service_ptr = self.inner_ptr as usize;
        let mut event_listeners = event_listeners().lock();
        if event_listeners.remove(&service_ptr).is_some() {
            panic!("there should be no any event listeners left by this time");
        }
    }
}
impl Exposure<SomeService> {
    pub fn do_this(&mut self) -> u32 {
        let exposure_scope = sails_rtl::gstd::services::ExposureCallScope::new(self);
        self.inner.do_this()
    }
    pub fn this(&self) -> bool {
        let exposure_scope = sails_rtl::gstd::services::ExposureCallScope::new(self);
        self.inner.this()
    }
    pub async fn handle(&mut self, input: &[u8]) -> Vec<u8> {
        self.try_handle(input)
            .await
            .unwrap_or_else(|| {
                {
                    let mut __input = input;
                    let input = String::decode(&mut __input)
                        .unwrap_or_else(|_| {
                            if input.len() <= 8 {
                                format!("0x{}", sails_rtl::hex::encode(input))
                            } else {
                                format!(
                                    "0x{}..{}", sails_rtl::hex::encode(& input[..4]),
                                    sails_rtl::hex::encode(& input[input.len() - 4..])
                                )
                            }
                        });
                    panic!("Unknown request: {}", input)
                }
            })
    }
    pub async fn try_handle(&mut self, input: &[u8]) -> Option<Vec<u8>> {
        if input.starts_with(&[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8]) {
            let output = self.__do_this(&input[7usize..]).await;
            static INVOCATION_ROUTE: [u8; 7usize] = [
                24u8,
                68u8,
                111u8,
                84u8,
                104u8,
                105u8,
                115u8,
            ];
            return Some([INVOCATION_ROUTE.as_ref(), &output].concat());
        }
        if input.starts_with(&[16u8, 84u8, 104u8, 105u8, 115u8]) {
            let output = self.__this(&input[5usize..]).await;
            static INVOCATION_ROUTE: [u8; 5usize] = [16u8, 84u8, 104u8, 105u8, 115u8];
            return Some([INVOCATION_ROUTE.as_ref(), &output].concat());
        }
        None
    }
    async fn __do_this(&mut self, mut input: &[u8]) -> Vec<u8> {
        let request = __DoThisParams::decode(&mut input)
            .expect("Failed to decode request");
        let result = self.do_this();
        return result.encode();
    }
    async fn __this(&self, mut input: &[u8]) -> Vec<u8> {
        let request = __ThisParams::decode(&mut input)
            .expect("Failed to decode request");
        let result = self.this();
        return result.encode();
    }
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_event_listener<'a>(
        &self,
        listener: impl FnMut(&SomeEvents) + 'a,
    ) -> EventListenerGuard<'a> {
        if core::mem::size_of_val(self.inner.as_ref()) == 0 {
            panic!(
                "setting event listener on a zero-sized service is not supported for now"
            );
        }
        let service_ptr = self.inner_ptr as usize;
        let listener: Box<dyn FnMut(&SomeEvents)> = Box::new(listener);
        let listener = Box::new(listener);
        let listener_ptr = Box::into_raw(listener) as usize;
        let mut event_listeners = event_listeners().lock();
        if event_listeners.contains_key(&service_ptr) {
            panic!("event listener is already set");
        }
        event_listeners.insert(service_ptr, listener_ptr);
        EventListenerGuard {
            service_ptr,
            listener_ptr,
            _phantom: core::marker::PhantomData,
        }
    }
}
impl sails_rtl::gstd::services::Exposure for Exposure<SomeService> {
    fn message_id(&self) -> sails_rtl::MessageId {
        self.message_id
    }
    fn route(&self) -> &'static [u8] {
        self.route
    }
}
impl sails_rtl::gstd::services::Service for SomeService {
    type Exposure = Exposure<SomeService>;
    fn expose(
        self,
        message_id: sails_rtl::MessageId,
        route: &'static [u8],
    ) -> Self::Exposure {
        #[cfg(not(target_arch = "wasm32"))]
        let inner_box = Box::new(self);
        #[cfg(not(target_arch = "wasm32"))]
        let inner = inner_box.as_ref();
        #[cfg(target_arch = "wasm32")]
        let inner = &self;
        Self::Exposure {
            message_id,
            route,
            #[cfg(not(target_arch = "wasm32"))]
            inner_ptr: inner_box.as_ref() as *const Self,
            #[cfg(not(target_arch = "wasm32"))]
            inner: inner_box,
            #[cfg(target_arch = "wasm32")]
            inner: self,
        }
    }
}
impl sails_rtl::meta::ServiceMeta for SomeService {
    fn commands() -> sails_rtl::scale_info::MetaType {
        sails_rtl::scale_info::MetaType::new::<meta::CommandsMeta>()
    }
    fn queries() -> sails_rtl::scale_info::MetaType {
        sails_rtl::scale_info::MetaType::new::<meta::QueriesMeta>()
    }
    fn events() -> sails_rtl::scale_info::MetaType {
        sails_rtl::scale_info::MetaType::new::<meta::EventsMeta>()
    }
    fn base_services() -> impl Iterator<Item = sails_rtl::meta::AnyServiceMeta> {
        [].into_iter()
    }
}
type __EventlistenersMap = sails_rtl::collections::BTreeMap<usize, usize>;
type __Mutex<T> = sails_rtl::spin::Mutex<T>;
#[cfg(not(target_arch = "wasm32"))]
fn event_listeners() -> &'static __Mutex<__EventlistenersMap> {
    static EVENT_LISTENERS: __Mutex<__EventlistenersMap> = __Mutex::new(
        __EventlistenersMap::new(),
    );
    &EVENT_LISTENERS
}
#[cfg(not(target_arch = "wasm32"))]
pub struct EventListenerGuard<'a> {
    service_ptr: usize,
    listener_ptr: usize,
    _phantom: core::marker::PhantomData<&'a ()>,
}
#[cfg(not(target_arch = "wasm32"))]
impl<'a> Drop for EventListenerGuard<'a> {
    fn drop(&mut self) {
        let mut event_listeners = event_listeners().lock();
        let listener_ptr = event_listeners.remove(&self.service_ptr);
        if listener_ptr != Some(self.listener_ptr) {
            panic!("event listener is being removed out of order");
        }
    }
}
use sails_rtl::Decode as __ServiceDecode;
use sails_rtl::Encode as __ServiceEncode;
use sails_rtl::TypeInfo as __ServiceTypeInfo;
#[derive(__ServiceDecode, __ServiceTypeInfo)]
#[codec(crate = sails_rtl::scale_codec)]
#[scale_info(crate = sails_rtl::scale_info)]
pub struct __DoThisParams {}
#[derive(__ServiceDecode, __ServiceTypeInfo)]
#[codec(crate = sails_rtl::scale_codec)]
#[scale_info(crate = sails_rtl::scale_info)]
pub struct __ThisParams {}
mod meta {
    use super::*;
    #[derive(__ServiceTypeInfo)]
    #[scale_info(crate = sails_rtl::scale_info)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(__ServiceTypeInfo)]
    #[scale_info(crate = sails_rtl::scale_info)]
    pub enum QueriesMeta {
        This(__ThisParams, bool),
    }
    #[derive(__ServiceTypeInfo)]
    #[scale_info(crate = sails_rtl::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = SomeEvents;
}

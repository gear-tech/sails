---
source: macros/core/tests/service.rs
expression: result
---
impl SomeService {
    pub async fn do_this(&mut self, p1: u32, p2: String) -> u32 {
        p1
    }
    pub fn this(&self, p1: bool) -> bool {
        p1
    }
}
pub struct Exposure<T> {
    route: &'static [u8],
    inner: T,
}
impl Exposure<SomeService> {
    pub async fn do_this(&mut self, p1: u32, p2: String) -> u32 {
        self.inner.do_this(p1, p2).await
    }
    pub fn this(&self, p1: bool) -> bool {
        self.inner.this(p1)
    }
    pub async fn handle(&mut self, mut input: &[u8]) -> Vec<u8> {
        if input.starts_with(&[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8]) {
            let output = self.__do_this(&input[7usize..]).await;
            static INVOCATION_ROUTE: [u8; 7usize] = [
                24u8,
                68u8,
                111u8,
                84u8,
                104u8,
                105u8,
                115u8,
            ];
            return [INVOCATION_ROUTE.as_ref(), &output].concat();
        }
        if input.starts_with(&[16u8, 84u8, 104u8, 105u8, 115u8]) {
            let output = self.__this(&input[5usize..]).await;
            static INVOCATION_ROUTE: [u8; 5usize] = [16u8, 84u8, 104u8, 105u8, 115u8];
            return [INVOCATION_ROUTE.as_ref(), &output].concat();
        }
        let invocation_path = String::decode(&mut input)
            .expect("Failed to decode invocation path");
        panic!("Unknown request: {}", invocation_path);
    }
    async fn __do_this(&mut self, mut input: &[u8]) -> Vec<u8> {
        let request = __DoThisParams::decode(&mut input)
            .expect("Failed to decode request");
        let result = self.do_this(request.p1, request.p2).await;
        return result.encode();
    }
    async fn __this(&self, mut input: &[u8]) -> Vec<u8> {
        let request = __ThisParams::decode(&mut input)
            .expect("Failed to decode request");
        let result = self.this(request.p1);
        return result.encode();
    }
}
impl sails_rtl::gstd::services::Service for SomeService {
    type Exposure = Exposure<SomeService>;
    fn expose(self, route: &'static [u8]) -> Self::Exposure {
        Self::Exposure {
            route,
            inner: self,
        }
    }
}
impl sails_rtl::meta::ServiceMeta for SomeService {
    fn commands() -> scale_info::MetaType {
        scale_info::MetaType::new::<meta::CommandsMeta>()
    }
    fn queries() -> scale_info::MetaType {
        scale_info::MetaType::new::<meta::QueriesMeta>()
    }
    fn events() -> scale_info::MetaType {
        scale_info::MetaType::new::<meta::EventsMeta>()
    }
}
#[derive(Decode, TypeInfo)]
pub struct __DoThisParams {
    p1: u32,
    p2: String,
}
#[derive(Decode, TypeInfo)]
pub struct __ThisParams {
    p1: bool,
}
mod meta {
    use super::*;
    #[derive(TypeInfo)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(TypeInfo)]
    pub enum QueriesMeta {
        This(__ThisParams, bool),
    }
    #[derive(TypeInfo)]
    pub enum NoEvents {}
    pub type EventsMeta = NoEvents;
}


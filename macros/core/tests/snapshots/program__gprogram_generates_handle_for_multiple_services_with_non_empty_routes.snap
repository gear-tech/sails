---
source: macros/core/tests/program.rs
expression: result
---
static __ROUTE_SERVICE2: [u8; 9usize] = [
    32u8,
    83u8,
    101u8,
    114u8,
    118u8,
    105u8,
    99u8,
    101u8,
    50u8,
];
static __ROUTE_SVC1: [u8; 5usize] = [16u8, 83u8, 118u8, 99u8, 49u8];
impl MyProgram {
    #[groute("svc1")]
    pub fn service1(
        &self,
    ) -> <MyService as sails_rtl::gstd::services::Service>::Exposure {
        let service = self.__service1();
        let exposure = <MyService as sails_rtl::gstd::services::Service>::expose(
            service,
            sails_rtl::gstd::msg::id().into(),
            __ROUTE_SVC1.as_ref(),
        );
        exposure
    }
    pub fn service2(
        &self,
    ) -> <MyService as sails_rtl::gstd::services::Service>::Exposure {
        let service = self.__service2();
        let exposure = <MyService as sails_rtl::gstd::services::Service>::expose(
            service,
            sails_rtl::gstd::msg::id().into(),
            __ROUTE_SERVICE2.as_ref(),
        );
        exposure
    }
    fn __service2(&self) -> MyService {
        MyService
    }
    fn __service1(&self) -> MyService {
        MyService
    }
}
impl sails_rtl::meta::ProgramMeta for MyProgram {
    fn constructors() -> scale_info::MetaType {
        scale_info::MetaType::new::<meta::ConstructorsMeta>()
    }
    fn services() -> impl Iterator<
        Item = (&'static str, sails_rtl::meta::AnyServiceMeta),
    > {
        [
            ("Service2", sails_rtl::meta::AnyServiceMeta::new::<MyService>()),
            ("Svc1", sails_rtl::meta::AnyServiceMeta::new::<MyService>()),
        ]
            .into_iter()
    }
}
use sails_rtl::Decode as __ProgramDecode;
use sails_rtl::TypeInfo as __ProgramTypeInfo;
mod meta {
    use super::*;
    #[derive(__ProgramTypeInfo)]
    #[scale_info(crate = sails_rtl::scale_info)]
    pub enum ConstructorsMeta {}
}
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rtl::{gstd, hex, prelude::*};
    static mut PROGRAM: Option<MyProgram> = None;
    #[no_mangle]
    extern "C" fn init() {
        let input = gstd::msg::load_bytes().expect("Failed to read input");
        if !input.is_empty() {
            {
                let input = String::decode(&mut input)
                    .unwrap_or_else(|_| {
                        if input.len() <= 8 {
                            format!("0x{}", hex::encode(input))
                        } else {
                            format!(
                                "0x{}..{}", hex::encode(& input[..4]), hex::encode(&
                                input[input.len() - 4..])
                            )
                        }
                    });
                panic!("Unexpected ctor: {}", input)
            }
        }
        unsafe {
            PROGRAM = Some(MyProgram::default());
        }
        gstd::msg::reply_bytes(input, 0).expect("Failed to send output");
    }
    #[gstd::async_main]
    async fn main() {
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        let output = if input.starts_with(&__ROUTE_SERVICE2) {
            let program_ref = unsafe { PROGRAM.as_ref() }
                .expect("Program not initialized");
            let mut service = program_ref.service2();
            let output = service.handle(&input[__ROUTE_SERVICE2.len()..]).await;
            [__ROUTE_SERVICE2.as_ref(), &output].concat()
        } else if input.starts_with(&__ROUTE_SVC1) {
            let program_ref = unsafe { PROGRAM.as_ref() }
                .expect("Program not initialized");
            let mut service = program_ref.service1();
            let output = service.handle(&input[__ROUTE_SVC1.len()..]).await;
            [__ROUTE_SVC1.as_ref(), &output].concat()
        } else {
            let input = String::decode(&mut input)
                .unwrap_or_else(|_| {
                    if input.len() <= 8 {
                        format!("0x{}", hex::encode(input))
                    } else {
                        format!(
                            "0x{}..{}", hex::encode(& input[..4]), hex::encode(&
                            input[input.len() - 4..])
                        )
                    }
                });
            panic!("Unexpected service: {}", input)
        };
        gstd::msg::reply_bytes(output, 0).expect("Failed to send output");
    }
}

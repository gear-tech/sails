---
source: macros/core/tests/program.rs
expression: result
---
impl MyProgram {
    pub async fn new(p1: u32, p2: String) -> Self {
        Self { p1, p2 }
    }
}
impl sails_rtl::meta::ProgramMeta for MyProgram {
    fn constructors() -> scale_info::MetaType {
        scale_info::MetaType::new::<meta::ConstructorsMeta>()
    }
    fn services() -> impl Iterator<
        Item = (&'static str, sails_rtl::meta::AnyServiceMeta),
    > {
        [].into_iter()
    }
}
use sails_rtl::prelude::Decode as __ProgramDecode;
use sails_rtl::prelude::TypeInfo as __ProgramTypeInfo;
#[derive(__ProgramDecode, __ProgramTypeInfo)]
struct __NewParams {
    p1: u32,
    p2: String,
}
mod meta {
    use super::*;
    #[derive(__ProgramTypeInfo)]
    pub enum ConstructorsMeta {
        New(__NewParams),
    }
}
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rtl::{gstd, hex, prelude::*};
    static mut PROGRAM: Option<MyProgram> = None;
    #[gstd::async_init]
    async fn init() {
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        let (program, invocation_route) = if input
            .starts_with(&[12u8, 78u8, 101u8, 119u8])
        {
            static INVOCATION_ROUTE: [u8; 4usize] = [12u8, 78u8, 101u8, 119u8];
            let request = __NewParams::decode(&mut &input[4usize..])
                .expect("Failed to decode request");
            let program = MyProgram::new(request.p1, request.p2).await;
            (program, INVOCATION_ROUTE.as_ref())
        } else {
            let input = String::decode(&mut input)
                .unwrap_or_else(|_| {
                    if input.len() <= 8 {
                        format!("0x{}", hex::encode(input))
                    } else {
                        format!(
                            "0x{}..{}", hex::encode(& input[..4]), hex::encode(&
                            input[input.len() - 4..])
                        )
                    }
                });
            panic!("Unexpected ctor: {}", input)
        };
        unsafe {
            PROGRAM = Some(program);
        }
        gstd::msg::reply_bytes(invocation_route, 0).expect("Failed to send output");
    }
    #[gstd::async_main]
    async fn main() {
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        let output = {
            let input = String::decode(&mut input)
                .unwrap_or_else(|_| {
                    if input.len() <= 8 {
                        format!("0x{}", hex::encode(input))
                    } else {
                        format!(
                            "0x{}..{}", hex::encode(& input[..4]), hex::encode(&
                            input[input.len() - 4..])
                        )
                    }
                });
            panic!("Unexpected service: {}", input)
        };
        gstd::msg::reply_bytes(output, 0).expect("Failed to send output");
    }
}


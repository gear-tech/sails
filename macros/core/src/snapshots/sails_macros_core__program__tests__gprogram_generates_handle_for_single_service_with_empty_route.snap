---
source: macros/core/src/program.rs
expression: result
---
impl MyProgram {
    #[groute("")]
    pub fn service(&self) -> MyService {
        MyService
    }
}
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rtl_gstd::{*, gstd};
    static mut PROGRAM: Option<MyProgram> = None;
    #[no_mangle]
    extern "C" fn init() {
        let input = gstd::msg::load_bytes().expect("Failed to read input");
        if !input.is_empty() {
            {
                let input = String::decode(&mut input)
                    .unwrap_or_else(|_| {
                        if input.len() <= 8 {
                            format!("0x{}", hex::encode(input))
                        } else {
                            format!(
                                "0x{}..{}", hex::encode(& input[..4]), hex::encode(&
                                input[input.len() - 4..])
                            )
                        }
                    });
                panic!("Unexpected ctor: {}", input)
            }
        }
        unsafe {
            PROGRAM = Some(MyProgram::default());
        }
        gstd::msg::reply_bytes(input, 0).expect("Failed to send output");
    }
    #[gstd::async_main]
    async fn main() {
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        let output = {
            let program_ref = unsafe { PROGRAM.as_ref() }
                .expect("Program not initialized");
            let mut service = program_ref.service();
            let output = service.handle(&input).await;
            output
        };
        gstd::msg::reply_bytes(output, 0).expect("Failed to send output");
    }
}


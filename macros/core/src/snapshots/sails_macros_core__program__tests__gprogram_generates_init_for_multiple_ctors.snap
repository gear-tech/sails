---
source: macros/core/src/program.rs
expression: result
---
impl MyProgram {
    pub async fn new(p1: u32, p2: String) -> Self {
        Self { p1, p2 }
    }
    pub fn new2(p2: String, p1: u32) -> Self {
        Self { p1, p2 }
    }
}
use sails_rtl_gstd::Decode as InvocationParamsStructsDecode;
use sails_rtl_gstd::TypeInfo as InvocationParamsStructsTypeInfo;
#[derive(InvocationParamsStructsDecode, InvocationParamsStructsTypeInfo)]
struct __NewParams {
    p1: u32,
    p2: String,
}
#[derive(InvocationParamsStructsDecode, InvocationParamsStructsTypeInfo)]
struct __New2Params {
    p2: String,
    p1: u32,
}
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rtl_gstd::{*, gstd};
    pub(crate) static mut PROGRAM: Option<MyProgram> = None;
    #[gstd::async_init]
    async fn init() {
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        let (program, invocation_route) = if input
            .starts_with(&[12u8, 78u8, 101u8, 119u8])
        {
            let request = __NewParams::decode(&mut &input[4usize..])
                .expect("Failed to decode request");
            let program = MyProgram::new(request.p1, request.p2).await;
            static INVOCATION_ROUTE: [u8; 4usize] = [12u8, 78u8, 101u8, 119u8];
            (program, INVOCATION_ROUTE.as_ref())
        } else if input.starts_with(&[16u8, 78u8, 101u8, 119u8, 50u8]) {
            let request = __New2Params::decode(&mut &input[5usize..])
                .expect("Failed to decode request");
            let program = MyProgram::new2(request.p2, request.p1);
            static INVOCATION_ROUTE: [u8; 5usize] = [16u8, 78u8, 101u8, 119u8, 50u8];
            (program, INVOCATION_ROUTE.as_ref())
        } else {
            let invocation_route = String::decode(&mut input)
                .expect("Failed to decode invocation route");
            panic!("Unknown init request: {}", invocation_route);
        };
        unsafe {
            PROGRAM = Some(program);
        }
        gstd::msg::reply_bytes(invocation_route, 0).expect("Failed to send output");
    }
}


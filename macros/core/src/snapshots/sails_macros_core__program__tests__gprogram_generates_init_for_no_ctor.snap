---
source: macros/core/src/program.rs
expression: result
---
impl MyProgram {}
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rtl_gstd::{*, gstd};
    pub(crate) static mut PROGRAM: Option<MyProgram> = None;
    #[no_mangle]
    extern "C" fn init() {
        let input = gstd::msg::load_bytes().expect("Failed to read input");
        if !input.is_empty() {
            let input = if input.len() <= 8 {
                format!("0x{}", hex::encode(input))
            } else {
                format!(
                    "0x{}..{}", hex::encode(& input[..4]), hex::encode(& input[input
                    .len() - 4..])
                )
            };
            panic!("Unexpected non-empty init request: {}", input);
        }
        unsafe {
            PROGRAM = Some(MyProgram::default());
        }
        gstd::msg::reply_bytes(input, 0).expect("Failed to send output");
    }
}


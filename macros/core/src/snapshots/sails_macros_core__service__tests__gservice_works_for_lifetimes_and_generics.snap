---
source: macros/core/src/service.rs
expression: result
---
impl<'a, 'b, T> SomeService<'a, 'b, T>
where
    T: Clone,
{
    pub fn do_this(&mut self) -> u32 {
        42
    }
    pub async fn handle(&mut self, mut input: &[u8]) -> Vec<u8> {
        let invocation_path = "DoThis".encode();
        if input.starts_with(&invocation_path) {
            let output = self.__do_this(&input[invocation_path.len()..]).await;
            return [invocation_path, output].concat();
        }
        let invocation_path = String::decode(&mut input)
            .expect("Failed to decode invocation path");
        panic!("Unknown request: {}", invocation_path);
    }
    async fn __do_this(&mut self, mut input: &[u8]) -> Vec<u8> {
        let request = __DoThisParams::decode(&mut input)
            .expect("Failed to decode request");
        let result = self.do_this();
        return result.encode();
    }
}
#[derive(Decode, TypeInfo)]
pub struct __DoThisParams {}
pub mod meta {
    use super::*;
    #[derive(TypeInfo)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(TypeInfo)]
    pub enum QueriesMeta {}
    pub struct ServiceMeta;
    impl sails_service_meta::ServiceMeta for ServiceMeta {
        type Commands = CommandsMeta;
        type Queries = QueriesMeta;
    }
}


---
source: macros/core/src/service.rs
expression: result
---
impl<'a, 'b, T> SomeService<'a, 'b, T>
where
    T: Clone,
{
    pub fn do_this(&mut self) -> u32 {
        42
    }
    pub async fn handle(&mut self, mut input: &[u8]) -> Vec<u8> {
        if input.starts_with(&[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8]) {
            let output = self.__do_this(&input[7usize..]).await;
            static INVOCATION_ROUTE: [u8; 7usize] = [
                24u8,
                68u8,
                111u8,
                84u8,
                104u8,
                105u8,
                115u8,
            ];
            return [INVOCATION_ROUTE.as_ref(), &output].concat();
        }
        let invocation_path = String::decode(&mut input)
            .expect("Failed to decode invocation path");
        panic!("Unknown request: {}", invocation_path);
    }
    async fn __do_this(&mut self, mut input: &[u8]) -> Vec<u8> {
        let request = __DoThisParams::decode(&mut input)
            .expect("Failed to decode request");
        let result = self.do_this();
        return result.encode();
    }
}
impl<'a, 'b, T> sails_idl_meta::ServiceMeta for SomeService<'a, 'b, T>
where
    T: Clone,
{
    fn commands() -> scale_info::MetaType {
        scale_info::MetaType::new::<meta::CommandsMeta>()
    }
    fn queries() -> scale_info::MetaType {
        scale_info::MetaType::new::<meta::QueriesMeta>()
    }
}
#[derive(Decode, TypeInfo)]
pub struct __DoThisParams {}
mod meta {
    use super::*;
    #[derive(TypeInfo)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(TypeInfo)]
    pub enum QueriesMeta {}
}


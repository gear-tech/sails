{{#each types as |type|}}
  {{#each type.type.def}}
    {{~> (deref @key) id=type.id docs=type.type.docs}}
  {{/each}}

{{/each}}
{{#if (len ctors)}}
constructor {
{{#each ctors}}
  {{#each ./[2]}}
  /// {{{this}}}
  {{/each}}
  {{./[0]}} : ({{#each ./[1]}}{{#if @index}}, {{/if}}{{name}}: {{{lookup @root/type_names type}}}{{/each}});
{{/each}}
};

{{/if}}
{{#each services}}
service {{#if name}}{{name}} {{/if}}{
  /// !@interface_id = {{hex64 interface_id}}
{{#if (len extends)}}
  /// !@extends
  {{#each extends}}
  ///   {{name}} (interface_id={{hex64 interface_id}})
  {{/each}}
{{/if}}
{{#each commands}}
  {{#each docs}}
  /// {{{this}}}
  {{/each}}
  /// !@entry_id = {{hex16 entry_id}}
  {{name}} : ({{#each params}}{{#if @index}}, {{/if}}{{#if name}}{{name}}: {{/if}}{{{lookup @root/type_names type}}}{{/each}}) -> {{{lookup @root/type_names result_type_id}}};
{{/each}}
{{#each queries}}
  {{#each docs}}
  /// {{{this}}}
  {{/each}}
  /// !@entry_id = {{hex16 entry_id}}
  query {{name}} : ({{#each params}}{{#if @index}}, {{/if}}{{#if name}}{{name}}: {{/if}}{{{lookup @root/type_names type}}}{{/each}}) -> {{{lookup @root/type_names result_type_id}}};
{{/each}}
{{#if (len events)}}

  events {
  {{#each events}}
    {{#each variant.docs}}
    /// {{{this}}}
    {{/each}}
    /// !@entry_id = {{hex16 entry_id}}
    {{variant.name}}
    {{~#if variant.fields.[1]}}: struct {
      {{#each variant.fields}}
      {{#each docs}}
      /// {{{this}}}
      {{/each}}
      {{#if name}}{{name}}: {{/if~}}{{{lookup @root/type_names type}}},
      {{/each}}
    } {{~else}}
    {{~#if variant.fields.[0]}}: {{#with variant.fields.[0]}} {{~#if name~}} struct {
      {{#each docs}}
      /// {{{this}}}
      {{/each}}
      {{name}}: {{{lookup @root/type_names type}}}
    }{{else~}}
      {{{lookup @root/type_names type}}}
    {{~/if}}
    {{~/with~}}
    {{~/if~}}
    {{~/if~}}
    ;
  {{/each}}
  }
{{/if}}
};

{{/each}}

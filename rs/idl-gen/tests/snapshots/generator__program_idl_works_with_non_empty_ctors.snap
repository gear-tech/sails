---
source: rs/idl-gen/tests/generator.rs
expression: generated_idl
---
/// TupleStruct docs
type TupleStruct = struct {
  bool,
};

/// GenericStruct docs
type GenericStructForH256 = struct {
  /// GenericStruct field `p1`
  p1: h256,
};

/// GenericStruct docs
type GenericStructForStr = struct {
  /// GenericStruct field `p1`
  p1: str,
};

/// GenericConstStruct docs
type GenericConstStruct1 = struct {
  /// GenericStruct field `field`
  field: [u8, 8],
};

/// GenericConstStruct docs
type GenericConstStruct2 = struct {
  /// GenericStruct field `field`
  field: [u8, 32],
};

type DoThatParam = struct {
  p1: u32,
  p2: str,
  p3: ManyVariants,
};

type ManyVariants = enum {
  One,
  Two: u32,
  Three: opt vec u256,
  Four: struct {
    a: u32,
    b: opt u16,
  },
  Five: struct {
    str,
    vec u8,
  },
  Six: struct { u32 },
  Seven: GenericEnumForU32AndStr,
  Eight: [map (u32, str), 10],
};

/// GenericEnum docs
/// with two lines
type GenericEnumForU32AndStr = enum {
  /// GenericEnum `Variant1` of type 'T1'
  Variant1: u32,
  /// GenericEnum `Variant2` of type 'T2'
  Variant2: str,
};

/// GenericEnum docs
/// with two lines
type GenericEnumForBoolAndU32 = enum {
  /// GenericEnum `Variant1` of type 'T1'
  Variant1: bool,
  /// GenericEnum `Variant2` of type 'T2'
  Variant2: u32,
};

type ThatParam = struct {
  p1: ManyVariants,
};

constructor {
  /// This is New constructor
  New : ();
  /// This is FromStr constructor
  /// with second line
  FromStr : (p1: str);
};

service {
  /// Some description
  DoThis : (p1: u32, p2: str, p3: struct { opt str, u8 }, p4: TupleStruct, p5: GenericStructForH256, p6: GenericStructForStr, p7: GenericConstStruct1, p8: GenericConstStruct2) -> str;
  /// Some multiline description
  /// Second line
  /// Third line
  DoThat : (par1: DoThatParam) -> result (struct { str, u32 }, struct { str });
  /// This is a query
  query This : (p1: u32, p2: str, p3: struct { opt str, u8 }, p4: TupleStruct, p5: GenericEnumForBoolAndU32) -> result (struct { str, u32 }, str);
  /// This is a second query
  /// This is a second line
  query That : (pr1: ThatParam) -> str;

  events {
    /// `This` Done
    ThisDone: u32;
    ThisDoneTwice: struct {
      /// This is the first unnamed field
      u32,
      /// This is the second unnamed field
      u32,
    };
    /// `That` Done too
    ThatDone: struct {
      /// This is `p1` field
      p1: str
    };
  }
};

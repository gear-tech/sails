---
source: rs/idl-gen/tests/generator.rs
expression: generated_idl
---
type TupleStruct = struct {
  bool,
};

type GenericStructForH256 = struct {
  p1: h256,
};

type GenericStructForStr = struct {
  p1: str,
};

type GenericConstStruct1 = struct {
  field: [u8, 8],
};

type GenericConstStruct2 = struct {
  field: [u8, 32],
};

type DoThatParam = struct {
  p1: u32,
  p2: str,
  p3: ManyVariants,
};

type ManyVariants = enum {
  One,
  Two: u32,
  Three: opt vec u256,
  Four: struct { a: u32, b: opt u16 },
  Five: struct { str, vec u8 },
  Six: struct { u32 },
  Seven: GenericEnumForU32AndStr,
  Eight: [map (u32, str), 10],
};

type GenericEnumForU32AndStr = enum {
  Variant1: u32,
  Variant2: str,
};

type GenericEnumForBoolAndU32 = enum {
  Variant1: bool,
  Variant2: u32,
};

type ThatParam = struct {
  p1: ManyVariants,
};

service {
  /// Some description
  DoThis : (p1: u32, p2: str, p3: struct { opt str, u8 }, p4: TupleStruct, p5: GenericStructForH256, p6: GenericStructForStr, p7: GenericConstStruct1, p8: GenericConstStruct2) -> str;
  /// Some multiline description
  /// Second line
  /// Third line
  DoThat : (par1: DoThatParam) -> result (struct { str, u32 }, struct { str });
  /// This is a query
  query This : (p1: u32, p2: str, p3: struct { opt str, u8 }, p4: TupleStruct, p5: GenericEnumForBoolAndU32) -> result (struct { str, u32 }, str);
  /// This is a second query
  /// This is a second line
  query That : (pr1: ThatParam) -> str;

  events {
    /// `This` Done
    ThisDone: u32;
    /// `That` Done too
    ThatDone: struct { p1: str };
  }
};

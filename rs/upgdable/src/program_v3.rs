use ops::Deref;

use super::*;

pub struct UpgradableProgramV3(());

//#[program]
impl UpgradableProgramV3 {
    // The `p1` parameter needs be put into storage, but we want the storage to be a "part of the program".
    // We can pass it as a first parameter to the ctor, but it doesn't look nice. Another option is to
    // require a program to implement some trait Program declaring expectations for the storage.
    // Another option ctor returns a tuple of the program and the storage.
    pub fn new(p1: u32) -> Self {
        Self(())
    }

    pub fn service(this: &<Self as ProgramSelf>::Type) -> UpgradableService {
        this.service_ctor()
    }

    fn service_ctor(&self) -> UpgradableService {
        UpgradableService::new()
    }
}

// Generated by macros
pub struct UpgradableProgramV3Wrapper {
    program: UpgradableProgramV3,
}

// Generated by macros
impl Deref for UpgradableProgramV3Wrapper {
    type Target = UpgradableProgramV3;

    fn deref(&self) -> &Self::Target {
        &self.program
    }
}

// Generated by macros
impl ProgramSelf for UpgradableProgramV3 {
    type Type = UpgradableProgramV3Wrapper;
}

// Comes from `sails-rs`
pub trait ProgramSelf {
    type Type: Deref<Target = Self>;
}

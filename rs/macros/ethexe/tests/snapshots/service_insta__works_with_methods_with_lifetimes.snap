---
source: rs/macros/ethexe/tests/service_insta.rs
expression: result
---
impl ReferenceService {
    pub fn baked(&self) -> &'static str {
        "Static str!"
    }
    pub fn incr(&mut self) -> &'static ReferenceCount {
        unsafe {
            COUNTER.0 += 1;
            &*ptr::addr_of!(COUNTER)
        }
    }
    pub fn add_byte(&mut self, byte: u8) -> &'static [u8] {
        unsafe {
            BYTES.push(byte);
            &*ptr::addr_of!(BYTES)
        }
    }
    pub async fn first_byte<'a>(&self) -> Option<&'a u8> {
        unsafe { BYTES.first() }
    }
    pub async fn last_byte<'a>(&self) -> Option<&'a u8> {
        unsafe { BYTES.last() }
    }
}
pub struct ReferenceServiceExposure<T> {
    message_id: sails_rs::MessageId,
    route: &'static [u8],
    #[cfg(not(target_arch = "wasm32"))]
    inner: Box<T>,
    #[cfg(not(target_arch = "wasm32"))]
    inner_ptr: *const T,
    #[cfg(target_arch = "wasm32")]
    inner: T,
    base: (),
}
impl ReferenceServiceExposure<ReferenceService> {
    pub fn add_byte(&mut self, byte: u8) -> &'static [u8] {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.add_byte(byte)
    }
    pub fn baked(&self) -> &'static str {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.baked()
    }
    pub async fn first_byte<'a>(&self) -> Option<&'a u8> {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.first_byte().await
    }
    pub fn incr(&mut self) -> &'static ReferenceCount {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.incr()
    }
    pub async fn last_byte<'a>(&self) -> Option<&'a u8> {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.last_byte().await
    }
    pub async fn try_handle(&mut self, input: &[u8]) -> Option<(Vec<u8>, u128)> {
        use sails_rs::gstd::InvocationIo;
        if let Ok(request) = reference_service_meta::__AddByteParams::decode_params(
            input,
        ) {
            let result = self.add_byte(request.byte);
            let value = 0u128;
            let output = reference_service_meta::__AddByteParams::encode_reply(&result);
            return Some((output, value));
        }
        if let Ok(request) = reference_service_meta::__BakedParams::decode_params(
            input,
        ) {
            let result = self.baked();
            let value = 0u128;
            let output = reference_service_meta::__BakedParams::encode_reply(&result);
            return Some((output, value));
        }
        if let Ok(request) = reference_service_meta::__FirstByteParams::decode_params(
            input,
        ) {
            let result = self.first_byte().await;
            let value = 0u128;
            let output = reference_service_meta::__FirstByteParams::encode_reply(
                &result,
            );
            return Some((output, value));
        }
        if let Ok(request) = reference_service_meta::__IncrParams::decode_params(input) {
            let result = self.incr();
            let value = 0u128;
            let output = reference_service_meta::__IncrParams::encode_reply(&result);
            return Some((output, value));
        }
        if let Ok(request) = reference_service_meta::__LastByteParams::decode_params(
            input,
        ) {
            let result = self.last_byte().await;
            let value = 0u128;
            let output = reference_service_meta::__LastByteParams::encode_reply(&result);
            return Some((output, value));
        }
        None
    }
    pub async fn try_handle_solidity(
        &mut self,
        method: &[u8],
        input: &[u8],
    ) -> Option<(Vec<u8>, u128)> {
        if method == &[28u8, 65u8, 100u8, 100u8, 66u8, 121u8, 116u8, 101u8] {
            let (byte,): (u8,) = sails_rs::alloy_sol_types::SolValue::abi_decode_params(
                    input,
                    false,
                )
                .expect("Failed to decode request");
            let result = self.add_byte(byte);
            let value = 0u128;
            return Some((
                sails_rs::alloy_sol_types::SolValue::abi_encode(&result),
                value,
            ));
        }
        if method == &[20u8, 66u8, 97u8, 107u8, 101u8, 100u8] {
            let (): () = sails_rs::alloy_sol_types::SolValue::abi_decode_params(
                    input,
                    false,
                )
                .expect("Failed to decode request");
            let result = self.baked();
            let value = 0u128;
            return Some((
                sails_rs::alloy_sol_types::SolValue::abi_encode(&result),
                value,
            ));
        }
        if method == &[36u8, 70u8, 105u8, 114u8, 115u8, 116u8, 66u8, 121u8, 116u8, 101u8]
        {
            let (): () = sails_rs::alloy_sol_types::SolValue::abi_decode_params(
                    input,
                    false,
                )
                .expect("Failed to decode request");
            let result = self.first_byte().await;
            let value = 0u128;
            return Some((
                sails_rs::alloy_sol_types::SolValue::abi_encode(&result),
                value,
            ));
        }
        if method == &[16u8, 73u8, 110u8, 99u8, 114u8] {
            let (): () = sails_rs::alloy_sol_types::SolValue::abi_decode_params(
                    input,
                    false,
                )
                .expect("Failed to decode request");
            let result = self.incr();
            let value = 0u128;
            return Some((
                sails_rs::alloy_sol_types::SolValue::abi_encode(&result),
                value,
            ));
        }
        if method == &[32u8, 76u8, 97u8, 115u8, 116u8, 66u8, 121u8, 116u8, 101u8] {
            let (): () = sails_rs::alloy_sol_types::SolValue::abi_decode_params(
                    input,
                    false,
                )
                .expect("Failed to decode request");
            let result = self.last_byte().await;
            let value = 0u128;
            return Some((
                sails_rs::alloy_sol_types::SolValue::abi_encode(&result),
                value,
            ));
        }
        None
    }
}
impl sails_rs::gstd::services::Exposure for ReferenceServiceExposure<ReferenceService> {
    fn message_id(&self) -> sails_rs::MessageId {
        self.message_id
    }
    fn route(&self) -> &'static [u8] {
        self.route
    }
}
impl sails_rs::gstd::services::Service for ReferenceService {
    type Exposure = ReferenceServiceExposure<Self>;
    fn expose(
        self,
        message_id: sails_rs::MessageId,
        route: &'static [u8],
    ) -> Self::Exposure {
        #[cfg(not(target_arch = "wasm32"))]
        let inner_box = Box::new(self);
        #[cfg(not(target_arch = "wasm32"))]
        let inner = inner_box.as_ref();
        #[cfg(target_arch = "wasm32")]
        let inner = &self;
        Self::Exposure {
            message_id,
            route,
            base: (),
            #[cfg(not(target_arch = "wasm32"))]
            inner_ptr: inner_box.as_ref() as *const Self,
            #[cfg(not(target_arch = "wasm32"))]
            inner: inner_box,
            #[cfg(target_arch = "wasm32")]
            inner: self,
        }
    }
}
impl sails_rs::meta::ServiceMeta for ReferenceService {
    type CommandsMeta = reference_service_meta::CommandsMeta;
    type QueriesMeta = reference_service_meta::QueriesMeta;
    type EventsMeta = reference_service_meta::EventsMeta;
    const BASE_SERVICES: &'static [sails_rs::meta::AnyServiceMetaFn] = &[];
}
mod reference_service_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __AddByteParams {
        pub(super) byte: u8,
    }
    impl sails_rs::gstd::InvocationIo for __AddByteParams {
        const ROUTE: &'static [u8] = &[
            28u8,
            65u8,
            100u8,
            100u8,
            66u8,
            121u8,
            116u8,
            101u8,
        ];
        type Params = Self;
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __BakedParams {}
    impl sails_rs::gstd::InvocationIo for __BakedParams {
        const ROUTE: &'static [u8] = &[20u8, 66u8, 97u8, 107u8, 101u8, 100u8];
        type Params = Self;
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __FirstByteParams {}
    impl sails_rs::gstd::InvocationIo for __FirstByteParams {
        const ROUTE: &'static [u8] = &[
            36u8,
            70u8,
            105u8,
            114u8,
            115u8,
            116u8,
            66u8,
            121u8,
            116u8,
            101u8,
        ];
        type Params = Self;
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __IncrParams {}
    impl sails_rs::gstd::InvocationIo for __IncrParams {
        const ROUTE: &'static [u8] = &[16u8, 73u8, 110u8, 99u8, 114u8];
        type Params = Self;
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __LastByteParams {}
    impl sails_rs::gstd::InvocationIo for __LastByteParams {
        const ROUTE: &'static [u8] = &[
            32u8,
            76u8,
            97u8,
            115u8,
            116u8,
            66u8,
            121u8,
            116u8,
            101u8,
        ];
        type Params = Self;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {
        AddByte(__AddByteParams, &'static [u8]),
        Incr(__IncrParams, &'static ReferenceCount),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {
        Baked(__BakedParams, &'static str),
        FirstByte(__FirstByteParams, Option<&'static u8>),
        LastByte(__LastByteParams, Option<&'static u8>),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = NoEvents;
}
impl sails_rs::solidity::ServiceSignature for ReferenceService {
    const METHODS: &'static [sails_rs::solidity::MethodRoute] = &[
        (
            sails_rs::concatcp!(
                "add_byte", << (u8, u128,) as sails_rs::alloy_sol_types::SolValue >
                ::SolType as sails_rs::alloy_sol_types::SolType > ::SOL_NAME,
            ),
            &[28u8, 65u8, 100u8, 100u8, 66u8, 121u8, 116u8, 101u8] as &[u8],
        ),
        (
            sails_rs::concatcp!(
                "baked", << (u128,) as sails_rs::alloy_sol_types::SolValue > ::SolType as
                sails_rs::alloy_sol_types::SolType > ::SOL_NAME,
            ),
            &[20u8, 66u8, 97u8, 107u8, 101u8, 100u8] as &[u8],
        ),
        (
            sails_rs::concatcp!(
                "first_byte", << (u128,) as sails_rs::alloy_sol_types::SolValue >
                ::SolType as sails_rs::alloy_sol_types::SolType > ::SOL_NAME,
            ),
            &[36u8, 70u8, 105u8, 114u8, 115u8, 116u8, 66u8, 121u8, 116u8, 101u8] as &[u8],
        ),
        (
            sails_rs::concatcp!(
                "incr", << (u128,) as sails_rs::alloy_sol_types::SolValue > ::SolType as
                sails_rs::alloy_sol_types::SolType > ::SOL_NAME,
            ),
            &[16u8, 73u8, 110u8, 99u8, 114u8] as &[u8],
        ),
        (
            sails_rs::concatcp!(
                "last_byte", << (u128,) as sails_rs::alloy_sol_types::SolValue >
                ::SolType as sails_rs::alloy_sol_types::SolType > ::SOL_NAME,
            ),
            &[32u8, 76u8, 97u8, 115u8, 116u8, 66u8, 121u8, 116u8, 101u8] as &[u8],
        ),
    ];
}

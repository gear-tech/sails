use fluent_asserter::prelude::*;
use parity_scale_codec::Encode;
use sails_rs::{
    gstd::{service, services::Service},
    MessageId,
};
use tokio::runtime::Runtime;

struct MyService;

#[service]
impl MyService {
    pub async fn do_this(&mut self, p1: u32, p2: String) -> String {
        format!("{p1}: ") + &p2
    }

    pub fn this(&self, p1: bool) -> bool {
        !p1
    }
}

fn main() {
    let rt = Runtime::new().unwrap();
    assert_that_code!(|| {
        rt.block_on(async {
            let input = [
                44, 77, 101, 109, 101, 70, 97, 99, 116, 111, 114, 121, 84, 67, 114, 101, 97, 116,
                101, 70, 117, 110, 103, 105, 98, 108, 101, 80, 114, 111, 103, 114, 97, 109, 32, 77,
                101, 109, 101, 78, 97, 109, 101, 16, 77, 69, 77, 69, 2, 44, 68, 101, 115, 99, 114,
                105, 112, 116, 105, 111, 110, 64, 104, 116, 116, 112, 115, 58, 47, 47, 105, 109,
                103, 46, 99, 111, 109, 47, 1, 76, 104, 116, 116, 112, 58, 47, 47, 101, 120, 97,
                109, 112, 108, 101, 46, 111, 114, 103, 47, 1, 76, 104, 116, 116, 112, 58, 47, 47,
                116, 101, 108, 101, 103, 114, 97, 109, 46, 109, 101, 47, 1, 76, 104, 116, 116, 112,
                58, 47, 47, 116, 119, 105, 116, 116, 101, 114, 46, 99, 111, 109, 47, 1, 72, 104,
                116, 116, 112, 58, 47, 47, 100, 105, 115, 99, 111, 114, 100, 46, 103, 103, 47, 1,
                84, 104, 116, 116, 112, 58, 47, 47, 116, 111, 107, 101, 110, 111, 109, 105, 99,
                115, 46, 103, 103, 47, 232, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 150, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]
            .encode()
            .encode();

            MyService
                .expose(MessageId::from(123), &[1, 2, 3])
                .handle(&input)
                .await
        })
    })
    .panics()
    .with_message("Unknown request: 0x81112c00..00000000");
}

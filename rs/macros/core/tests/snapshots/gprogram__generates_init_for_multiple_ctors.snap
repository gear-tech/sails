---
source: rs/macros/core/tests/gprogram.rs
expression: result
---
impl MyProgram {
    pub async fn new(p1: u32, p2: String) -> Self {
        Self { p1, p2 }
    }
    pub fn new2(p2: String, p1: u32) -> Self {
        Self { p1, p2 }
    }
}
impl sails_rs::meta::ProgramMeta for MyProgram {
    type ConstructorsMeta = meta_in_program::ConstructorsMeta;
    const SERVICES: &'static [(&'static str, fn() -> sails_rs::meta::AnyServiceMeta)] = &[];
}
mod meta_in_program {
    use super::*;
    #[derive(sails_rs::Decode, sails_rs::TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    #[allow(dead_code)]
    pub struct __NewParams {
        pub(super) p1: u32,
        pub(super) p2: String,
    }
    #[derive(sails_rs::Decode, sails_rs::TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    #[allow(dead_code)]
    pub struct __New2Params {
        pub(super) p2: String,
        pub(super) p1: u32,
    }
    #[derive(sails_rs::TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum ConstructorsMeta {
        New(__NewParams),
        New2(__New2Params),
    }
}
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rs::{gstd, hex, prelude::*};
    static mut PROGRAM: Option<MyProgram> = None;
    #[gstd::async_init]
    async fn init() {
        sails_rs::gstd::events::__enable_events();
        let mut input: &[u8] = &sails_rs::gstd::msg::load_bytes()
            .expect("Failed to read input");
        let (program, invocation_route) = if input
            .starts_with(&[12u8, 78u8, 101u8, 119u8])
        {
            const INVOCATION_ROUTE: &[u8] = &[12u8, 78u8, 101u8, 119u8];
            let request = meta_in_program::__NewParams::decode(&mut &input[4usize..])
                .expect("Failed to decode request");
            let program = MyProgram::new(request.p1, request.p2).await;
            (program, INVOCATION_ROUTE)
        } else if input.starts_with(&[16u8, 78u8, 101u8, 119u8, 50u8]) {
            const INVOCATION_ROUTE: &[u8] = &[16u8, 78u8, 101u8, 119u8, 50u8];
            let request = meta_in_program::__New2Params::decode(&mut &input[5usize..])
                .expect("Failed to decode request");
            let program = MyProgram::new2(request.p2, request.p1);
            (program, INVOCATION_ROUTE)
        } else {
            sails_rs::gstd::unknown_input_panic("Unexpected ctor", input)
        };
        unsafe {
            PROGRAM = Some(program);
        }
        sails_rs::gstd::msg::reply_bytes(invocation_route, 0)
            .expect("Failed to send output");
    }
    #[gstd::async_main]
    async fn main() {
        let mut input: &[u8] = &sails_rs::gstd::msg::load_bytes()
            .expect("Failed to read input");
        let program_ref = unsafe { PROGRAM.as_ref() }.expect("Program not initialized");
        let (output, value): (Vec<u8>, ValueUnit) = {
            sails_rs::gstd::unknown_input_panic("Unexpected service", input)
        };
        sails_rs::gstd::msg::reply_bytes(output, value).expect("Failed to send output");
    }
}

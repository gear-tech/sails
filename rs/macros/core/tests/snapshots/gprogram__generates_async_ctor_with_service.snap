---
source: rs/macros/core/tests/gprogram.rs
expression: result
---
impl MyProgram {
    pub async fn new(p1: u32, p2: String) -> Self {
        Self { p1, p2 }
    }
    fn __service(&self) -> MyService {
        MyService
    }
    pub fn service(&self) -> <MyService as sails_rs::gstd::services::Service>::Exposure {
        let service = self.__service();
        let exposure = <MyService as sails_rs::gstd::services::Service>::expose(
            service,
            __ROUTE_SERVICE.as_ref(),
        );
        exposure
    }
}
const __ROUTE_SERVICE: [u8; 8usize] = [
    28u8, 83u8, 101u8, 114u8, 118u8, 105u8, 99u8, 101u8,
];
impl sails_rs::meta::ProgramMeta for MyProgram {
    type ConstructorsMeta = meta_in_program::ConstructorsMeta;
    const SERVICES: &'static [(&'static str, sails_rs::meta::AnyServiceMetaFn)] = &[
        ("Service", sails_rs::meta::AnyServiceMeta::new::<MyService>),
    ];
    const ASYNC: bool = true;
}
mod meta_in_program {
    use super::*;
    use sails_rs::gstd::InvocationIo;
    #[derive(sails_rs::Decode, sails_rs::TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __NewParams {
        pub(super) p1: u32,
        pub(super) p2: String,
    }
    impl InvocationIo for __NewParams {
        const ROUTE: &'static [u8] = &[12u8, 78u8, 101u8, 119u8];
        type Params = Self;
        const ASYNC: bool = true;
    }
    #[derive(sails_rs::TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum ConstructorsMeta {
        New(__NewParams),
    }
}
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rs::{gstd, hex, prelude::*};
    static mut PROGRAM: Option<MyProgram> = None;
    #[unsafe(no_mangle)]
    extern "C" fn init() {
        use gstd::InvocationIo;
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        let invocation_route = if let Ok(request) = meta_in_program::__NewParams::decode_params(
            input,
        ) {
            gstd::message_loop(async move {
                let program = MyProgram::new(request.p1, request.p2).await;
                unsafe {
                    PROGRAM = Some(program);
                }
            });
            meta_in_program::__NewParams::ROUTE
        } else {
            gstd::unknown_input_panic("Unexpected ctor", input)
        };
        gstd::msg::reply_bytes(invocation_route, 0).expect("Failed to send output");
    }
    #[unsafe(no_mangle)]
    extern "C" fn handle() {
        let mut input = gstd::msg::load_bytes().expect("Failed to read input");
        let program_ref = unsafe { PROGRAM.as_mut() }.expect("Program not initialized");
        if input.starts_with(&__ROUTE_SERVICE) {
            let mut service = program_ref.service();
            let is_async = service
                .check_asyncness(&input[__ROUTE_SERVICE.len()..])
                .unwrap_or_else(|| {
                    gstd::unknown_input_panic(
                        "Unknown call",
                        &input[__ROUTE_SERVICE.len()..],
                    )
                });
            if is_async {
                gstd::message_loop(async move {
                    service
                        .try_handle_async(
                            &input[__ROUTE_SERVICE.len()..],
                            |encoded_result, value| {
                                gstd::msg::reply_bytes(encoded_result, value)
                                    .expect("Failed to send output");
                            },
                        )
                        .await
                        .unwrap_or_else(|| {
                            gstd::unknown_input_panic("Unknown request", &input)
                        });
                });
            } else {
                service
                    .try_handle(
                        &input[__ROUTE_SERVICE.len()..],
                        |encoded_result, value| {
                            gstd::msg::reply_bytes(encoded_result, value)
                                .expect("Failed to send output");
                        },
                    )
                    .unwrap_or_else(|| gstd::unknown_input_panic(
                        "Unknown request",
                        &input,
                    ));
            }
        } else {
            gstd::unknown_input_panic("Unexpected service", &input)
        };
    }
    #[unsafe(no_mangle)]
    extern "C" fn handle_reply() {
        use sails_rs::meta::ProgramMeta;
        if MyProgram::ASYNC {
            gstd::handle_reply_with_hook();
        }
    }
    #[unsafe(no_mangle)]
    extern "C" fn handle_signal() {
        use sails_rs::meta::ProgramMeta;
        if MyProgram::ASYNC {
            gstd::handle_signal();
        }
    }
}

---
source: rs/macros/core/tests/gservice.rs
expression: result
---
impl SomeService {
    pub fn do_this(&mut self) -> u32 {
        42
    }
    pub fn this(&self) -> bool {
        true
    }
    fn notify_on(&mut self, event: SomeEvents) -> sails_rs::errors::Result<()> {
        #[cfg(not(target_arch = "wasm32"))]
        { sails_rs::gstd::services::ServiceWithEvents::notify_on(self, event) }
        #[cfg(target_arch = "wasm32")] sails_rs::gstd::events::__notify_on(event)
    }
}
pub struct SomeServiceExposure<T: sails_rs::gstd::services::Service> {
    message_id: sails_rs::MessageId,
    route: &'static [u8],
    #[cfg(not(target_arch = "wasm32"))]
    inner: Box<T>,
    #[cfg(not(target_arch = "wasm32"))]
    inner_ptr: *const T,
    #[cfg(target_arch = "wasm32")]
    inner: T,
    base: T::BaseExposures,
}
impl<T: sails_rs::gstd::services::Service> sails_rs::gstd::services::Exposure
for SomeServiceExposure<T> {
    fn message_id(&self) -> sails_rs::MessageId {
        self.message_id
    }
    fn route(&self) -> &'static [u8] {
        self.route
    }
}
#[cfg(not(target_arch = "wasm32"))]
impl<T: sails_rs::gstd::services::ServiceWithEvents> SomeServiceExposure<T> {
    pub fn listen(&self) -> impl sails_rs::futures::Stream<Item = T::Events> {
        if core::mem::size_of_val(self.inner.as_ref()) == 0 {
            panic!(
                "setting event listener on a zero-sized service is not supported for now"
            );
        }
        let service_ptr = self.inner_ptr as usize;
        let (tx, rx) = sails_rs::async_channel::unbounded::<T::Events>();
        let mut map = <T as sails_rs::gstd::services::ServiceWithEvents>::event_senders();
        map.insert(service_ptr, tx);
        rx
    }
}
#[cfg(not(target_arch = "wasm32"))]
impl<T: sails_rs::gstd::services::Service> Drop for SomeServiceExposure<T> {
    fn drop(&mut self) {
        let service_ptr = self.inner_ptr as usize;
        let mut map = SOME_SERVICE_SENDER_MAP.lock();
        if let Some(tx) = map.remove(&service_ptr) {
            tx.close();
        }
    }
}
impl SomeServiceExposure<SomeService> {
    pub fn do_this(&mut self) -> u32 {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.do_this()
    }
    pub fn this(&self) -> bool {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.this()
    }
    pub async fn try_handle(&mut self, input: &[u8]) -> Option<(Vec<u8>, u128)> {
        use sails_rs::gstd::InvocationIo;
        if let Ok(request) = some_service_meta::__DoThisParams::decode_params(input) {
            let result = self.do_this();
            let value = 0u128;
            let output = some_service_meta::__DoThisParams::encode_reply(&result);
            return Some((output, value));
        }
        if let Ok(request) = some_service_meta::__ThisParams::decode_params(input) {
            let result = self.this();
            let value = 0u128;
            let output = some_service_meta::__ThisParams::encode_reply(&result);
            return Some((output, value));
        }
        None
    }
}
impl sails_rs::gstd::services::Service for SomeService {
    type Exposure = SomeServiceExposure<Self>;
    type BaseExposures = ();
    fn expose(
        self,
        message_id: sails_rs::MessageId,
        route: &'static [u8],
    ) -> Self::Exposure {
        #[cfg(not(target_arch = "wasm32"))]
        let inner_box = Box::new(self);
        #[cfg(not(target_arch = "wasm32"))]
        let inner = inner_box.as_ref();
        #[cfg(target_arch = "wasm32")]
        let inner = &self;
        Self::Exposure {
            message_id,
            route,
            base: (),
            #[cfg(not(target_arch = "wasm32"))]
            inner_ptr: inner_box.as_ref() as *const Self,
            #[cfg(not(target_arch = "wasm32"))]
            inner: inner_box,
            #[cfg(target_arch = "wasm32")]
            inner: self,
        }
    }
}
#[cfg(not(target_arch = "wasm32"))]
static SOME_SERVICE_SENDER_MAP: sails_rs::spin::Mutex<
    sails_rs::collections::BTreeMap<usize, sails_rs::async_channel::Sender<SomeEvents>>,
> = sails_rs::spin::Mutex::new(sails_rs::collections::BTreeMap::new());
#[cfg(not(target_arch = "wasm32"))]
impl sails_rs::gstd::services::ServiceWithEvents for SomeService {
    type Events = SomeEvents;
    fn event_senders() -> impl core::ops::DerefMut<
        Target = sails_rs::collections::BTreeMap<
            usize,
            sails_rs::async_channel::Sender<Self::Events>,
        >,
    > {
        SOME_SERVICE_SENDER_MAP.lock()
    }
}
impl sails_rs::meta::ServiceMeta for SomeService {
    type CommandsMeta = some_service_meta::CommandsMeta;
    type QueriesMeta = some_service_meta::QueriesMeta;
    type EventsMeta = some_service_meta::EventsMeta;
    const BASE_SERVICES: &'static [sails_rs::meta::AnyServiceMetaFn] = &[];
}
mod some_service_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __DoThisParams {}
    impl sails_rs::gstd::InvocationIo for __DoThisParams {
        const ROUTE: &'static [u8] = &[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8];
        type Params = Self;
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __ThisParams {}
    impl sails_rs::gstd::InvocationIo for __ThisParams {
        const ROUTE: &'static [u8] = &[16u8, 84u8, 104u8, 105u8, 115u8];
        type Params = Self;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {
        This(__ThisParams, bool),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = SomeEvents;
}

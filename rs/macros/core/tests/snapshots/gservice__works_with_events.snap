---
source: rs/macros/core/tests/gservice.rs
expression: result
---
impl SomeService {
    pub fn do_this(&mut self) -> u32 {
        42
    }
    pub fn this(&self) -> bool {
        true
    }
    fn notify_on(&mut self, event: SomeEvents) -> sails_rs::errors::Result<()> {
        #[cfg(not(target_arch = "wasm32"))]
        {
            let self_ptr = self as *const _ as usize;
            let event_listeners = sails_rs::gstd::events::event_listeners().lock();
            if let Some(event_listener_ptr) = event_listeners.get(&self_ptr) {
                let event_listener = unsafe {
                    &mut *(*event_listener_ptr as *mut Box<dyn FnMut(&SomeEvents)>)
                };
                core::mem::drop(event_listeners);
                event_listener(&event);
            }
        }
        sails_rs::gstd::events::__notify_on(event)
    }
}
pub struct SomeServiceExposure<T> {
    message_id: sails_rs::MessageId,
    route: &'static [u8],
    #[cfg(not(target_arch = "wasm32"))]
    inner: Box<T>,
    #[cfg(not(target_arch = "wasm32"))]
    inner_ptr: *const T,
    #[cfg(target_arch = "wasm32")]
    inner: T,
}
#[cfg(not(target_arch = "wasm32"))]
impl<T> Drop for SomeServiceExposure<T> {
    fn drop(&mut self) {
        let service_ptr = self.inner_ptr as usize;
        let mut event_listeners = sails_rs::gstd::events::event_listeners().lock();
        if event_listeners.remove(&service_ptr).is_some() {
            panic!("there should be no any event listeners left by this time");
        }
    }
}
impl SomeServiceExposure<SomeService> {
    pub fn do_this(&mut self) -> u32 {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.do_this()
    }
    pub fn this(&self) -> bool {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.this()
    }
    pub async fn try_handle(&mut self, input: &[u8]) -> Option<(Vec<u8>, u128)> {
        if input.starts_with(&[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8]) {
            let (output, value) = self.__do_this(&input[7usize..]).await;
            static INVOCATION_ROUTE: [u8; 7usize] = [
                24u8,
                68u8,
                111u8,
                84u8,
                104u8,
                105u8,
                115u8,
            ];
            return Some(([INVOCATION_ROUTE.as_ref(), &output].concat(), value));
        }
        if input.starts_with(&[16u8, 84u8, 104u8, 105u8, 115u8]) {
            let (output, value) = self.__this(&input[5usize..]).await;
            static INVOCATION_ROUTE: [u8; 5usize] = [16u8, 84u8, 104u8, 105u8, 115u8];
            return Some(([INVOCATION_ROUTE.as_ref(), &output].concat(), value));
        }
        None
    }
    async fn __do_this(&mut self, mut input: &[u8]) -> (Vec<u8>, u128) {
        let request: some_service_meta::__DoThisParams = sails_rs::Decode::decode(
                &mut input,
            )
            .expect("Failed to decode request");
        let result = self.do_this();
        let value = 0u128;
        return (sails_rs::Encode::encode(&result), value);
    }
    async fn __this(&self, mut input: &[u8]) -> (Vec<u8>, u128) {
        let request: some_service_meta::__ThisParams = sails_rs::Decode::decode(
                &mut input,
            )
            .expect("Failed to decode request");
        let result = self.this();
        let value = 0u128;
        return (sails_rs::Encode::encode(&result), value);
    }
    #[cfg(not(target_arch = "wasm32"))]
    pub fn set_event_listener<'__elg>(
        &self,
        listener: impl FnMut(&SomeEvents) + '__elg,
    ) -> sails_rs::gstd::events::EventListenerGuard<'__elg> {
        if core::mem::size_of_val(self.inner.as_ref()) == 0 {
            panic!(
                "setting event listener on a zero-sized service is not supported for now"
            );
        }
        let service_ptr = self.inner_ptr as usize;
        let listener: Box<dyn FnMut(&SomeEvents)> = Box::new(listener);
        let listener = Box::new(listener);
        let listener_ptr = Box::into_raw(listener) as usize;
        sails_rs::gstd::events::EventListenerGuard::new(service_ptr, listener_ptr)
    }
}
impl sails_rs::gstd::services::Exposure for SomeServiceExposure<SomeService> {
    fn message_id(&self) -> sails_rs::MessageId {
        self.message_id
    }
    fn route(&self) -> &'static [u8] {
        self.route
    }
}
impl sails_rs::gstd::services::Service for SomeService {
    type Exposure = SomeServiceExposure<SomeService>;
    fn expose(
        self,
        message_id: sails_rs::MessageId,
        route: &'static [u8],
    ) -> Self::Exposure {
        #[cfg(not(target_arch = "wasm32"))]
        let inner_box = Box::new(self);
        #[cfg(not(target_arch = "wasm32"))]
        let inner = inner_box.as_ref();
        #[cfg(target_arch = "wasm32")]
        let inner = &self;
        Self::Exposure {
            message_id,
            route,
            #[cfg(not(target_arch = "wasm32"))]
            inner_ptr: inner_box.as_ref() as *const Self,
            #[cfg(not(target_arch = "wasm32"))]
            inner: inner_box,
            #[cfg(target_arch = "wasm32")]
            inner: self,
        }
    }
}
impl sails_rs::meta::ServiceMeta for SomeService {
    type CommandsMeta = some_service_meta::CommandsMeta;
    type QueriesMeta = some_service_meta::QueriesMeta;
    type EventsMeta = some_service_meta::EventsMeta;
    const BASE_SERVICES: &'static [fn() -> sails_rs::meta::AnyServiceMeta] = &[];
}
mod some_service_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __DoThisParams {}
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __ThisParams {}
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {
        This(__ThisParams, bool),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = SomeEvents;
}

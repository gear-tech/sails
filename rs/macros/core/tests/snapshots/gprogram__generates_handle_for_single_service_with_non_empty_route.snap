---
source: rs/macros/core/tests/gprogram.rs
expression: result
---
impl MyProgram {
    fn __service(&self) -> MyService {
        MyService
    }
    pub fn default() -> Self {
        Self
    }
    pub fn service(&self) -> <MyService as sails_rs::gstd::services::Service>::Exposure {
        let service = self.__service();
        let exposure = <MyService as sails_rs::gstd::services::Service>::expose(
            service,
            sails_rs::gstd::msg::id().into(),
            __ROUTE_SERVICE.as_ref(),
        );
        exposure
    }
}
const __ROUTE_SERVICE: [u8; 8usize] = [
    28u8,
    83u8,
    101u8,
    114u8,
    118u8,
    105u8,
    99u8,
    101u8,
];
impl sails_rs::meta::ProgramMeta for MyProgram {
    type ConstructorsMeta = meta_in_program::ConstructorsMeta;
    const SERVICES: &'static [(&'static str, fn() -> sails_rs::meta::AnyServiceMeta)] = &[
        ("Service", sails_rs::meta::AnyServiceMeta::new::<MyService>),
    ];
}
mod meta_in_program {
    use super::*;
    #[derive(sails_rs::Decode, sails_rs::TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    #[allow(dead_code)]
    pub struct __DefaultParams {}
    #[derive(sails_rs::TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum ConstructorsMeta {
        Default(__DefaultParams),
    }
}
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rs::{gstd, hex, prelude::*};
    static mut PROGRAM: Option<MyProgram> = None;
    #[gstd::async_init]
    async fn init() {
        sails_rs::gstd::events::__enable_events();
        let mut input: &[u8] = &sails_rs::gstd::msg::load_bytes()
            .expect("Failed to read input");
        let (program, invocation_route) = if input
            .starts_with(&[28u8, 68u8, 101u8, 102u8, 97u8, 117u8, 108u8, 116u8])
        {
            const INVOCATION_ROUTE: &[u8] = &[
                28u8,
                68u8,
                101u8,
                102u8,
                97u8,
                117u8,
                108u8,
                116u8,
            ];
            let request = meta_in_program::__DefaultParams::decode(&mut &input[8usize..])
                .expect("Failed to decode request");
            let program = MyProgram::default();
            (program, INVOCATION_ROUTE)
        } else {
            sails_rs::gstd::unknown_input_panic("Unexpected ctor", input)
        };
        unsafe {
            PROGRAM = Some(program);
        }
        sails_rs::gstd::msg::reply_bytes(invocation_route, 0)
            .expect("Failed to send output");
    }
    #[gstd::async_main]
    async fn main() {
        let mut input: &[u8] = &sails_rs::gstd::msg::load_bytes()
            .expect("Failed to read input");
        let program_ref = unsafe { PROGRAM.as_ref() }.expect("Program not initialized");
        let (output, value): (Vec<u8>, ValueUnit) = if input
            .starts_with(&__ROUTE_SERVICE)
        {
            let mut service = program_ref.service();
            let (output, value) = service
                .try_handle(&input[__ROUTE_SERVICE.len()..])
                .await
                .unwrap_or_else(|| {
                    sails_rs::gstd::unknown_input_panic("Unknown request", input)
                });
            ([__ROUTE_SERVICE.as_ref(), &output].concat(), value)
        } else {
            sails_rs::gstd::unknown_input_panic("Unexpected service", input)
        };
        sails_rs::gstd::msg::reply_bytes(output, value).expect("Failed to send output");
    }
}

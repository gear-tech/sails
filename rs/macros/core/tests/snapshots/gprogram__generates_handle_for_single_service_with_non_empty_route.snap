---
source: rs/macros/core/tests/gprogram.rs
expression: result
---
impl MyProgram {
    fn __service(&self) -> MyService {
        MyService
    }
    pub fn create() -> Self {
        Self
    }
    pub fn service(&self) -> <MyService as sails_rs::gstd::services::Service>::Exposure {
        let service = self.__service();
        let exposure = <MyService as sails_rs::gstd::services::Service>::expose(
            service,
            sails_rs::gstd::Syscall::message_id(),
            __ROUTE_SERVICE.as_ref(),
        );
        exposure
    }
}
const __ROUTE_SERVICE: [u8; 8usize] = [
    28u8, 83u8, 101u8, 114u8, 118u8, 105u8, 99u8, 101u8,
];
impl sails_rs::meta::ProgramMeta for MyProgram {
    type ConstructorsMeta = meta_in_program::ConstructorsMeta;
    const SERVICES: &'static [(&'static str, sails_rs::meta::AnyServiceMetaFn)] = &[
        ("Service", sails_rs::meta::AnyServiceMeta::new::<MyService>),
    ];
}
mod meta_in_program {
    use super::*;
    #[derive(sails_rs::Decode, sails_rs::TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __CreateParams {}
    impl sails_rs::gstd::InvocationIo for __CreateParams {
        const ROUTE: &'static [u8] = &[24u8, 67u8, 114u8, 101u8, 97u8, 116u8, 101u8];
        type Params = Self;
    }
    #[derive(sails_rs::TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum ConstructorsMeta {
        Create(__CreateParams),
    }
}
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rs::{gstd, hex, prelude::*};
    static mut PROGRAM: Option<MyProgram> = None;
    #[gstd::async_init]
    async fn init() {
        use gstd::InvocationIo;
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        let (program, invocation_route) = if let Ok(request) = meta_in_program::__CreateParams::decode_params(
            input,
        ) {
            let program = MyProgram::create();
            (program, meta_in_program::__CreateParams::ROUTE)
        } else {
            gstd::unknown_input_panic("Unexpected ctor", input)
        };
        unsafe {
            PROGRAM = Some(program);
        }
        gstd::msg::reply_bytes(invocation_route, 0).expect("Failed to send output");
    }
    #[gstd::async_main]
    async fn main() {
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        let program_ref = unsafe { PROGRAM.as_mut() }.expect("Program not initialized");
        if input.starts_with(&__ROUTE_SERVICE) {
            let mut service = program_ref.service();
            service
                .try_handle(
                    &input[__ROUTE_SERVICE.len()..],
                    |encoded_result, value| {
                        gstd::msg::reply_bytes(encoded_result, value)
                            .expect("Failed to send output");
                    },
                )
                .await
                .unwrap_or_else(|| {
                    gstd::unknown_input_panic("Unknown request", input)
                });
        } else {
            gstd::unknown_input_panic("Unexpected service", input)
        };
    }
}

---
source: rs/macros/core/tests/gprogram.rs
expression: result
---
impl MyProgram {
    pub fn default() -> Self {
        Self
    }
}
impl sails_rs::meta::ProgramMeta for MyProgram {
    fn constructors() -> sails_rs::scale_info::MetaType {
        sails_rs::scale_info::MetaType::new::<meta_in_program::ConstructorsMeta>()
    }
    fn services() -> impl Iterator<
        Item = (&'static str, sails_rs::meta::AnyServiceMeta),
    > {
        [].into_iter()
    }
}
use sails_rs::Decode as __ProgramDecode;
use sails_rs::TypeInfo as __ProgramTypeInfo;
#[derive(__ProgramDecode, __ProgramTypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
#[allow(dead_code)]
struct __DefaultParams {}
mod meta_in_program {
    use super::*;
    #[derive(__ProgramTypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum ConstructorsMeta {
        Default(__DefaultParams),
    }
}
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rs::{gstd, hex, prelude::*};
    static mut PROGRAM: Option<MyProgram> = None;
    #[gstd::async_init]
    async fn init() {
        sails_rs::gstd::events::__enable_events();
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        let (program, invocation_route) = if input
            .starts_with(&[28u8, 68u8, 101u8, 102u8, 97u8, 117u8, 108u8, 116u8])
        {
            static INVOCATION_ROUTE: [u8; 8usize] = [
                28u8,
                68u8,
                101u8,
                102u8,
                97u8,
                117u8,
                108u8,
                116u8,
            ];
            let request = __DefaultParams::decode(&mut &input[8usize..])
                .expect("Failed to decode request");
            let program = MyProgram::default();
            (program, INVOCATION_ROUTE.as_ref())
        } else {
            let mut __input = input;
            let input = String::decode(&mut __input)
                .unwrap_or_else(|_| {
                    if input.len() <= 8 {
                        format!("0x{}", sails_rs::hex::encode(input))
                    } else {
                        format!(
                            "0x{}..{}", sails_rs::hex::encode(& input[..4]),
                            sails_rs::hex::encode(& input[input.len() - 4..])
                        )
                    }
                });
            panic!("Unexpected ctor: {}", input)
        };
        unsafe {
            PROGRAM = Some(program);
        }
        gstd::msg::reply_bytes(invocation_route, 0).expect("Failed to send output");
    }
    #[gstd::async_main(handle_reply = my_handle_reply, handle_signal = my_handle_signal)]
    async fn main() {
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        let output: Vec<u8> = {
            let mut __input = input;
            let input = String::decode(&mut __input)
                .unwrap_or_else(|_| {
                    if input.len() <= 8 {
                        format!("0x{}", sails_rs::hex::encode(input))
                    } else {
                        format!(
                            "0x{}..{}", sails_rs::hex::encode(& input[..4]),
                            sails_rs::hex::encode(& input[input.len() - 4..])
                        )
                    }
                });
            panic!("Unexpected service: {}", input)
        };
        gstd::msg::reply_bytes(output, 0).expect("Failed to send output");
    }
}

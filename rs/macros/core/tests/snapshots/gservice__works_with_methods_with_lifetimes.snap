---
source: rs/macros/core/tests/gservice.rs
expression: result
---
pub struct ReferenceServiceExposure<T> {
    route: &'static [u8],
    inner: T,
}
impl<T: sails_rs::meta::ServiceMeta> sails_rs::gstd::services::Exposure
for ReferenceServiceExposure<T> {
    fn route(&self) -> &'static [u8] {
        self.route
    }
    fn check_asyncness(input: &[u8]) -> Option<bool> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::{Service, Exposure};
        if !T::ASYNC {
            return Some(false);
        }
        if let Ok(is_async) = reference_service_meta::__AddByteParams::check_asyncness(
            input,
        ) {
            return Some(is_async);
        }
        if let Ok(is_async) = reference_service_meta::__BakedParams::check_asyncness(
            input,
        ) {
            return Some(is_async);
        }
        if let Ok(is_async) = reference_service_meta::__FirstByteParams::check_asyncness(
            input,
        ) {
            return Some(is_async);
        }
        if let Ok(is_async) = reference_service_meta::__IncrParams::check_asyncness(
            input,
        ) {
            return Some(is_async);
        }
        if let Ok(is_async) = reference_service_meta::__LastByteParams::check_asyncness(
            input,
        ) {
            return Some(is_async);
        }
        None
    }
}
impl<T> core::ops::Deref for ReferenceServiceExposure<T> {
    type Target = T;
    fn deref(&self) -> &Self::Target {
        &self.inner
    }
}
impl<T> core::ops::DerefMut for ReferenceServiceExposure<T> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.inner
    }
}
impl ReferenceServiceExposure<ReferenceService> {
    #[export]
    pub fn baked(&self) -> &'static str {
        "Static str!"
    }
    #[export]
    pub fn incr(&mut self) -> &'static ReferenceCount {
        unsafe {
            COUNTER.0 += 1;
            &*ptr::addr_of!(COUNTER)
        }
    }
    #[export]
    pub fn add_byte(&mut self, byte: u8) -> &'static [u8] {
        unsafe {
            BYTES.push(byte);
            &*ptr::addr_of!(BYTES)
        }
    }
    #[export]
    pub async fn first_byte<'a>(&self) -> Option<&'a u8> {
        unsafe { BYTES.first() }
    }
    #[export]
    pub async fn last_byte<'a>(&self) -> Option<&'a u8> {
        unsafe { BYTES.last() }
    }
    pub fn check_asyncness(&self, input: &[u8]) -> Option<bool> {
        <Self as sails_rs::gstd::services::Exposure>::check_asyncness(input)
    }
    pub fn try_handle(
        mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::{Service, Exposure};
        if let Ok(request) = reference_service_meta::__AddByteParams::decode_params(
            input,
        ) {
            let result = self.add_byte(request.byte);
            let value = 0u128;
            reference_service_meta::__AddByteParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        if let Ok(request) = reference_service_meta::__BakedParams::decode_params(
            input,
        ) {
            let result = self.baked();
            let value = 0u128;
            reference_service_meta::__BakedParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        if let Ok(request) = reference_service_meta::__IncrParams::decode_params(input) {
            let result = self.incr();
            let value = 0u128;
            reference_service_meta::__IncrParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        None
    }
    pub async fn try_handle_async(
        mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::{Service, Exposure};
        if let Ok(request) = reference_service_meta::__FirstByteParams::decode_params(
            input,
        ) {
            let result = self.first_byte().await;
            let value = 0u128;
            reference_service_meta::__FirstByteParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        if let Ok(request) = reference_service_meta::__LastByteParams::decode_params(
            input,
        ) {
            let result = self.last_byte().await;
            let value = 0u128;
            reference_service_meta::__LastByteParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        None
    }
}
impl sails_rs::gstd::services::Service for ReferenceService {
    type Exposure = ReferenceServiceExposure<Self>;
    fn expose(self, route: &'static [u8]) -> Self::Exposure {
        Self::Exposure {
            route,
            inner: self,
        }
    }
}
impl sails_rs::meta::ServiceMeta for ReferenceService {
    type CommandsMeta = reference_service_meta::CommandsMeta;
    type QueriesMeta = reference_service_meta::QueriesMeta;
    type EventsMeta = reference_service_meta::EventsMeta;
    const BASE_SERVICES: &'static [sails_rs::meta::AnyServiceMetaFn] = &[];
    const ASYNC: bool = true;
}
mod reference_service_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    use sails_rs::gstd::InvocationIo;
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __AddByteParams {
        pub(super) byte: u8,
    }
    impl InvocationIo for __AddByteParams {
        const ROUTE: &'static [u8] = &[
            28u8, 65u8, 100u8, 100u8, 66u8, 121u8, 116u8, 101u8,
        ];
        type Params = Self;
        const ASYNC: bool = false;
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __BakedParams {}
    impl InvocationIo for __BakedParams {
        const ROUTE: &'static [u8] = &[20u8, 66u8, 97u8, 107u8, 101u8, 100u8];
        type Params = Self;
        const ASYNC: bool = false;
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __FirstByteParams {}
    impl InvocationIo for __FirstByteParams {
        const ROUTE: &'static [u8] = &[
            36u8, 70u8, 105u8, 114u8, 115u8, 116u8, 66u8, 121u8, 116u8, 101u8,
        ];
        type Params = Self;
        const ASYNC: bool = true;
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __IncrParams {}
    impl InvocationIo for __IncrParams {
        const ROUTE: &'static [u8] = &[16u8, 73u8, 110u8, 99u8, 114u8];
        type Params = Self;
        const ASYNC: bool = false;
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __LastByteParams {}
    impl InvocationIo for __LastByteParams {
        const ROUTE: &'static [u8] = &[
            32u8, 76u8, 97u8, 115u8, 116u8, 66u8, 121u8, 116u8, 101u8,
        ];
        type Params = Self;
        const ASYNC: bool = true;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {
        AddByte(__AddByteParams, &'static [u8]),
        Incr(__IncrParams, &'static ReferenceCount),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {
        Baked(__BakedParams, &'static str),
        FirstByte(__FirstByteParams, Option<&'static u8>),
        LastByte(__LastByteParams, Option<&'static u8>),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = NoEvents;
}

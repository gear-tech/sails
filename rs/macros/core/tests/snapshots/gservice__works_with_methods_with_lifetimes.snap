---
source: rs/macros/core/tests/gservice.rs
expression: result
---
impl ReferenceService {
    pub fn baked(&self) -> &'static str {
        "Static str!"
    }
    pub fn incr(&mut self) -> &'static ReferenceCount {
        unsafe {
            COUNTER.0 += 1;
            &*ptr::addr_of!(COUNTER)
        }
    }
    pub fn add_byte(&mut self, byte: u8) -> &'static [u8] {
        unsafe {
            BYTES.push(byte);
            &*ptr::addr_of!(BYTES)
        }
    }
    pub async fn first_byte<'a>(&self) -> Option<&'a u8> {
        unsafe { BYTES.first() }
    }
    pub async fn last_byte<'a>(&self) -> Option<&'a u8> {
        unsafe { BYTES.last() }
    }
}
pub struct Exposure<T> {
    message_id: sails_rs::MessageId,
    route: &'static [u8],
    #[cfg(not(target_arch = "wasm32"))]
    inner: Box<T>,
    #[cfg(not(target_arch = "wasm32"))]
    inner_ptr: *const T,
    #[cfg(target_arch = "wasm32")]
    inner: T,
}
impl Exposure<ReferenceService> {
    pub fn add_byte(&mut self, byte: u8) -> &'static [u8] {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.add_byte(byte)
    }
    pub fn baked(&self) -> &'static str {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.baked()
    }
    pub async fn first_byte<'a>(&self) -> Option<&'a u8> {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.first_byte().await
    }
    pub fn incr(&mut self) -> &'static ReferenceCount {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.incr()
    }
    pub async fn last_byte<'a>(&self) -> Option<&'a u8> {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.last_byte().await
    }
    pub async fn handle(&mut self, input: &[u8]) -> Vec<u8> {
        self.try_handle(input)
            .await
            .unwrap_or_else(|| {
                {
                    let mut __input = input;
                    let input = String::decode(&mut __input)
                        .unwrap_or_else(|_| {
                            if input.len() <= 8 {
                                format!("0x{}", sails_rs::hex::encode(input))
                            } else {
                                format!(
                                    "0x{}..{}", sails_rs::hex::encode(& input[..4]),
                                    sails_rs::hex::encode(& input[input.len() - 4..])
                                )
                            }
                        });
                    panic!("Unknown request: {}", input)
                }
            })
    }
    pub async fn try_handle(&mut self, input: &[u8]) -> Option<Vec<u8>> {
        if input.starts_with(&[28u8, 65u8, 100u8, 100u8, 66u8, 121u8, 116u8, 101u8]) {
            let output = self.__add_byte(&input[8usize..]).await;
            static INVOCATION_ROUTE: [u8; 8usize] = [
                28u8,
                65u8,
                100u8,
                100u8,
                66u8,
                121u8,
                116u8,
                101u8,
            ];
            return Some([INVOCATION_ROUTE.as_ref(), &output].concat());
        }
        if input.starts_with(&[20u8, 66u8, 97u8, 107u8, 101u8, 100u8]) {
            let output = self.__baked(&input[6usize..]).await;
            static INVOCATION_ROUTE: [u8; 6usize] = [
                20u8,
                66u8,
                97u8,
                107u8,
                101u8,
                100u8,
            ];
            return Some([INVOCATION_ROUTE.as_ref(), &output].concat());
        }
        if input
            .starts_with(
                &[36u8, 70u8, 105u8, 114u8, 115u8, 116u8, 66u8, 121u8, 116u8, 101u8],
            )
        {
            let output = self.__first_byte(&input[10usize..]).await;
            static INVOCATION_ROUTE: [u8; 10usize] = [
                36u8,
                70u8,
                105u8,
                114u8,
                115u8,
                116u8,
                66u8,
                121u8,
                116u8,
                101u8,
            ];
            return Some([INVOCATION_ROUTE.as_ref(), &output].concat());
        }
        if input.starts_with(&[16u8, 73u8, 110u8, 99u8, 114u8]) {
            let output = self.__incr(&input[5usize..]).await;
            static INVOCATION_ROUTE: [u8; 5usize] = [16u8, 73u8, 110u8, 99u8, 114u8];
            return Some([INVOCATION_ROUTE.as_ref(), &output].concat());
        }
        if input
            .starts_with(&[32u8, 76u8, 97u8, 115u8, 116u8, 66u8, 121u8, 116u8, 101u8])
        {
            let output = self.__last_byte(&input[9usize..]).await;
            static INVOCATION_ROUTE: [u8; 9usize] = [
                32u8,
                76u8,
                97u8,
                115u8,
                116u8,
                66u8,
                121u8,
                116u8,
                101u8,
            ];
            return Some([INVOCATION_ROUTE.as_ref(), &output].concat());
        }
        None
    }
    async fn __add_byte(&mut self, mut input: &[u8]) -> Vec<u8> {
        let request = __AddByteParams::decode(&mut input)
            .expect("Failed to decode request");
        let result = self.add_byte(request.byte);
        return result.encode();
    }
    async fn __baked(&self, mut input: &[u8]) -> Vec<u8> {
        let request = __BakedParams::decode(&mut input)
            .expect("Failed to decode request");
        let result = self.baked();
        return result.encode();
    }
    async fn __first_byte(&self, mut input: &[u8]) -> Vec<u8> {
        let request = __FirstByteParams::decode(&mut input)
            .expect("Failed to decode request");
        let result = self.first_byte().await;
        return result.encode();
    }
    async fn __incr(&mut self, mut input: &[u8]) -> Vec<u8> {
        let request = __IncrParams::decode(&mut input)
            .expect("Failed to decode request");
        let result = self.incr();
        return result.encode();
    }
    async fn __last_byte(&self, mut input: &[u8]) -> Vec<u8> {
        let request = __LastByteParams::decode(&mut input)
            .expect("Failed to decode request");
        let result = self.last_byte().await;
        return result.encode();
    }
}
impl sails_rs::gstd::services::Exposure for Exposure<ReferenceService> {
    fn message_id(&self) -> sails_rs::MessageId {
        self.message_id
    }
    fn route(&self) -> &'static [u8] {
        self.route
    }
}
impl sails_rs::gstd::services::Service for ReferenceService {
    type Exposure = Exposure<ReferenceService>;
    fn expose(
        self,
        message_id: sails_rs::MessageId,
        route: &'static [u8],
    ) -> Self::Exposure {
        #[cfg(not(target_arch = "wasm32"))]
        let inner_box = Box::new(self);
        #[cfg(not(target_arch = "wasm32"))]
        let inner = inner_box.as_ref();
        #[cfg(target_arch = "wasm32")]
        let inner = &self;
        Self::Exposure {
            message_id,
            route,
            #[cfg(not(target_arch = "wasm32"))]
            inner_ptr: inner_box.as_ref() as *const Self,
            #[cfg(not(target_arch = "wasm32"))]
            inner: inner_box,
            #[cfg(target_arch = "wasm32")]
            inner: self,
        }
    }
}
impl sails_rs::meta::ServiceMeta for ReferenceService {
    fn commands() -> sails_rs::scale_info::MetaType {
        sails_rs::scale_info::MetaType::new::<meta_in_service::CommandsMeta>()
    }
    fn queries() -> sails_rs::scale_info::MetaType {
        sails_rs::scale_info::MetaType::new::<meta_in_service::QueriesMeta>()
    }
    fn events() -> sails_rs::scale_info::MetaType {
        sails_rs::scale_info::MetaType::new::<meta_in_service::EventsMeta>()
    }
    fn base_services() -> impl Iterator<Item = sails_rs::meta::AnyServiceMeta> {
        [].into_iter()
    }
}
use sails_rs::Decode as __ServiceDecode;
use sails_rs::Encode as __ServiceEncode;
use sails_rs::TypeInfo as __ServiceTypeInfo;
#[derive(__ServiceDecode, __ServiceTypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct __AddByteParams {
    byte: u8,
}
#[derive(__ServiceDecode, __ServiceTypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct __BakedParams {}
#[derive(__ServiceDecode, __ServiceTypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct __FirstByteParams {}
#[derive(__ServiceDecode, __ServiceTypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct __IncrParams {}
#[derive(__ServiceDecode, __ServiceTypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct __LastByteParams {}
mod meta_in_service {
    use super::*;
    #[derive(__ServiceTypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {
        AddByte(__AddByteParams, &'static [u8]),
        Incr(__IncrParams, &'static ReferenceCount),
    }
    #[derive(__ServiceTypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {
        Baked(__BakedParams, &'static str),
        FirstByte(__FirstByteParams, Option<&'static u8>),
        LastByte(__LastByteParams, Option<&'static u8>),
    }
    #[derive(__ServiceTypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = NoEvents;
}

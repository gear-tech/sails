---
source: rs/macros/core/tests/gservice.rs
expression: result
---
impl<'a> ExtendedLifetime<'a> {
    pub fn extended_name(&self) -> String {
        "extended-name".to_string()
    }
    pub fn name(&self) -> String {
        "extended".to_string()
    }
}
pub struct ExtendedLifetimeExposure<T: sails_rs::gstd::services::Service> {
    message_id: sails_rs::MessageId,
    route: &'static [u8],
    #[cfg(not(target_arch = "wasm32"))]
    inner: sails_rs::Box<T>,
    #[cfg(not(target_arch = "wasm32"))]
    inner_ptr: *const T,
    #[cfg(target_arch = "wasm32")]
    inner: T,
    base: T::BaseExposures,
}
impl<T: sails_rs::gstd::services::Service> sails_rs::gstd::services::Exposure
for ExtendedLifetimeExposure<T> {
    fn message_id(&self) -> sails_rs::MessageId {
        self.message_id
    }
    fn route(&self) -> &'static [u8] {
        self.route
    }
}
impl<'a> ExtendedLifetimeExposure<ExtendedLifetime<'a>> {
    pub fn extended_name(&self) -> String {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.extended_name()
    }
    pub fn name(&self) -> String {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.name()
    }
    pub fn as_base_0(
        &self,
    ) -> &<base::BaseLifetime<'a> as sails_rs::gstd::services::Service>::Exposure {
        &self.base.0
    }
    pub fn try_handle(
        &mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::Exposure;
        if let Ok(request) = extended_lifetime_meta::__ExtendedNameParams::decode_params(
            input,
        ) {
            let result = self.extended_name();
            let value = 0u128;
            extended_lifetime_meta::__ExtendedNameParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        if let Ok(request) = extended_lifetime_meta::__NameParams::decode_params(input) {
            let result = self.name();
            let value = 0u128;
            extended_lifetime_meta::__NameParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        if self.base.0.try_handle(input, result_handler).is_some() {
            return Some(());
        }
        None
    }
    pub async fn try_handle_async(
        &mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::Exposure;
        if self.base.0.try_handle_async(input, result_handler).await.is_some() {
            return Some(());
        }
        None
    }
    pub fn check_asyncness(&self, input: &[u8]) -> Option<bool> {
        use sails_rs::gstd::InvocationIo;
        if extended_lifetime_meta::__ExtendedNameParams::check_route(input).is_ok() {
            return Some(extended_lifetime_meta::__ExtendedNameParams::ASYNC);
        }
        if extended_lifetime_meta::__NameParams::check_route(input).is_ok() {
            return Some(extended_lifetime_meta::__NameParams::ASYNC);
        }
        if let Some(is_async) = self.base.0.check_asyncness(input) {
            return Some(is_async);
        }
        None
    }
}
impl<'a> sails_rs::gstd::services::Service for ExtendedLifetime<'a> {
    type Exposure = ExtendedLifetimeExposure<Self>;
    type BaseExposures = (
        <base::BaseLifetime<'a> as sails_rs::gstd::services::Service>::Exposure,
    );
    fn expose(
        self,
        message_id: sails_rs::MessageId,
        route: &'static [u8],
    ) -> Self::Exposure {
        #[cfg(not(target_arch = "wasm32"))]
        let inner_box = sails_rs::Box::new(self);
        #[cfg(not(target_arch = "wasm32"))]
        let inner = inner_box.as_ref();
        #[cfg(target_arch = "wasm32")]
        let inner = &self;
        Self::Exposure {
            message_id,
            route,
            base: (
                <base::BaseLifetime as Clone>::clone(
                        AsRef::<base::BaseLifetime>::as_ref(inner),
                    )
                    .expose(message_id, route),
            ),
            #[cfg(not(target_arch = "wasm32"))]
            inner_ptr: inner_box.as_ref() as *const Self,
            #[cfg(not(target_arch = "wasm32"))]
            inner: inner_box,
            #[cfg(target_arch = "wasm32")]
            inner: self,
        }
    }
}
impl<'a> sails_rs::meta::ServiceMeta for ExtendedLifetime<'a> {
    type CommandsMeta = extended_lifetime_meta::CommandsMeta;
    type QueriesMeta = extended_lifetime_meta::QueriesMeta;
    type EventsMeta = extended_lifetime_meta::EventsMeta;
    const BASE_SERVICES: &'static [sails_rs::meta::AnyServiceMetaFn] = &[
        sails_rs::meta::AnyServiceMeta::new::<base::BaseLifetime>,
    ];
    const ASYNC: bool = extended_lifetime_meta::CommandsMeta::ASYNC
        || extended_lifetime_meta::QueriesMeta::ASYNC
        || <base::BaseLifetime as sails_rs::meta::ServiceMeta>::ASYNC;
}
mod extended_lifetime_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    use sails_rs::gstd::InvocationIo;
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __ExtendedNameParams {}
    impl InvocationIo for __ExtendedNameParams {
        const ROUTE: &'static [u8] = &[
            48u8, 69u8, 120u8, 116u8, 101u8, 110u8, 100u8, 101u8, 100u8, 78u8, 97u8,
            109u8, 101u8,
        ];
        type Params = Self;
        const ASYNC: bool = false;
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __NameParams {}
    impl InvocationIo for __NameParams {
        const ROUTE: &'static [u8] = &[16u8, 78u8, 97u8, 109u8, 101u8];
        type Params = Self;
        const ASYNC: bool = false;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {}
    impl CommandsMeta {
        pub const ASYNC: bool = false;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {
        ExtendedName(__ExtendedNameParams, String),
        Name(__NameParams, String),
    }
    impl QueriesMeta {
        pub const ASYNC: bool = __ExtendedNameParams::ASYNC || __NameParams::ASYNC;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = NoEvents;
}

---
source: rs/macros/core/tests/gservice.rs
expression: result
---
impl<'a> ExtendedLifetime<'a> {
    pub fn extended_name(&self) -> String {
        "extended-name".to_string()
    }
    pub fn name(&self) -> String {
        "extended".to_string()
    }
}
pub struct ExtendedLifetimeExposure<'a, T> {
    message_id: sails_rs::MessageId,
    route: &'static [u8],
    #[cfg(not(target_arch = "wasm32"))]
    inner: Box<T>,
    #[cfg(not(target_arch = "wasm32"))]
    inner_ptr: *const T,
    #[cfg(target_arch = "wasm32")]
    inner: T,
    base_0: <base::BaseLifetime<'a> as sails_rs::gstd::services::Service>::Exposure,
}
impl<'a> ExtendedLifetimeExposure<'a, ExtendedLifetime<'a>> {
    pub fn extended_name(&self) -> String {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.extended_name()
    }
    pub fn name(&self) -> String {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.name()
    }
    pub fn as_base_0(
        &self,
    ) -> &<base::BaseLifetime<'a> as sails_rs::gstd::services::Service>::Exposure {
        &self.base_0
    }
    pub async fn try_handle(&mut self, input: &[u8]) -> Option<(Vec<u8>, u128)> {
        if input
            .starts_with(
                &[
                    48u8,
                    69u8,
                    120u8,
                    116u8,
                    101u8,
                    110u8,
                    100u8,
                    101u8,
                    100u8,
                    78u8,
                    97u8,
                    109u8,
                    101u8,
                ],
            )
        {
            let (output, value) = self.__extended_name(&input[13usize..]).await;
            static INVOCATION_ROUTE: [u8; 13usize] = [
                48u8,
                69u8,
                120u8,
                116u8,
                101u8,
                110u8,
                100u8,
                101u8,
                100u8,
                78u8,
                97u8,
                109u8,
                101u8,
            ];
            return Some(([INVOCATION_ROUTE.as_ref(), &output].concat(), value));
        }
        if input.starts_with(&[16u8, 78u8, 97u8, 109u8, 101u8]) {
            let (output, value) = self.__name(&input[5usize..]).await;
            static INVOCATION_ROUTE: [u8; 5usize] = [16u8, 78u8, 97u8, 109u8, 101u8];
            return Some(([INVOCATION_ROUTE.as_ref(), &output].concat(), value));
        }
        if let Some((output, value)) = self.base_0.try_handle(input).await {
            return Some((output, value));
        }
        None
    }
    async fn __extended_name(&self, mut input: &[u8]) -> (Vec<u8>, u128) {
        let request: extended_lifetime_meta::__ExtendedNameParams = sails_rs::Decode::decode(
                &mut input,
            )
            .expect("Failed to decode request");
        let result = self.extended_name();
        let value = 0u128;
        return (sails_rs::Encode::encode(&result), value);
    }
    async fn __name(&self, mut input: &[u8]) -> (Vec<u8>, u128) {
        let request: extended_lifetime_meta::__NameParams = sails_rs::Decode::decode(
                &mut input,
            )
            .expect("Failed to decode request");
        let result = self.name();
        let value = 0u128;
        return (sails_rs::Encode::encode(&result), value);
    }
}
impl<'a> sails_rs::gstd::services::Exposure
for ExtendedLifetimeExposure<'a, ExtendedLifetime<'a>> {
    fn message_id(&self) -> sails_rs::MessageId {
        self.message_id
    }
    fn route(&self) -> &'static [u8] {
        self.route
    }
}
impl<'a> sails_rs::gstd::services::Service for ExtendedLifetime<'a> {
    type Exposure = ExtendedLifetimeExposure<'a, ExtendedLifetime<'a>>;
    fn expose(
        self,
        message_id: sails_rs::MessageId,
        route: &'static [u8],
    ) -> Self::Exposure {
        #[cfg(not(target_arch = "wasm32"))]
        let inner_box = Box::new(self);
        #[cfg(not(target_arch = "wasm32"))]
        let inner = inner_box.as_ref();
        #[cfg(target_arch = "wasm32")]
        let inner = &self;
        Self::Exposure {
            message_id,
            route,
            base_0: <base::BaseLifetime<
                'a,
            > as Clone>::clone(AsRef::<base::BaseLifetime<'a>>::as_ref(inner))
                .expose(message_id, route),
            #[cfg(not(target_arch = "wasm32"))]
            inner_ptr: inner_box.as_ref() as *const Self,
            #[cfg(not(target_arch = "wasm32"))]
            inner: inner_box,
            #[cfg(target_arch = "wasm32")]
            inner: self,
        }
    }
}
impl<'a> sails_rs::meta::ServiceMeta for ExtendedLifetime<'a> {
    type CommandsMeta = extended_lifetime_meta::CommandsMeta;
    type QueriesMeta = extended_lifetime_meta::QueriesMeta;
    type EventsMeta = extended_lifetime_meta::EventsMeta;
    const BASE_SERVICES: &'static [fn() -> sails_rs::meta::AnyServiceMeta] = &[
        sails_rs::meta::AnyServiceMeta::new::<base::BaseLifetime<'a>>,
    ];
}
mod extended_lifetime_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __ExtendedNameParams {}
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __NameParams {}
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {}
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {
        ExtendedName(__ExtendedNameParams, String),
        Name(__NameParams, String),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = NoEvents;
}

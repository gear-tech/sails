---
source: rs/macros/core/tests/gservice.rs
expression: result
---
impl SomeService {
    pub async fn do_this(&mut self, p1: u32, p2: String) -> CommandReply<u32> {
        (p1, 100_000_000_000).into()
    }
    pub fn this(&self, p1: bool) -> bool {
        p1
    }
}
pub trait SomeServiceImplTrait {
    async fn do_this(&mut self, p1: u32, p2: String) -> CommandReply<u32>;
    fn this(&self, p1: bool) -> bool;
}
impl SomeServiceImplTrait
for sails_rs::gstd::services::ServiceExposure<SomeService, ()> {
    async fn do_this(&mut self, p1: u32, p2: String) -> CommandReply<u32> {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new2(self);
        self.inner.do_this(p1, p2).await
    }
    fn this(&self, p1: bool) -> bool {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new2(self);
        self.inner.this(p1)
    }
}
impl sails_rs::gstd::services::ServiceHandle for SomeService {
    async fn try_handle(&mut self, input: &[u8]) -> Option<(Vec<u8>, u128)> {
        let mut __input = input;
        let route: String = sails_rs::Decode::decode(&mut __input).ok()?;
        match route.as_str() {
            "DoThis" => {
                let request: some_service_meta::__DoThisParams = sails_rs::Decode::decode(
                        &mut __input,
                    )
                    .expect("Failed to decode request");
                let command_reply: CommandReply<u32> = self
                    .do_this(request.p1, request.p2)
                    .await
                    .into();
                let (result, value) = command_reply.to_tuple();
                Some((sails_rs::Encode::encode(&("DoThis", &result)), value))
            }
            "This" => {
                let request: some_service_meta::__ThisParams = sails_rs::Decode::decode(
                        &mut __input,
                    )
                    .expect("Failed to decode request");
                let result = self.this(request.p1);
                let value = 0u128;
                Some((sails_rs::Encode::encode(&("This", &result)), value))
            }
            _ => None,
        }
    }
}
impl sails_rs::gstd::services::Service for SomeService {
    type Exposure = sails_rs::gstd::services::ServiceExposure<SomeService, ()>;
    type Extend = ();
    fn expose(
        self,
        message_id: sails_rs::MessageId,
        route: &'static [u8],
    ) -> Self::Exposure {
        let extend = ();
        Self::Exposure::new(message_id, route, self, extend)
    }
}
impl sails_rs::meta::ServiceMeta for SomeService {
    fn commands() -> sails_rs::scale_info::MetaType {
        sails_rs::scale_info::MetaType::new::<some_service_meta::CommandsMeta>()
    }
    fn queries() -> sails_rs::scale_info::MetaType {
        sails_rs::scale_info::MetaType::new::<some_service_meta::QueriesMeta>()
    }
    fn events() -> sails_rs::scale_info::MetaType {
        sails_rs::scale_info::MetaType::new::<some_service_meta::EventsMeta>()
    }
    fn base_services() -> impl Iterator<Item = sails_rs::meta::AnyServiceMeta> {
        [].into_iter()
    }
}
mod some_service_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __DoThisParams {
        pub(super) p1: u32,
        pub(super) p2: String,
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __ThisParams {
        pub(super) p1: bool,
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {
        This(__ThisParams, bool),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = NoEvents;
}

---
source: rs/macros/core/tests/gprogram.rs
expression: result
---
impl MyProgram {
    pub fn default() -> Self {
        Self
    }
}
impl sails_rename::meta::ProgramMeta for MyProgram {
    type ConstructorsMeta = meta_in_program::ConstructorsMeta;
    const SERVICES: &'static [(
        &'static str,
        fn() -> sails_rename::meta::AnyServiceMeta,
    )] = &[];
}
#[derive(sails_rename::Decode, sails_rename::TypeInfo)]
#[codec(crate = sails_rename::scale_codec)]
#[scale_info(crate = sails_rename::scale_info)]
#[allow(dead_code)]
struct __DefaultParams {}
mod meta_in_program {
    use super::*;
    #[derive(sails_rename::TypeInfo)]
    #[scale_info(crate = sails_rename::scale_info)]
    pub enum ConstructorsMeta {
        Default(__DefaultParams),
    }
}
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rename::{gstd, hex, prelude::*};
    static mut PROGRAM: Option<MyProgram> = None;
    #[gstd::async_init]
    async fn init() {
        sails_rename::gstd::events::__enable_events();
        let mut input: &[u8] = &sails_rename::gstd::msg::load_bytes()
            .expect("Failed to read input");
        let (program, invocation_route) = if input
            .starts_with(&[28u8, 68u8, 101u8, 102u8, 97u8, 117u8, 108u8, 116u8])
        {
            static INVOCATION_ROUTE: [u8; 8usize] = [
                28u8,
                68u8,
                101u8,
                102u8,
                97u8,
                117u8,
                108u8,
                116u8,
            ];
            let request = __DefaultParams::decode(&mut &input[8usize..])
                .expect("Failed to decode request");
            let program = MyProgram::default();
            (program, INVOCATION_ROUTE.as_ref())
        } else {
            sails_rename::gstd::unknown_input_panic("Unexpected ctor", input)
        };
        unsafe {
            PROGRAM = Some(program);
        }
        sails_rename::gstd::msg::reply_bytes(invocation_route, 0)
            .expect("Failed to send output");
    }
    #[gstd::async_main]
    async fn main() {
        let mut input: &[u8] = &sails_rename::gstd::msg::load_bytes()
            .expect("Failed to read input");
        let program_ref = unsafe { PROGRAM.as_ref() }.expect("Program not initialized");
        let (output, value): (Vec<u8>, ValueUnit) = {
            sails_rename::gstd::unknown_input_panic("Unexpected service", input)
        };
        sails_rename::gstd::msg::reply_bytes(output, value)
            .expect("Failed to send output");
    }
}

---
source: rs/macros/core/tests/gservice.rs
expression: result
---
impl<T> MyGenericEventsService<'_, '_, T>
where
    T: Clone,
{
    pub fn do_this(&mut self) -> u32 {
        42
    }
}
pub struct MyGenericEventsServiceExposure<T: sails_rs::gstd::services::Service> {
    message_id: sails_rs::MessageId,
    route: &'static [u8],
    inner: T,
    base: T::BaseExposures,
}
impl<T: sails_rs::gstd::services::Service> sails_rs::gstd::services::Exposure
for MyGenericEventsServiceExposure<T> {
    fn message_id(&self) -> sails_rs::MessageId {
        self.message_id
    }
    fn route(&self) -> &'static [u8] {
        self.route
    }
}
impl<T> MyGenericEventsServiceExposure<MyGenericEventsService<'_, '_, T>>
where
    T: Clone,
{
    pub fn do_this(&mut self) -> u32 {
        use sails_rs::gstd::services::Exposure;
        let exposure_scope = self.scope();
        self.inner.do_this()
    }
    pub fn try_handle(
        &mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::Exposure;
        if let Ok(request) = my_generic_events_service_meta::__DoThisParams::decode_params(
            input,
        ) {
            let result = self.do_this();
            let value = 0u128;
            my_generic_events_service_meta::__DoThisParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        None
    }
    pub async fn try_handle_async(
        &mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::Exposure;
        None
    }
    pub fn check_asyncness(&self, input: &[u8]) -> Option<bool> {
        use sails_rs::gstd::InvocationIo;
        if !<MyGenericEventsService<'_, '_, T> as sails_rs::meta::ServiceMeta>::ASYNC {
            return Some(false);
        }
        if let Ok(is_async) = my_generic_events_service_meta::__DoThisParams::check_asyncness(
            input,
        ) {
            return Some(is_async);
        }
        None
    }
}
impl<T> sails_rs::gstd::services::Service for MyGenericEventsService<'_, '_, T>
where
    T: Clone,
{
    type Exposure = MyGenericEventsServiceExposure<Self>;
    type BaseExposures = ();
    fn expose(
        self,
        message_id: sails_rs::MessageId,
        route: &'static [u8],
    ) -> Self::Exposure {
        let inner = &self;
        Self::Exposure {
            message_id,
            route,
            base: (),
            inner: self,
        }
    }
}
impl<T> sails_rs::meta::ServiceMeta for MyGenericEventsService<'_, '_, T>
where
    T: Clone,
{
    type CommandsMeta = my_generic_events_service_meta::CommandsMeta;
    type QueriesMeta = my_generic_events_service_meta::QueriesMeta;
    type EventsMeta = my_generic_events_service_meta::EventsMeta;
    const BASE_SERVICES: &'static [sails_rs::meta::AnyServiceMetaFn] = &[];
    const ASYNC: bool = false;
}
mod my_generic_events_service_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    use sails_rs::gstd::InvocationIo;
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __DoThisParams {}
    impl InvocationIo for __DoThisParams {
        const ROUTE: &'static [u8] = &[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8];
        type Params = Self;
        const ASYNC: bool = false;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {}
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = MyEvents;
}
impl<T> MyGenericEventsService<'_, '_, T>
where
    T: Clone,
{
    fn emit_event(&self, event: MyEvents) -> sails_rs::errors::Result<()> {
        use sails_rs::gstd::ServiceWithEvents;
        Self::emitter().emit_event(event)
    }
}
impl<T> sails_rs::gstd::ServiceWithEvents for MyGenericEventsService<'_, '_, T>
where
    T: Clone,
{
    type Events = MyEvents;
}
impl<T: sails_rs::gstd::ServiceWithEvents> sails_rs::gstd::ExposureWithEvents
for MyGenericEventsServiceExposure<T> {
    type Events = MyEvents;
}

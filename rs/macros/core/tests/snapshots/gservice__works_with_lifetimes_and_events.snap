---
source: rs/macros/core/tests/gservice.rs
expression: result
---
pub struct MyGenericEventsServiceExposure<T> {
    route: &'static [u8],
    inner: T,
}
impl<T: sails_rs::meta::ServiceMeta> sails_rs::gstd::services::Exposure
for MyGenericEventsServiceExposure<T> {
    fn route(&self) -> &'static [u8] {
        self.route
    }
    fn check_asyncness(input: &[u8]) -> Option<bool> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::{Service, Exposure};
        if !T::ASYNC {
            return Some(false);
        }
        if let Ok(is_async) = my_generic_events_service_meta::__DoThisParams::check_asyncness(
            input,
        ) {
            return Some(is_async);
        }
        None
    }
}
impl<T: sails_rs::meta::ServiceMeta> sails_rs::gstd::services::ExposureWithEvents
for MyGenericEventsServiceExposure<T> {
    type Events = MyEvents;
}
impl<T> core::ops::Deref for MyGenericEventsServiceExposure<T> {
    type Target = T;
    fn deref(&self) -> &Self::Target {
        &self.inner
    }
}
impl<T> core::ops::DerefMut for MyGenericEventsServiceExposure<T> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.inner
    }
}
impl<'a, T> MyGenericEventsServiceExposure<MyGenericEventsService<'a, T>>
where
    T: Clone,
{
    #[export]
    pub fn do_this(&mut self) -> u32 {
        42
    }
    pub fn check_asyncness(&self, input: &[u8]) -> Option<bool> {
        <Self as sails_rs::gstd::services::Exposure>::check_asyncness(input)
    }
    pub fn try_handle(
        mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::{Service, Exposure};
        if let Ok(request) = my_generic_events_service_meta::__DoThisParams::decode_params(
            input,
        ) {
            let result = self.do_this();
            let value = 0u128;
            if !my_generic_events_service_meta::__DoThisParams::is_empty_tuple::<u32>() {
                my_generic_events_service_meta::__DoThisParams::with_optimized_encode(
                    &result,
                    self.route().as_ref(),
                    |encoded_result| result_handler(encoded_result, value),
                );
            }
            return Some(());
        }
        None
    }
    pub async fn try_handle_async(
        mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::{Service, Exposure};
        None
    }
    pub fn emit_event(&self, event: MyEvents) -> sails_rs::errors::Result<()> {
        use sails_rs::gstd::services::ExposureWithEvents;
        self.emitter().emit_event(event)
    }
}
impl<'a, T> sails_rs::gstd::services::Service for MyGenericEventsService<'a, T>
where
    T: Clone,
{
    type Exposure = MyGenericEventsServiceExposure<Self>;
    fn expose(self, route: &'static [u8]) -> Self::Exposure {
        Self::Exposure {
            route,
            inner: self,
        }
    }
}
impl<'a, T> sails_rs::meta::ServiceMeta for MyGenericEventsService<'a, T>
where
    T: Clone,
{
    type CommandsMeta = my_generic_events_service_meta::CommandsMeta;
    type QueriesMeta = my_generic_events_service_meta::QueriesMeta;
    type EventsMeta = my_generic_events_service_meta::EventsMeta;
    const BASE_SERVICES: &'static [sails_rs::meta::AnyServiceMetaFn] = &[];
    const ASYNC: bool = false;
    const INTERFACE_PATH: &'static str = stringify!(MyGenericEventsService < 'a, T >);
    const INTERFACE_ID32: u32 = my_generic_events_service_meta::INTERFACE_ID32;
    const INTERFACE_UID64: u64 = my_generic_events_service_meta::INTERFACE_UID64;
    const EXTENDS: &'static [sails_rs::meta::ExtendedInterface] = my_generic_events_service_meta::EXTENDS;
    fn command_entry_ids() -> sails_rs::Vec<u16> {
        let mut ids = sails_rs::Vec::new();
        ids.extend(my_generic_events_service_meta::COMMAND_ENTRY_IDS.iter().copied());
        ids
    }
    fn local_command_entry_ids() -> &'static [u16] {
        my_generic_events_service_meta::COMMAND_ENTRY_IDS
    }
    fn query_entry_ids() -> sails_rs::Vec<u16> {
        let mut ids = sails_rs::Vec::new();
        ids.extend(my_generic_events_service_meta::QUERY_ENTRY_IDS.iter().copied());
        ids
    }
    fn local_query_entry_ids() -> &'static [u16] {
        my_generic_events_service_meta::QUERY_ENTRY_IDS
    }
    fn event_entry_ids() -> sails_rs::Vec<u16> {
        let mut ids = my_generic_events_service_meta::event_entry_ids();
        ids
    }
    fn local_event_entry_ids() -> sails_rs::Vec<u16> {
        my_generic_events_service_meta::event_entry_ids()
    }
    fn canonical_service() -> &'static [u8] {
        my_generic_events_service_meta::canonical_service()
    }
}
mod my_generic_events_service_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    use sails_rs::gstd::InvocationIo;
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __DoThisParams {}
    impl InvocationIo for __DoThisParams {
        const ROUTE: &'static [u8] = &[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8];
        type Params = Self;
        const ASYNC: bool = false;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {}
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = MyEvents;
    pub const COMMAND_ENTRY_IDS: &[u16] = &[1];
    pub const QUERY_ENTRY_IDS: &[u16] = &[];
    pub const INTERFACE_ID32: u32 = 2024335076;
    pub const INTERFACE_UID64: u64 = 5935738826225411812;
    pub const CANONICAL_BYTES: &[u8] = &[
        123, 34, 99, 97, 110, 111, 110, 95, 115, 99, 104, 101, 109, 97, 34, 58, 34, 115,
        97, 105, 108, 115, 45, 105, 100, 108, 45, 106, 99, 115, 34, 44, 34, 99, 97, 110,
        111, 110, 95, 118, 101, 114, 115, 105, 111, 110, 34, 58, 34, 49, 34, 44, 34, 104,
        97, 115, 104, 34, 58, 123, 34, 97, 108, 103, 111, 34, 58, 34, 98, 108, 97, 107,
        101, 51, 34, 44, 34, 100, 111, 109, 97, 105, 110, 34, 58, 34, 71, 69, 65, 82, 45,
        73, 68, 76, 47, 118, 49, 47, 105, 110, 116, 101, 114, 102, 97, 99, 101, 45, 105,
        100, 34, 125, 44, 34, 115, 101, 114, 118, 105, 99, 101, 115, 34, 58, 123, 34, 77,
        121, 71, 101, 110, 101, 114, 105, 99, 69, 118, 101, 110, 116, 115, 83, 101, 114,
        118, 105, 99, 101, 32, 60, 32, 39, 97, 32, 44, 32, 84, 32, 62, 34, 58, 123, 34,
        101, 118, 101, 110, 116, 115, 34, 58, 91, 93, 44, 34, 101, 120, 116, 101, 110,
        100, 115, 34, 58, 91, 93, 44, 34, 102, 117, 110, 99, 116, 105, 111, 110, 115, 34,
        58, 91, 123, 34, 101, 110, 116, 114, 121, 95, 105, 100, 95, 111, 118, 101, 114,
        114, 105, 100, 101, 34, 58, 49, 44, 34, 107, 105, 110, 100, 34, 58, 34, 99, 111,
        109, 109, 97, 110, 100, 34, 44, 34, 110, 97, 109, 101, 34, 58, 34, 68, 111, 84,
        104, 105, 115, 34, 44, 34, 112, 97, 114, 97, 109, 115, 34, 58, 91, 93, 44, 34,
        114, 101, 116, 117, 114, 110, 115, 34, 58, 123, 34, 107, 105, 110, 100, 34, 58,
        34, 117, 110, 105, 116, 34, 125, 125, 93, 44, 34, 110, 97, 109, 101, 34, 58, 34,
        77, 121, 71, 101, 110, 101, 114, 105, 99, 69, 118, 101, 110, 116, 115, 83, 101,
        114, 118, 105, 99, 101, 32, 60, 32, 39, 97, 32, 44, 32, 84, 32, 62, 34, 125, 125,
        44, 34, 116, 121, 112, 101, 115, 34, 58, 123, 125, 125,
    ];
    pub const EXTENDS: &[sails_rs::meta::ExtendedInterface] = &[];
    pub fn event_entry_ids() -> sails_rs::Vec<u16> {
        <MyEvents as sails_rs::meta::EventEntryIdMeta>::event_entry_ids()
    }
    impl sails_rs::meta::EventEntryIdMeta for NoEvents {
        fn event_entry_ids() -> sails_rs::Vec<u16> {
            sails_rs::Vec::new()
        }
    }
    #[cfg(all(feature = "std", not(target_arch = "wasm32")))]
    fn canonical_cache() -> &'static (&'static [u8], u32, u64) {
        static CACHE: sails_rs::spin::Once<(&'static [u8], u32, u64)> = sails_rs::spin::Once::new();
        CACHE
            .call_once(|| {
                let document = sails_rs::interface_id::runtime::build_canonical_document::<
                    MyGenericEventsService<'a, T>,
                >()
                    .expect("building canonical document should succeed");
                let bytes = document
                    .to_bytes()
                    .expect("canonical document serialization should succeed");
                let (id32, uid64) = sails_rs::interface_id::compute_ids_from_bytes(
                    &bytes,
                );
                let leaked = sails_rs::boxed::Box::leak(bytes.into_boxed_slice());
                (leaked as &'static [u8], id32, uid64)
            })
    }
    pub fn canonical_service() -> &'static [u8] {
        #[cfg(all(feature = "std", not(target_arch = "wasm32")))]
        {
            let (bytes, _, _) = *canonical_cache();
            bytes
        }
        #[cfg(not(all(feature = "std", not(target_arch = "wasm32"))))]
        { CANONICAL_BYTES }
    }
    pub fn interface_id32() -> u32 {
        #[cfg(all(feature = "std", not(target_arch = "wasm32")))]
        {
            let (_, id32, _) = *canonical_cache();
            id32
        }
        #[cfg(not(all(feature = "std", not(target_arch = "wasm32"))))] { INTERFACE_ID32 }
    }
    pub fn interface_uid64() -> u64 {
        #[cfg(all(feature = "std", not(target_arch = "wasm32")))]
        {
            let (_, _, uid64) = *canonical_cache();
            uid64
        }
        #[cfg(not(all(feature = "std", not(target_arch = "wasm32"))))]
        { INTERFACE_UID64 }
    }
    pub fn extends() -> &'static [sails_rs::meta::ExtendedInterface] {
        #[cfg(all(feature = "std", not(target_arch = "wasm32")))]
        {
            static EXTENDS: sails_rs::spin::Once<
                &'static [sails_rs::meta::ExtendedInterface],
            > = sails_rs::spin::Once::new();
            *EXTENDS
                .call_once(|| {
                    let mut entries: sails_rs::Vec<sails_rs::meta::ExtendedInterface> = sails_rs::Vec::new();
                    sails_rs::boxed::Box::leak(entries.into_boxed_slice())
                })
        }
        #[cfg(not(all(feature = "std", not(target_arch = "wasm32"))))] { EXTENDS }
    }
}

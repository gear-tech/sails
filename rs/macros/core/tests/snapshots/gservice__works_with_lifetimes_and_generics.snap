---
source: rs/macros/core/tests/gservice.rs
expression: result
---
impl<'a, 'b, T, U> SomeService<'a, 'b, T, U>
where
    T: Clone,
    U: Iterator<Item = u32>,
{
    pub fn do_this(&mut self) -> u32 {
        42
    }
}
#[allow(async_fn_in_trait)]
pub trait SomeServiceImplTrait<'a, 'b> {
    fn do_this(&mut self) -> u32;
}
impl<'a, 'b, T, U> SomeServiceImplTrait<'a, 'b>
for sails_rs::gstd::services::ServiceExposure<SomeService<'a, 'b, T, U>, ()>
where
    T: Clone,
    U: Iterator<Item = u32>,
{
    fn do_this(&mut self) -> u32 {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new2(self);
        self.inner.do_this()
    }
}
impl<'a, 'b, T, U> sails_rs::gstd::services::ServiceHandle for SomeService<'a, 'b, T, U>
where
    T: Clone,
    U: Iterator<Item = u32>,
{
    async fn try_handle(&mut self, input: &[u8]) -> Option<(Vec<u8>, u128)> {
        let mut __input = input;
        let route: String = sails_rs::Decode::decode(&mut __input).ok()?;
        match route.as_str() {
            "DoThis" => {
                let request: some_service_meta::__DoThisParams = sails_rs::Decode::decode(
                        &mut __input,
                    )
                    .expect("Failed to decode request");
                let result = self.do_this();
                let value = 0u128;
                Some((sails_rs::Encode::encode(&("DoThis", &result)), value))
            }
            _ => None,
        }
    }
}
impl<'a, 'b, T, U> sails_rs::gstd::services::Service for SomeService<'a, 'b, T, U>
where
    T: Clone,
    U: Iterator<Item = u32>,
{
    type Exposure = sails_rs::gstd::services::ServiceExposure<
        SomeService<'a, 'b, T, U>,
        (),
    >;
    type Extend = ();
    fn expose(
        self,
        message_id: sails_rs::MessageId,
        route: &'static [u8],
    ) -> Self::Exposure {
        let extend = ();
        Self::Exposure::new(message_id, route, self, extend)
    }
}
impl<'a, 'b, T, U> sails_rs::meta::ServiceMeta for SomeService<'a, 'b, T, U>
where
    T: Clone,
    U: Iterator<Item = u32>,
{
    fn commands() -> sails_rs::scale_info::MetaType {
        sails_rs::scale_info::MetaType::new::<some_service_meta::CommandsMeta>()
    }
    fn queries() -> sails_rs::scale_info::MetaType {
        sails_rs::scale_info::MetaType::new::<some_service_meta::QueriesMeta>()
    }
    fn events() -> sails_rs::scale_info::MetaType {
        sails_rs::scale_info::MetaType::new::<some_service_meta::EventsMeta>()
    }
    fn base_services() -> impl Iterator<Item = sails_rs::meta::AnyServiceMeta> {
        [].into_iter()
    }
}
mod some_service_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __DoThisParams {}
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {}
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = NoEvents;
}

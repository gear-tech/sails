---
source: rs/macros/core/tests/gprogram.rs
expression: result
---
impl MyProgram {
    #[export(unwrap_result)]
    pub async fn new(p1: u32, p2: String) -> Result<Self, String> {
        Self { p1, p2 }
    }
    #[export(unwrap_result)]
    pub fn new2(p2: String, p1: u32) -> Result<Self, String> {
        Self { p1, p2 }
    }
}
impl sails_rs::meta::ProgramMeta for MyProgram {
    type ConstructorsMeta = meta_in_program::ConstructorsMeta;
    const SERVICES: &'static [(&'static str, sails_rs::meta::AnyServiceMetaFn)] = &[];
    const ASYNC: bool = true;
}
mod meta_in_program {
    use super::*;
    use sails_rs::gstd::InvocationIo;
    #[derive(sails_rs::Decode, sails_rs::TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __NewParams {
        pub(super) p1: u32,
        pub(super) p2: String,
    }
    impl InvocationIo for __NewParams {
        const ROUTE: &'static [u8] = &[12u8, 78u8, 101u8, 119u8];
        type Params = Self;
        const ASYNC: bool = true;
    }
    #[derive(sails_rs::Decode, sails_rs::TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __New2Params {
        pub(super) p2: String,
        pub(super) p1: u32,
    }
    impl InvocationIo for __New2Params {
        const ROUTE: &'static [u8] = &[16u8, 78u8, 101u8, 119u8, 50u8];
        type Params = Self;
        const ASYNC: bool = false;
    }
    #[derive(sails_rs::TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum ConstructorsMeta {
        New(__NewParams),
        New2(__New2Params),
    }
}
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rs::{gstd, hex, prelude::*};
    static mut PROGRAM: Option<MyProgram> = None;
    #[unsafe(no_mangle)]
    extern "C" fn init() {
        use gstd::InvocationIo;
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        let invocation_route = if let Ok(request) = meta_in_program::__NewParams::decode_params(
            input,
        ) {
            gstd::message_loop(async move {
                let program = MyProgram::new(request.p1, request.p2).await.unwrap();
                unsafe {
                    PROGRAM = Some(program);
                }
            });
            meta_in_program::__NewParams::ROUTE
        } else if let Ok(request) = meta_in_program::__New2Params::decode_params(input) {
            let program = MyProgram::new2(request.p2, request.p1).unwrap();
            unsafe {
                PROGRAM = Some(program);
            }
            meta_in_program::__New2Params::ROUTE
        } else {
            gstd::unknown_input_panic("Unexpected ctor", input)
        };
        gstd::msg::reply_bytes(invocation_route, 0).expect("Failed to send output");
    }
    #[unsafe(no_mangle)]
    extern "C" fn handle() {
        let mut input = gstd::msg::load_bytes().expect("Failed to read input");
        let program_ref = unsafe { PROGRAM.as_mut() }.expect("Program not initialized");
        { gstd::unknown_input_panic("Unexpected service", &input) };
    }
    #[unsafe(no_mangle)]
    extern "C" fn handle_reply() {
        use sails_rs::meta::ProgramMeta;
        if MyProgram::ASYNC {
            gstd::handle_reply_with_hook();
        }
    }
    #[unsafe(no_mangle)]
    extern "C" fn handle_signal() {
        use sails_rs::meta::ProgramMeta;
        if MyProgram::ASYNC {
            gstd::handle_signal();
        }
    }
}

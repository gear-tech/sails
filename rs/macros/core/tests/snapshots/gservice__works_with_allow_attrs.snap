---
source: rs/macros/core/tests/gservice.rs
expression: result
---
pub struct SomeServiceExposure<T> {
    route: &'static [u8],
    inner: T,
}
impl<T: sails_rs::meta::ServiceMeta> sails_rs::gstd::services::Exposure
for SomeServiceExposure<T> {
    fn route(&self) -> &'static [u8] {
        self.route
    }
    fn check_asyncness(input: &[u8]) -> Option<bool> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::{Service, Exposure};
        if !T::ASYNC {
            return Some(false);
        }
        if let Ok(is_async) = some_service_meta::__DoThisParams::check_asyncness(input) {
            return Some(is_async);
        }
        if let Ok(is_async) = some_service_meta::__ThisParams::check_asyncness(input) {
            return Some(is_async);
        }
        None
    }
}
impl<T> core::ops::Deref for SomeServiceExposure<T> {
    type Target = T;
    fn deref(&self) -> &Self::Target {
        &self.inner
    }
}
impl<T> core::ops::DerefMut for SomeServiceExposure<T> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.inner
    }
}
#[allow(warnings)]
#[allow(clippy::all)]
impl SomeServiceExposure<SomeService> {
    #[export]
    #[allow(unused)]
    pub async fn do_this(&mut self, p1: u32, p2: String) -> u32 {
        p1
    }
    #[export]
    pub fn this(&self, p1: bool) -> bool {
        p1
    }
    pub fn check_asyncness(&self, input: &[u8]) -> Option<bool> {
        <Self as sails_rs::gstd::services::Exposure>::check_asyncness(input)
    }
    pub fn try_handle(
        mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::{Service, Exposure};
        if let Ok(request) = some_service_meta::__ThisParams::decode_params(input) {
            let result = self.this(request.p1);
            let value = 0u128;
            some_service_meta::__ThisParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        None
    }
    pub async fn try_handle_async(
        mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::{Service, Exposure};
        if let Ok(request) = some_service_meta::__DoThisParams::decode_params(input) {
            let result = self.do_this(request.p1, request.p2).await;
            let value = 0u128;
            some_service_meta::__DoThisParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        None
    }
}
impl sails_rs::gstd::services::Service for SomeService {
    type Exposure = SomeServiceExposure<Self>;
    fn expose(self, route: &'static [u8]) -> Self::Exposure {
        Self::Exposure {
            route,
            inner: self,
        }
    }
}
impl sails_rs::meta::ServiceMeta for SomeService {
    type CommandsMeta = some_service_meta::CommandsMeta;
    type QueriesMeta = some_service_meta::QueriesMeta;
    type EventsMeta = some_service_meta::EventsMeta;
    const BASE_SERVICES: &'static [sails_rs::meta::AnyServiceMetaFn] = &[];
    const ASYNC: bool = true;
}
mod some_service_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    use sails_rs::gstd::InvocationIo;
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __DoThisParams {
        pub(super) p1: u32,
        pub(super) p2: String,
    }
    impl InvocationIo for __DoThisParams {
        const ROUTE: &'static [u8] = &[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8];
        type Params = Self;
        const ASYNC: bool = true;
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __ThisParams {
        pub(super) p1: bool,
    }
    impl InvocationIo for __ThisParams {
        const ROUTE: &'static [u8] = &[16u8, 84u8, 104u8, 105u8, 115u8];
        type Params = Self;
        const ASYNC: bool = false;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {
        This(__ThisParams, bool),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = NoEvents;
}

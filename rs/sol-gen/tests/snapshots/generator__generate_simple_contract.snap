---
source: rs/sol-gen/tests/generator.rs
expression: "String::from_utf8(contract.unwrap().data).unwrap()"
---
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.28;

interface ITestContract {
    function createPrg(bool _callReply) external returns (bytes32 messageId);

    function svc1DoThis(bool _callReply, uint32 p1, string calldata p2) external returns (bytes32 messageId);
}

contract TestContractAbi is ITestContract {
    function createPrg(bool _callReply) external returns (bytes32 messageId) {}

    function svc1DoThis(bool _callReply, uint32 p1, string calldata p2) external returns (bytes32 messageId) {}
}

interface ITestContractCallbacks {
    function replyOn_createPrg(bytes32 messageId) external;

    function replyOn_svc1DoThis(bytes32 messageId, uint32 reply) external;

    function onErrorReply(bytes32 messageId, bytes calldata payload, bytes4 replyCode) external;
}

contract TestContractCaller is ITestContractCallbacks {
    ITestContract public immutable gearExeProgram;

    constructor(ITestContract _gearExeProgram) {
        gearExeProgram = _gearExeProgram;
    }

    modifier onlyGearExeProgram() {
        require(msg.sender == address(gearExeProgram), "Only Gear.exe program can call this function");
        _;
    }

    function replyOn_createPrg(bytes32 messageId) external onlyGearExeProgram {
        // TODO: implement this
    }

    function replyOn_svc1DoThis(bytes32 messageId, uint32 reply) external onlyGearExeProgram {
        // TODO: implement this
    }

    function onErrorReply(bytes32 messageId, bytes calldata payload, bytes4 replyCode) external onlyGearExeProgram {
        // TODO: implement this
    }
}

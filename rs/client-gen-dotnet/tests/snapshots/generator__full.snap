---
source: rs/client-gen-dotnet/tests/generator.rs
expression: "gen(IDL, \"Service\")"
---
public interface IServiceFactory
{
    /// <summary>
    /// New constructor
    /// </summary>
    IActivation New(
        global::Substrate.NetApi.Model.Types.Primitive.U32 a);
}

public partial class ServiceFactory : IServiceFactory
{
    private readonly IRemoting remoting;

    public ServiceFactory(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    /// <inheritdoc/>
    public IActivation New(
        global::Substrate.NetApi.Model.Types.Primitive.U32 a)
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Primitive.U32>(
            this.remoting,
            new byte[] { 12, 78, 101, 119 },
            new global::Substrate.NetApi.Model.Types.Primitive.U32(a));
    }
}

public interface IService
{}

public partial class Service : IService
{
    private readonly IRemoting remoting;

    public Service(IRemoting remoting)
    {
        this.remoting = remoting;
    }
}
/// <summary>
/// ThisThatSvcAppTupleStruct docs
/// </summary>
[global::Substrate.NetApi.Attributes.SubstrateNodeType(global::Substrate.NetApi.Model.Types.Metadata.Base.TypeDefEnum.Composite)]
public sealed partial class ThisThatSvcAppTupleStruct : global::Substrate.NetApi.Model.Types.Base.BaseType
{
    public global::Substrate.NetApi.Model.Types.Primitive.Bool Value { get; set; }

    /// <inheritdoc/>
    public override string TypeName() => "ThisThatSvcAppTupleStruct";

    /// <inheritdoc/>
    public override byte[] Encode()
    {
        var result = new List<byte>();
        result.AddRange(Value.Encode());
        return result.ToArray();
    }

    /// <inheritdoc/>
    public override void Decode(byte[] byteArray, ref int p)
    {
        var start = p;
        Value = new global::Substrate.NetApi.Model.Types.Primitive.Bool();
        Value.Decode(byteArray, ref p);
        var bytesLength = p - start;
        this.TypeSize = bytesLength;
        this.Bytes = new byte[bytesLength];
        global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
    }
}

/// <summary>
/// ThisThatSvcAppDoThatParam docs
/// </summary>
[global::Substrate.NetApi.Attributes.SubstrateNodeType(global::Substrate.NetApi.Model.Types.Metadata.Base.TypeDefEnum.Composite)]
public sealed partial class ThisThatSvcAppDoThatParam : global::Substrate.NetApi.Model.Types.Base.BaseType
{
    /// <summary>
    /// field `query`
    /// </summary>
    public global::Substrate.NetApi.Model.Types.Primitive.U32 Query { get; set; }
    /// <summary>
    /// field `result`
    /// </summary>
    public global::Substrate.NetApi.Model.Types.Primitive.Str Result { get; set; }
    /// <summary>
    /// field `p3`
    /// </summary>
    public EnumThisThatSvcAppManyVariants P3 { get; set; }

    /// <inheritdoc/>
    public override string TypeName() => "ThisThatSvcAppDoThatParam";

    /// <inheritdoc/>
    public override byte[] Encode()
    {
        var result = new List<byte>();
        result.AddRange(Query.Encode());
        result.AddRange(Result.Encode());
        result.AddRange(P3.Encode());
        return result.ToArray();
    }

    /// <inheritdoc/>
    public override void Decode(byte[] byteArray, ref int p)
    {
        var start = p;
        Query = new global::Substrate.NetApi.Model.Types.Primitive.U32();
        Query.Decode(byteArray, ref p);
        Result = new global::Substrate.NetApi.Model.Types.Primitive.Str();
        Result.Decode(byteArray, ref p);
        P3 = new EnumThisThatSvcAppManyVariants();
        P3.Decode(byteArray, ref p);
        var bytesLength = p - start;
        this.TypeSize = bytesLength;
        this.Bytes = new byte[bytesLength];
        global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
    }
}

/// <summary>
/// ThisThatSvcAppManyVariants docs
/// </summary>
public enum ThisThatSvcAppManyVariants
{
    /// <summary>
    /// variant `One`
    /// </summary>
    One,
    /// <summary>
    /// variant `Two`
    /// </summary>
    Two,
    Three,
    Four,
    Five,
    Six,
}

public sealed partial class EnumThisThatSvcAppManyVariants : global::Substrate.NetApi.Model.Types.Base.BaseEnumRust<ThisThatSvcAppManyVariants>
{
    public EnumThisThatSvcAppManyVariants()
    {
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(ThisThatSvcAppManyVariants.One);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Primitive.U32>(ThisThatSvcAppManyVariants.Two);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.U32>>(ThisThatSvcAppManyVariants.Three);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.U32, global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.U16>>>(ThisThatSvcAppManyVariants.Four);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.NetApi.Model.Types.Primitive.U32>>(ThisThatSvcAppManyVariants.Five);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Primitive.U32>(ThisThatSvcAppManyVariants.Six);
    }
}

public enum T
{
    One,
}

public sealed partial class EnumT : global::Substrate.NetApi.Model.Types.Base.BaseEnumRust<T>
{
    public EnumT()
    {
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(T.One);
    }
}

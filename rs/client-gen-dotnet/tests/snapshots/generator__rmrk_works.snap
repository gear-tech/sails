---
source: rs/client-gen-dotnet/tests/generator.rs
expression: "gen(idl, \"RmrkCatalog\")"
---
using global::Sails.Remoting.Abstractions;
using global::System;
using global::System.Collections.Generic;

#pragma warning disable RCS0056 // A line is too long

namespace RmrkCatalog.Client;

public interface IRmrkCatalogFactory
{
    IActivation New();
}

public partial class RmrkCatalogFactory : IRmrkCatalogFactory
{
    private readonly IRemoting remoting;

    public RmrkCatalogFactory(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    /// <inheritdoc/>
    public IActivation New()
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(
            this.remoting,
            [12, 78, 101, 119],
            new global::Substrate.NetApi.Model.Types.Base.BaseVoid());
    }
}

public interface IRmrkCatalog
{
    global::Sails.Remoting.Abstractions.ICall<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.U32, global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId>>, Error>> AddEquippables(global::Substrate.NetApi.Model.Types.Primitive.U32 partId, global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId> collectionIds);
    global::Sails.Remoting.Abstractions.ICall<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.Gear.Client.Model.Types.Base.BaseDictionary<global::Substrate.NetApi.Model.Types.Primitive.U32, Part>, Error>> AddParts(global::Substrate.Gear.Client.Model.Types.Base.BaseDictionary<global::Substrate.NetApi.Model.Types.Primitive.U32, Part> parts);
    global::Sails.Remoting.Abstractions.ICall<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.U32, global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId>, Error>> RemoveEquippable(global::Substrate.NetApi.Model.Types.Primitive.U32 partId, global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId collectionId);
    global::Sails.Remoting.Abstractions.ICall<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.NetApi.Model.Types.Primitive.U32>, Error>> RemoveParts(global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.NetApi.Model.Types.Primitive.U32> partIds);
    global::Sails.Remoting.Abstractions.ICall<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseVoid, Error>> ResetEquippables(global::Substrate.NetApi.Model.Types.Primitive.U32 partId);
    global::Sails.Remoting.Abstractions.ICall<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseVoid, Error>> SetEquippablesToAll(global::Substrate.NetApi.Model.Types.Primitive.U32 partId);
    global::Sails.Remoting.Abstractions.IQuery<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Primitive.Bool, Error>> Equippable(global::Substrate.NetApi.Model.Types.Primitive.U32 partId, global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId collectionId);
    global::Sails.Remoting.Abstractions.IQuery<global::Substrate.NetApi.Model.Types.Base.BaseOpt<Part>> Part(global::Substrate.NetApi.Model.Types.Primitive.U32 partId);
}

public partial class RmrkCatalog : IRmrkCatalog
{
    private readonly IRemoting remoting;

    public RmrkCatalog(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    /// <inheritdoc/>
    public global::Sails.Remoting.Abstractions.ICall<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.U32, global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId>>, Error>> AddEquippables(global::Substrate.NetApi.Model.Types.Primitive.U32 partId, global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId> collectionIds)
    {
        return new RemotingAction<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.U32, global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId>>, Error>>(
            this.remoting,
            [44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 56, 65, 100, 100, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115],
            new global::Substrate.NetApi.Model.Types.Base.BaseTupleRust(partId, collectionIds)
        );
    }
    /// <inheritdoc/>
    public global::Sails.Remoting.Abstractions.ICall<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.Gear.Client.Model.Types.Base.BaseDictionary<global::Substrate.NetApi.Model.Types.Primitive.U32, Part>, Error>> AddParts(global::Substrate.Gear.Client.Model.Types.Base.BaseDictionary<global::Substrate.NetApi.Model.Types.Primitive.U32, Part> parts)
    {
        return new RemotingAction<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.Gear.Client.Model.Types.Base.BaseDictionary<global::Substrate.NetApi.Model.Types.Primitive.U32, Part>, Error>>(
            this.remoting,
            [44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 32, 65, 100, 100, 80, 97, 114, 116, 115],
            new global::Substrate.NetApi.Model.Types.Base.BaseTupleRust(parts)
        );
    }
    /// <inheritdoc/>
    public global::Sails.Remoting.Abstractions.ICall<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.U32, global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId>, Error>> RemoveEquippable(global::Substrate.NetApi.Model.Types.Primitive.U32 partId, global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId collectionId)
    {
        return new RemotingAction<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.U32, global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId>, Error>>(
            this.remoting,
            [44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 64, 82, 101, 109, 111, 118, 101, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101],
            new global::Substrate.NetApi.Model.Types.Base.BaseTupleRust(partId, collectionId)
        );
    }
    /// <inheritdoc/>
    public global::Sails.Remoting.Abstractions.ICall<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.NetApi.Model.Types.Primitive.U32>, Error>> RemoveParts(global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.NetApi.Model.Types.Primitive.U32> partIds)
    {
        return new RemotingAction<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.NetApi.Model.Types.Primitive.U32>, Error>>(
            this.remoting,
            [44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 44, 82, 101, 109, 111, 118, 101, 80, 97, 114, 116, 115],
            new global::Substrate.NetApi.Model.Types.Base.BaseTupleRust(partIds)
        );
    }
    /// <inheritdoc/>
    public global::Sails.Remoting.Abstractions.ICall<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseVoid, Error>> ResetEquippables(global::Substrate.NetApi.Model.Types.Primitive.U32 partId)
    {
        return new RemotingAction<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseVoid, Error>>(
            this.remoting,
            [44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 64, 82, 101, 115, 101, 116, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115],
            new global::Substrate.NetApi.Model.Types.Base.BaseTupleRust(partId)
        );
    }
    /// <inheritdoc/>
    public global::Sails.Remoting.Abstractions.ICall<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseVoid, Error>> SetEquippablesToAll(global::Substrate.NetApi.Model.Types.Primitive.U32 partId)
    {
        return new RemotingAction<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseVoid, Error>>(
            this.remoting,
            [44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 76, 83, 101, 116, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115, 84, 111, 65, 108, 108],
            new global::Substrate.NetApi.Model.Types.Base.BaseTupleRust(partId)
        );
    }
    /// <inheritdoc/>
    public global::Sails.Remoting.Abstractions.IQuery<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Primitive.Bool, Error>> Equippable(global::Substrate.NetApi.Model.Types.Primitive.U32 partId, global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId collectionId)
    {
        return new RemotingAction<global::Substrate.Gear.Client.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Primitive.Bool, Error>>(
            this.remoting,
            [44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 40, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101],
            new global::Substrate.NetApi.Model.Types.Base.BaseTupleRust(partId, collectionId)
        );
    }
    /// <inheritdoc/>
    public global::Sails.Remoting.Abstractions.IQuery<global::Substrate.NetApi.Model.Types.Base.BaseOpt<Part>> Part(global::Substrate.NetApi.Model.Types.Primitive.U32 partId)
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Base.BaseOpt<Part>>(
            this.remoting,
            [44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 16, 80, 97, 114, 116],
            new global::Substrate.NetApi.Model.Types.Base.BaseTupleRust(partId)
        );
    }
}

public enum Error
{
    PartIdCantBeZero,
    BadConfig,
    PartAlreadyExists,
    ZeroLengthPassed,
    PartDoesNotExist,
    WrongPartFormat,
    NotAllowedToCall,
}

public sealed partial class EnumError : global::Substrate.NetApi.Model.Types.Base.BaseEnumRust<Error>
{
    public EnumError()
    {
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(Error.PartIdCantBeZero);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(Error.BadConfig);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(Error.PartAlreadyExists);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(Error.ZeroLengthPassed);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(Error.PartDoesNotExist);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(Error.WrongPartFormat);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(Error.NotAllowedToCall);
    }
}

public enum Part
{
    Fixed,
    Slot,
}

public sealed partial class EnumPart : global::Substrate.NetApi.Model.Types.Base.BaseEnumRust<Part>
{
    public EnumPart()
    {
        this.AddTypeDecoder<FixedPart>(Part.Fixed);
        this.AddTypeDecoder<SlotPart>(Part.Slot);
    }
}

[global::Substrate.NetApi.Attributes.SubstrateNodeType(global::Substrate.NetApi.Model.Types.Metadata.Base.TypeDefEnum.Composite)]
public sealed partial class FixedPart : global::Substrate.NetApi.Model.Types.Base.BaseType
{
    /// <summary>
    /// An optional zIndex of base part layer.
    /// specifies the stack order of an element.
    /// An element with greater stack order is always in front of an element with a lower stack order.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.AllowNull]
    public global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.U32> Z { get; set; }
    /// <summary>
    /// The metadata URI of the part.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.AllowNull]
    public global::Substrate.NetApi.Model.Types.Primitive.Str MetadataUri { get; set; }

    /// <inheritdoc/>
    public override string TypeName() => "FixedPart";

    /// <inheritdoc/>
    public override byte[] Encode()
    {
        var result = new List<byte>();
        result.AddRange(this.Z.Encode());
        result.AddRange(this.MetadataUri.Encode());
        return result.ToArray();
    }

    /// <inheritdoc/>
    public override void Decode(byte[] byteArray, ref int p)
    {
        var start = p;
        this.Z = new global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.U32>();
        this.Z.Decode(byteArray, ref p);
        this.MetadataUri = new global::Substrate.NetApi.Model.Types.Primitive.Str();
        this.MetadataUri.Decode(byteArray, ref p);
        var bytesLength = p - start;
        this.TypeSize = bytesLength;
        this.Bytes = new byte[bytesLength];
        Array.Copy(byteArray, start, this.Bytes, 0, bytesLength);
    }
}

[global::Substrate.NetApi.Attributes.SubstrateNodeType(global::Substrate.NetApi.Model.Types.Metadata.Base.TypeDefEnum.Composite)]
public sealed partial class SlotPart : global::Substrate.NetApi.Model.Types.Base.BaseType
{
    /// <summary>
    /// Array of whitelisted collections that can be equipped in the given slot. Used with slot parts only.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.AllowNull]
    public global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId> Equippable { get; set; }
    /// <summary>
    /// An optional zIndex of base part layer.
    /// specifies the stack order of an element.
    /// An element with greater stack order is always in front of an element with a lower stack order.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.AllowNull]
    public global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.U32> Z { get; set; }
    /// <summary>
    /// The metadata URI of the part.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.AllowNull]
    public global::Substrate.NetApi.Model.Types.Primitive.Str MetadataUri { get; set; }

    /// <inheritdoc/>
    public override string TypeName() => "SlotPart";

    /// <inheritdoc/>
    public override byte[] Encode()
    {
        var result = new List<byte>();
        result.AddRange(this.Equippable.Encode());
        result.AddRange(this.Z.Encode());
        result.AddRange(this.MetadataUri.Encode());
        return result.ToArray();
    }

    /// <inheritdoc/>
    public override void Decode(byte[] byteArray, ref int p)
    {
        var start = p;
        this.Equippable = new global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId>();
        this.Equippable.Decode(byteArray, ref p);
        this.Z = new global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.U32>();
        this.Z.Decode(byteArray, ref p);
        this.MetadataUri = new global::Substrate.NetApi.Model.Types.Primitive.Str();
        this.MetadataUri.Decode(byteArray, ref p);
        var bytesLength = p - start;
        this.TypeSize = bytesLength;
        this.Bytes = new byte[bytesLength];
        Array.Copy(byteArray, start, this.Bytes, 0, bytesLength);
    }
}

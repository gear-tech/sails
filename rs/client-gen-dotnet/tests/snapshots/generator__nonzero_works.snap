---
source: rs/client-gen-dotnet/tests/generator.rs
expression: "gen(idl, \"NonZeroParams\")"
---
using global::Sails.Remoting.Abstractions;
using global::System;
using global::System.Collections.Generic;

#pragma warning disable RCS0056 // A line is too long

public interface INonZeroParams
{
    global::Sails.Remoting.Abstractions.ICall<NonZeroU64> DoThis(
        NonZeroU256 p1,MyParam p2);
}

public partial class NonZeroParams : INonZeroParams
{
    private readonly IRemoting remoting;

    public NonZeroParams(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    /// <inheritdoc/>
    public global::Sails.Remoting.Abstractions.ICall<NonZeroU64> DoThis(
        NonZeroU256 p1,MyParam p2)
    {
        return new RemotingAction<NonZeroU64>(
            this.remoting,
            [52, 78, 111, 110, 90, 101, 114, 111, 80, 97, 114, 97, 109, 115, 24, 68, 111, 84, 104, 105, 115],
            new global::Substrate.NetApi.Model.Types.Base.BaseTupleRust(p1, p2)
        );
    }
}

[global::Substrate.NetApi.Attributes.SubstrateNodeType(global::Substrate.NetApi.Model.Types.Metadata.Base.TypeDefEnum.Composite)]
public sealed partial class MyParam : global::Substrate.NetApi.Model.Types.Base.BaseType
{
    public required NonZeroU256 F1 { get; set; }
    public required global::Substrate.NetApi.Model.Types.Base.BaseVec<NonZeroU8> F2 { get; set; }
    public required global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Base.BaseTuple<NonZeroU64, NonZeroU256>> F3 { get; set; }

    /// <inheritdoc/>
    public override string TypeName() => "MyParam";

    /// <inheritdoc/>
    public override byte[] Encode()
    {
        var result = new List<byte>();
        result.AddRange(this.F1.Encode());
        result.AddRange(this.F2.Encode());
        result.AddRange(this.F3.Encode());
        return result.ToArray();
    }

    /// <inheritdoc/>
    public override void Decode(byte[] byteArray, ref int p)
    {
        var start = p;
        this.F1 = new NonZeroU256();
        this.F1.Decode(byteArray, ref p);
        this.F2 = new global::Substrate.NetApi.Model.Types.Base.BaseVec<NonZeroU8>();
        this.F2.Decode(byteArray, ref p);
        this.F3 = new global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Base.BaseTuple<NonZeroU64, NonZeroU256>>();
        this.F3.Decode(byteArray, ref p);
        var bytesLength = p - start;
        this.TypeSize = bytesLength;
        this.Bytes = new byte[bytesLength];
        Array.Copy(byteArray, start, this.Bytes, 0, bytesLength);
    }
}

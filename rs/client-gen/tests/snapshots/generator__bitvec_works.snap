---
source: rs/client-gen/tests/generator.rs
expression: "gen(idl, \"BitVecParams\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct BitVecParams<R> {
    remoting: R,
}
impl<R> BitVecParams<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::BitVecParams for BitVecParams<R> {
    type Args = R::Args;
    fn do_this(&mut self, p1: BitVec<u8, Lsb0>) -> impl Call<Output = NonZeroU64, Args = R::Args> {
        RemotingAction::<_, bit_vec_params::io::DoThis>::new(self.remoting.clone(), p1)
    }
}

pub mod bit_vec_params {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct DoThis(());
        impl DoThis {
            #[allow(dead_code)]
            pub fn encode_call(p1: BitVec<u8, Lsb0>) -> Vec<u8> {
                <DoThis as ActionIo>::encode_call(&p1)
            }
        }
        impl ActionIo for DoThis {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 105, 115];
            type Params = BitVec<u8, Lsb0>;
            type Reply = NonZeroU64;
        }
    }
}

pub mod traits {
    use super::*;

    #[allow(clippy::type_complexity)]
    pub trait BitVecParams {
        type Args;
        fn do_this(
            &mut self,
            p1: BitVec<u8, Lsb0>,
        ) -> impl Call<Output = NonZeroU64, Args = Self::Args>;
    }
}

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub BitVecParams<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::BitVecParams for BitVecParams<A> { type Args = A; fn do_this (&mut self, p1: BitVec<u8, Lsb0>,) -> MockCall<A, NonZeroU64>; } }
}

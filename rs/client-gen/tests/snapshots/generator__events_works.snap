---
source: rs/client-gen/tests/generator.rs
expression: "gen_client(idl, \"ServiceWithEvents\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use sails_rs::{client::*, prelude::*};
pub struct ServiceWithEventsProgram;
impl Program for ServiceWithEventsProgram {}
pub trait ServiceWithEvents {
    type Env: GearEnv;
    fn service_with_events(&self)
    -> Service<Self::Env, service_with_events::ServiceWithEventsImpl>;
}
impl<E: GearEnv> ServiceWithEvents for Actor<E, ServiceWithEventsProgram> {
    type Env = E;
    fn service_with_events(
        &self,
    ) -> Service<Self::Env, service_with_events::ServiceWithEventsImpl> {
        self.service(stringify!(ServiceWithEvents))
    }
}

pub mod service_with_events {
    use super::*;
    pub trait ServiceWithEvents {
        type Env: GearEnv;
        fn do_this(&mut self, p1: NonZeroU256, p2: MyParam) -> PendingCall<Self::Env, io::DoThis>;
    }
    pub struct ServiceWithEventsImpl;
    impl<E: GearEnv> ServiceWithEvents for Service<E, ServiceWithEventsImpl> {
        type Env = E;
        fn do_this(&mut self, p1: NonZeroU256, p2: MyParam) -> PendingCall<Self::Env, io::DoThis> {
            self.pending_call((p1, p2))
        }
    }

    pub mod io {
        use super::*;
        sails_rs::io_struct_impl!(DoThis (p1: NonZeroU256, p2: MyParam) -> NonZeroU64);
    }

    #[cfg(not(target_arch = "wasm32"))]
    pub mod events {
        use super::*;
        #[derive(PartialEq, Debug, Encode, Decode)]
        #[codec(crate = sails_rs::scale_codec)]
        pub enum ServiceWithEventsEvents {
            One(u64),
            Two { id: u8, reference: u64 },
            Three(MyParam),
            Reset,
        }
        impl EventDecode for ServiceWithEventsEvents {
            const EVENT_NAMES: &'static [&'static [u8]] = &[
                &[12, 79, 110, 101],
                &[12, 84, 119, 111],
                &[20, 84, 104, 114, 101, 101],
                &[20, 82, 101, 115, 101, 116],
            ];
        }
        impl ServiceEvent for ServiceWithEventsImpl {
            type Event = ServiceWithEventsEvents;
        }
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct MyParam {
    pub f1: NonZeroU256,
    pub f2: Vec<NonZeroU8>,
    pub f3: Option<(NonZeroU64, NonZeroU256)>,
}

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub ServiceWithEvents {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl service_with_events::ServiceWithEvents for ServiceWithEvents { type Env = MockEnv; fn do_this (&mut self, p1: NonZeroU256, p2: MyParam) -> PendingCall<MockEnv, service_with_events::io::DoThis>; } }
}

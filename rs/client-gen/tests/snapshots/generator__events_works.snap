---
source: rs/client-gen/tests/generator.rs
expression: "gen(idl, \"ServiceWithEvents\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct ServiceWithEvents<R> {
    remoting: R,
}
impl<R> ServiceWithEvents<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::ServiceWithEvents for ServiceWithEvents<R> {
    type Args = R::Args;
    fn do_this(
        &mut self,
        p1: NonZeroU256,
        p2: MyParam,
    ) -> impl Call<Output = NonZeroU64, Args = R::Args> {
        RemotingAction::<_, service_with_events::io::DoThis>::new(self.remoting.clone(), (p1, p2))
    }
}
pub mod service_with_events {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct DoThis(());
        impl DoThis {
            #[allow(dead_code)]
            pub fn encode_call(p1: NonZeroU256, p2: super::MyParam) -> Vec<u8> {
                <DoThis as ActionIo>::encode_call(&(p1, p2))
            }
        }
        impl ActionIo for DoThis {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 105, 115];
            type Params = (NonZeroU256, super::MyParam);
            type Reply = NonZeroU64;
        }
    }
    #[allow(dead_code)]
    #[cfg(not(target_arch = "wasm32"))]
    pub mod events {
        use super::*;
        use sails_rs::events::*;
        #[derive(PartialEq, Debug, Encode, Decode)]
        #[codec(crate = sails_rs::scale_codec)]
        pub enum ServiceWithEventsEvents {
            One(u64),
            Two { id: u8, reference: u64 },
            Three(MyParam),
            Reset,
        }
        impl EventIo for ServiceWithEventsEvents {
            const ROUTE: &'static [u8] = &[];
            const EVENT_NAMES: &'static [&'static [u8]] = &[
                &[12, 79, 110, 101],
                &[12, 84, 119, 111],
                &[20, 84, 104, 114, 101, 101],
                &[20, 82, 101, 115, 101, 116],
            ];
            type Event = Self;
        }
        pub fn listener<R: Listener<Vec<u8>>>(
            remoting: R,
        ) -> impl Listener<ServiceWithEventsEvents> {
            RemotingListener::<_, ServiceWithEventsEvents>::new(remoting)
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct MyParam {
    pub f1: NonZeroU256,
    pub f2: Vec<NonZeroU8>,
    pub f3: Option<(NonZeroU64, NonZeroU256)>,
}
pub mod traits {
    use super::*;
    #[allow(clippy::type_complexity)]
    pub trait ServiceWithEvents {
        type Args;
        fn do_this(
            &mut self,
            p1: NonZeroU256,
            p2: MyParam,
        ) -> impl Call<Output = NonZeroU64, Args = Self::Args>;
    }
}
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub ServiceWithEvents<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::ServiceWithEvents for ServiceWithEvents<A> { type Args = A; fn do_this (&mut self, p1: NonZeroU256,p2: MyParam,) -> MockCall<A, NonZeroU64>; } }
}

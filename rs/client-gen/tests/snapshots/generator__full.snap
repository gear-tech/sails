---
source: rs/client-gen/tests/generator.rs
expression: "gen(IDL, \"Service\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct ServiceFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> ServiceFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::ServiceFactory for ServiceFactory<R> {
    type Args = R::Args;
    fn new(&self, a: u32) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, service_factory::io::New>::new(self.remoting.clone(), a)
    }
}
pub mod service_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call(a: u32) -> Vec<u8> {
                <New as ActionIo>::encode_call(&a)
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = u32;
            type Reply = ();
        }
    }
}
pub struct Service<R> {
    remoting: R,
}
impl<R> Service<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Service for Service<R> {
    type Args = R::Args;
    fn do_this(
        &mut self,
        p1: u32,
        p2: String,
        p3: (Option<String>, u8),
        p4: ThisThatSvcAppTupleStruct,
    ) -> impl Call<Output = (String, u32), Args = R::Args> {
        RemotingAction::<_, service::io::DoThis>::new(self.remoting.clone(), (p1, p2, p3, p4))
    }
    fn do_that(
        &mut self,
        param: ThisThatSvcAppDoThatParam,
    ) -> impl Call<Output = Result<(String, u32), (String,)>, Args = R::Args> {
        RemotingAction::<_, service::io::DoThat>::new(self.remoting.clone(), param)
    }
    fn this(&self, v1: Vec<u16>) -> impl Query<Output = u32, Args = R::Args> {
        RemotingAction::<_, service::io::This>::new(self.remoting.clone(), v1)
    }
    fn that(&self, v1: ()) -> impl Query<Output = Result<String, String>, Args = R::Args> {
        RemotingAction::<_, service::io::That>::new(self.remoting.clone(), v1)
    }
}
pub mod service {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct DoThis(());
        impl DoThis {
            #[allow(dead_code)]
            pub fn encode_call(
                p1: u32,
                p2: String,
                p3: (Option<String>, u8),
                p4: super::ThisThatSvcAppTupleStruct,
            ) -> Vec<u8> {
                <DoThis as ActionIo>::encode_call(&(p1, p2, p3, p4))
            }
        }
        impl ActionIo for DoThis {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 105, 115];
            type Params = (
                u32,
                String,
                (Option<String>, u8),
                super::ThisThatSvcAppTupleStruct,
            );
            type Reply = (String, u32);
        }
        pub struct DoThat(());
        impl DoThat {
            #[allow(dead_code)]
            pub fn encode_call(param: super::ThisThatSvcAppDoThatParam) -> Vec<u8> {
                <DoThat as ActionIo>::encode_call(&param)
            }
        }
        impl ActionIo for DoThat {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 97, 116];
            type Params = super::ThisThatSvcAppDoThatParam;
            type Reply = Result<(String, u32), (String,)>;
        }
        pub struct This(());
        impl This {
            #[allow(dead_code)]
            pub fn encode_call(v1: Vec<u16>) -> Vec<u8> {
                <This as ActionIo>::encode_call(&v1)
            }
        }
        impl ActionIo for This {
            const ROUTE: &'static [u8] = &[16, 84, 104, 105, 115];
            type Params = Vec<u16>;
            type Reply = u32;
        }
        pub struct That(());
        impl That {
            #[allow(dead_code)]
            pub fn encode_call(v1: ()) -> Vec<u8> {
                <That as ActionIo>::encode_call(&v1)
            }
        }
        impl ActionIo for That {
            const ROUTE: &'static [u8] = &[16, 84, 104, 97, 116];
            type Params = ();
            type Reply = Result<String, String>;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct ThisThatSvcAppTupleStruct(pub bool);
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct ThisThatSvcAppDoThatParam {
    pub p1: u32,
    pub p2: String,
    pub p3: ThisThatSvcAppManyVariants,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum ThisThatSvcAppManyVariants {
    One,
    Two(u32),
    Three(Option<u32>),
    Four { a: u32, b: Option<u16> },
    Five((String, u32)),
    Six((u32,)),
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum T {
    One,
}
pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait ServiceFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self, a: u32) -> impl Activation<Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait Service {
        type Args;
        fn do_this(
            &mut self,
            p1: u32,
            p2: String,
            p3: (Option<String>, u8),
            p4: ThisThatSvcAppTupleStruct,
        ) -> impl Call<Output = (String, u32), Args = Self::Args>;
        fn do_that(
            &mut self,
            param: ThisThatSvcAppDoThatParam,
        ) -> impl Call<Output = Result<(String, u32), (String,)>, Args = Self::Args>;
        fn this(&self, v1: Vec<u16>) -> impl Query<Output = u32, Args = Self::Args>;
        fn that(&self, v1: ()) -> impl Query<Output = Result<String, String>, Args = Self::Args>;
    }
}
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub Service<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::Service for Service<A> { type Args = A; fn do_this (&mut self, p1: u32,p2: String,p3: (Option<String>,u8,),p4: ThisThatSvcAppTupleStruct,) -> MockCall<A, (String,u32,)>;fn do_that (&mut self, param: ThisThatSvcAppDoThatParam,) -> MockCall<A, Result<(String,u32,), (String,)>>;fn this (& self, v1: Vec<u16>,) -> MockQuery<A, u32>;fn that (& self, v1: (),) -> MockQuery<A, Result<String, String>>; } }
}

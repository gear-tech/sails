---
source: rs/client-gen/tests/generator.rs
expression: "gen_client(IDL, \"Service\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use sails_rs::{client::*, prelude::*};
pub struct ServiceProgram;
impl Program for ServiceProgram {}
pub trait Service {
    type Env: GearEnv;
    fn service(&self) -> Service<Self::Env, service::ServiceImpl>;
}
impl<E: GearEnv> Service for Actor<E, ServiceProgram> {
    type Env = E;
    fn service(&self) -> Service<Self::Env, service::ServiceImpl> {
        self.service(stringify!(service::Service))
    }
}
pub trait ServiceCtors {
    type Env: GearEnv;
    /// New constructor#[allow(clippy::new_ret_no_self)] #[allow(clippy::wrong_self_convention)]
    fn new(self, a: u32) -> PendingCtor<Self::Env, ServiceProgram, io::New>;
}
impl<E: GearEnv> ServiceCtors for Deployment<E, ServiceProgram> {
    type Env = E;
    fn new(self, a: u32) -> PendingCtor<Self::Env, ServiceProgram, io::New> {
        self.pending_ctor((a,))
    }
}

pub mod io {
    use super::*;
    sails_rs::io_struct_impl!(New (a: u32) -> ());
}

pub mod service {
    use super::*;
    pub trait Service {
        type Env: GearEnv;
        /// Some description
        fn do_this(
            &mut self,
            p1: u32,
            p2: String,
            p3: (Option<String>, u8),
            p4: ThisThatSvcAppTupleStruct,
        ) -> PendingCall<Self::Env, io::DoThis>;
        /// Some multiline description
        /// Second line
        /// Third line
        fn do_that(
            &mut self,
            param: ThisThatSvcAppDoThatParam,
        ) -> PendingCall<Self::Env, io::DoThat>;
        /// This is a query
        fn this(&self, v1: Vec<u16>) -> PendingCall<Self::Env, io::This>;
        /// This is a second query
        /// This is a second line
        fn that(&self, v1: ()) -> PendingCall<Self::Env, io::That>;
    }
    pub struct ServiceImpl;
    impl<E: GearEnv> Service for Service<E, ServiceImpl> {
        type Env = E;
        fn do_this(
            &mut self,
            p1: u32,
            p2: String,
            p3: (Option<String>, u8),
            p4: ThisThatSvcAppTupleStruct,
        ) -> PendingCall<Self::Env, io::DoThis> {
            self.pending_call((p1, p2, p3, p4))
        }
        fn do_that(
            &mut self,
            param: ThisThatSvcAppDoThatParam,
        ) -> PendingCall<Self::Env, io::DoThat> {
            self.pending_call((param,))
        }
        fn this(&self, v1: Vec<u16>) -> PendingCall<Self::Env, io::This> {
            self.pending_call((v1,))
        }
        fn that(&self, v1: ()) -> PendingCall<Self::Env, io::That> {
            self.pending_call((v1,))
        }
    }

    pub mod io {
        use super::*;
        sails_rs::io_struct_impl!(DoThis (p1: u32, p2: String, p3: (Option<String>,u8,), p4: ThisThatSvcAppTupleStruct) -> (String,u32,));
        sails_rs::io_struct_impl!(DoThat (param: ThisThatSvcAppDoThatParam) -> Result<(String,u32,), (String,)>);
        sails_rs::io_struct_impl!(This (v1: Vec<u16>) -> u32);
        sails_rs::io_struct_impl!(That (v1: ()) -> Result<String, String>);
    }

    #[allow(dead_code)]
    #[cfg(not(target_arch = "wasm32"))]
    pub mod events {
        use super::*;
        use sails_rs::events::*;
        #[derive(PartialEq, Debug, Encode, Decode)]
        #[codec(crate = sails_rs::scale_codec)]
        pub enum ServiceEvents {
            /// `This` Done
            ThisDone(u32),
            /// `That` Done too
            ThatDone {
                /// This is `p1` field
                p1: String,
            },
        }
    }
}
/// ThisThatSvcAppTupleStruct docs
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct ThisThatSvcAppTupleStruct(
    /// field `bool`
    pub bool,
);
/// ThisThatSvcAppDoThatParam docs
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct ThisThatSvcAppDoThatParam {
    /// field `query`
    pub query: u32,
    /// field `result`
    pub result: String,
    /// field `p3`
    pub p3: ThisThatSvcAppManyVariants,
}
/// ThisThatSvcAppManyVariants docs
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum ThisThatSvcAppManyVariants {
    /// variant `One`
    One,
    /// variant `Two`
    Two(u32),
    Three(Option<u32>),
    Four {
        a: u32,
        b: Option<u16>,
    },
    Five((String, u32)),
    Six((u32,)),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum T {
    One,
}

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
}

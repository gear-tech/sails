---
source: rs/client-gen/tests/generator.rs
expression: "gen_client(idl, \"Basic\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use sails_rs::{client::*, prelude::*};
pub struct BasicProgram;
impl Program for BasicProgram {}
pub trait Basic {
    type Env: GearEnv;
    fn basic(&self) -> Service<Self::Env, basic::BasicImpl>;
}
impl<E: GearEnv> Basic for Actor<E, BasicProgram> {
    type Env = E;
    fn basic(&self) -> Service<Self::Env, basic::BasicImpl> {
        self.service(stringify!(Basic))
    }
}

pub mod basic {
    use super::*;
    pub trait Basic {
        type Env: GearEnv;
        fn do_this(&mut self, p1: u32, p2: MyParam) -> PendingCall<Self::Env, io::DoThis>;
        fn do_that(&mut self, p1: (u8, u32)) -> PendingCall<Self::Env, io::DoThat>;
    }
    pub struct BasicImpl;
    impl<E: GearEnv> Basic for Service<E, BasicImpl> {
        type Env = E;
        fn do_this(&mut self, p1: u32, p2: MyParam) -> PendingCall<Self::Env, io::DoThis> {
            self.pending_call((p1, p2))
        }
        fn do_that(&mut self, p1: (u8, u32)) -> PendingCall<Self::Env, io::DoThat> {
            self.pending_call((p1,))
        }
    }

    pub mod io {
        use super::*;
        sails_rs::io_struct_impl!(DoThis (p1: u32, p2: super::MyParam) -> u16);
        sails_rs::io_struct_impl!(DoThat (p1: (u8,u32,)) -> u8);
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct MyParam {
    pub f1: u32,
    pub f2: Vec<String>,
    pub f3: Option<(u8, u32)>,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum MyParam2 {
    Variant1,
    Variant2(u32),
    Variant3((u32,)),
    Variant4((u8, u32)),
    Variant5 { f1: String, f2: Vec<u8> },
}

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub Basic {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl basic::Basic for Basic { type Env = GstdEnv; fn do_this (&mut self, p1: u32, p2: MyParam) -> PendingCall<GstdEnv, basic::io::DoThis>;fn do_that (&mut self, p1: (u8,u32,)) -> PendingCall<GstdEnv, basic::io::DoThat>; } }
}

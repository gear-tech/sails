---
source: rs/client-gen/tests/generator.rs
expression: "gen(idl, \"Basic\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct Basic<R> {
    remoting: R,
}
impl<R> Basic<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Basic for Basic<R> {
    type Args = R::Args;
    fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<Output = u16, Args = R::Args> {
        RemotingAction::<_, basic::io::DoThis>::new(self.remoting.clone(), (p1, p2))
    }
    fn do_that(&mut self, p1: (u8, u32)) -> impl Call<Output = u8, Args = R::Args> {
        RemotingAction::<_, basic::io::DoThat>::new(self.remoting.clone(), p1)
    }
}
pub mod basic {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct DoThis(());
        impl DoThis {
            #[allow(dead_code)]
            pub fn encode_call(p1: u32, p2: super::MyParam) -> Vec<u8> {
                <DoThis as ActionIo>::encode_call(&(p1, p2))
            }
        }
        impl ActionIo for DoThis {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 105, 115];
            type Params = (u32, super::MyParam);
            type Reply = u16;
        }
        pub struct DoThat(());
        impl DoThat {
            #[allow(dead_code)]
            pub fn encode_call(p1: (u8, u32)) -> Vec<u8> {
                <DoThat as ActionIo>::encode_call(&p1)
            }
        }
        impl ActionIo for DoThat {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 97, 116];
            type Params = (u8, u32);
            type Reply = u8;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct MyParam {
    pub f1: u32,
    pub f2: Vec<String>,
    pub f3: Option<(u8, u32)>,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum MyParam2 {
    Variant1,
    Variant2(u32),
    Variant3((u32,)),
    Variant4((u8, u32)),
    Variant5 { f1: String, f2: Vec<u8> },
}
pub mod traits {
    use super::*;
    #[allow(clippy::type_complexity)]
    pub trait Basic {
        type Args;
        fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<Output = u16, Args = Self::Args>;
        fn do_that(&mut self, p1: (u8, u32)) -> impl Call<Output = u8, Args = Self::Args>;
    }
}
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub Basic<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::Basic for Basic<A> { type Args = A; fn do_this (&mut self, p1: u32,p2: MyParam,) -> MockCall<A, u16>;fn do_that (&mut self, p1: (u8,u32,),) -> MockCall<A, u8>; } }
}

---
source: rs/client-gen/tests/generator.rs
expression: "gen_client(idl, \"Multiple\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::{client::*, collections::*, prelude::*};
pub struct MultipleProgram;
impl sails_rs::client::Program for MultipleProgram {}
pub trait Multiple {
    type Env: sails_rs::client::GearEnv;
    fn multiple(&self) -> sails_rs::client::Service<Self::Env, multiple::MultipleImpl>;
    fn named(&self) -> sails_rs::client::Service<Self::Env, named::NamedImpl>;
}
impl<E: sails_rs::client::GearEnv> Multiple for sails_rs::client::Actor<E, MultipleProgram> {
    type Env = E;
    fn multiple(&self) -> sails_rs::client::Service<Self::Env, multiple::MultipleImpl> {
        self.service(stringify!(Multiple))
    }
    fn named(&self) -> sails_rs::client::Service<Self::Env, named::NamedImpl> {
        self.service(stringify!(Named))
    }
}

pub mod multiple {
    use super::*;
    pub trait Multiple {
        type Env: sails_rs::client::GearEnv;
        fn do_this(
            &mut self,
            p1: u32,
            p2: MyParam,
        ) -> sails_rs::client::PendingCall<Self::Env, io::DoThis>;
        fn do_that(
            &mut self,
            p1: (u8, u32),
        ) -> sails_rs::client::PendingCall<Self::Env, io::DoThat>;
    }
    pub struct MultipleImpl;
    impl<E: sails_rs::client::GearEnv> Multiple for sails_rs::client::Service<E, MultipleImpl> {
        type Env = E;
        fn do_this(
            &mut self,
            p1: u32,
            p2: MyParam,
        ) -> sails_rs::client::PendingCall<Self::Env, io::DoThis> {
            self.pending_call((p1, p2))
        }
        fn do_that(
            &mut self,
            p1: (u8, u32),
        ) -> sails_rs::client::PendingCall<Self::Env, io::DoThat> {
            self.pending_call((p1,))
        }
    }

    pub mod io {
        use super::*;
        sails_rs::io_struct_impl!(DoThis (p1: u32, p2: super::MyParam) -> u16);
        sails_rs::io_struct_impl!(DoThat (p1: (u8,u32,)) -> u8);
    }
}

pub mod named {
    use super::*;
    pub trait Named {
        type Env: sails_rs::client::GearEnv;
        fn that(&self, p1: u32) -> sails_rs::client::PendingCall<Self::Env, io::That>;
    }
    pub struct NamedImpl;
    impl<E: sails_rs::client::GearEnv> Named for sails_rs::client::Service<E, NamedImpl> {
        type Env = E;
        fn that(&self, p1: u32) -> sails_rs::client::PendingCall<Self::Env, io::That> {
            self.pending_call((p1,))
        }
    }

    pub mod io {
        use super::*;
        sails_rs::io_struct_impl!(That (p1: u32) -> String);
    }
}

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub Multiple {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl multiple::Multiple for Multiple { type Env = sails_rs::client::GstdEnv; fn do_this (&mut self, p1: u32, p2: MyParam) -> sails_rs::client::PendingCall<sails_rs::client::GstdEnv, multiple::io::DoThis>;fn do_that (&mut self, p1: (u8,u32,)) -> sails_rs::client::PendingCall<sails_rs::client::GstdEnv, multiple::io::DoThat>; } }
    mock! { pub Named {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl named::Named for Named { type Env = sails_rs::client::GstdEnv; fn that (& self, p1: u32) -> sails_rs::client::PendingCall<sails_rs::client::GstdEnv, named::io::That>; } }
}

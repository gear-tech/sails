---
source: rs/client-gen/tests/generator.rs
expression: code
---
// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use my_crate::MyParam;
#[allow(unused_imports)]
use my_crate::sails::collections::BTreeMap;
#[allow(unused_imports)]
use my_crate::sails::{
    String,
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
};
pub struct Service<R> {
    remoting: R,
}
impl<R> Service<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Service for Service<R> {
    type Args = R::Args;
    fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<Output = u16, Args = R::Args> {
        RemotingAction::<_, service::io::DoThis>::new(self.remoting.clone(), (p1, p2))
    }
    fn do_that(&mut self, p1: (u8, u32)) -> impl Call<Output = u8, Args = R::Args> {
        RemotingAction::<_, service::io::DoThat>::new(self.remoting.clone(), p1)
    }
}

pub mod service {
    use super::*;

    pub mod io {
        use super::*;
        use my_crate::sails::calls::ActionIo;
        pub struct DoThis(());
        impl DoThis {
            #[allow(dead_code)]
            pub fn encode_call(p1: u32, p2: super::MyParam) -> Vec<u8> {
                <DoThis as ActionIo>::encode_call(&(p1, p2))
            }
        }
        impl ActionIo for DoThis {
            const HAS_EMPTY_REPLY: bool = false;
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 105, 115];
            type Params = (u32, super::MyParam);
            type Reply = u16;
        }
        pub struct DoThat(());
        impl DoThat {
            #[allow(dead_code)]
            pub fn encode_call(p1: (u8, u32)) -> Vec<u8> {
                <DoThat as ActionIo>::encode_call(&p1)
            }
        }
        impl ActionIo for DoThat {
            const HAS_EMPTY_REPLY: bool = false;
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 97, 116];
            type Params = (u8, u32);
            type Reply = u8;
        }
    }
}
#[derive(Encode, Decode, TypeInfo)]
#[codec(crate = my_crate::sails::scale_codec)]
#[scale_info(crate = my_crate::sails::scale_info)]
pub enum MyParam2 {
    Variant1,
    Variant2(u32),
    Variant3((u32,)),
    Variant4((u8, u32)),
    Variant5 { f1: String, f2: Vec<u8> },
}

pub mod traits {
    use super::*;

    #[allow(clippy::type_complexity)]
    pub trait Service {
        type Args;
        fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<Output = u16, Args = Self::Args>;
        fn do_that(&mut self, p1: (u8, u32)) -> impl Call<Output = u8, Args = Self::Args>;
    }
}

---
source: rs/client-gen/tests/generator.rs
expression: code
---
// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use my_crate::MyParam;
use my_crate::sails::{client::*, prelude::*};
pub struct ServiceProgram;
impl Program for ServiceProgram {}
pub trait Service {
    type Env: GearEnv;
    fn service(&self) -> Service<Self::Env, service::ServiceImpl>;
}
impl<E: GearEnv> Service for Actor<E, ServiceProgram> {
    type Env = E;
    fn service(&self) -> Service<Self::Env, service::ServiceImpl> {
        self.service(stringify!(Service))
    }
}

pub mod service {
    use super::*;
    pub trait Service {
        type Env: GearEnv;
        fn do_this(&mut self, p1: u32, p2: MyParam) -> PendingCall<Self::Env, io::DoThis>;
        fn do_that(&mut self, p1: (u8, u32)) -> PendingCall<Self::Env, io::DoThat>;
    }
    pub struct ServiceImpl;
    impl<E: GearEnv> Service for Service<E, ServiceImpl> {
        type Env = E;
        fn do_this(&mut self, p1: u32, p2: MyParam) -> PendingCall<Self::Env, io::DoThis> {
            self.pending_call((p1, p2))
        }
        fn do_that(&mut self, p1: (u8, u32)) -> PendingCall<Self::Env, io::DoThat> {
            self.pending_call((p1,))
        }
    }

    pub mod io {
        use super::*;
        my_crate::sails::io_struct_impl!(DoThis (p1: u32, p2: MyParam) -> u16);
        my_crate::sails::io_struct_impl!(DoThat (p1: (u8,u32,)) -> u8);
    }
}
#[derive(Encode, Decode, TypeInfo)]
#[codec(crate = my_crate::sails::scale_codec)]
#[scale_info(crate = my_crate::sails::scale_info)]
pub enum MyParam2 {
    Variant1,
    Variant2(u32),
    Variant3((u32,)),
    Variant4((u8, u32)),
    Variant5 { f1: String, f2: Vec<u8> },
}

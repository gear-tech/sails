---
source: rs/client-gen/tests/generator.rs
expression: code
---
// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use my_crate::MyParam;
#[allow(unused_imports)]
use my_crate::sails::{client::*, collections::*, prelude::*};
pub struct ServiceProgram;
impl my_crate::sails::client::Program for ServiceProgram {}
pub trait Service {
    type Env: my_crate::sails::client::GearEnv;
    fn service(&self) -> my_crate::sails::client::Service<service::ServiceImpl, Self::Env>;
}
impl<E: my_crate::sails::client::GearEnv> Service
    for my_crate::sails::client::Actor<ServiceProgram, E>
{
    type Env = E;
    fn service(&self) -> my_crate::sails::client::Service<service::ServiceImpl, Self::Env> {
        self.service(stringify!(Service))
    }
}

pub mod service {
    use super::*;
    pub trait Service {
        type Env: my_crate::sails::client::GearEnv;
        fn do_this(
            &mut self,
            p1: u32,
            p2: MyParam,
        ) -> my_crate::sails::client::PendingCall<io::DoThis, Self::Env>;
        fn do_that(
            &mut self,
            p1: (u8, u32),
        ) -> my_crate::sails::client::PendingCall<io::DoThat, Self::Env>;
    }
    pub struct ServiceImpl;
    impl<E: my_crate::sails::client::GearEnv> Service
        for my_crate::sails::client::Service<ServiceImpl, E>
    {
        type Env = E;
        fn do_this(
            &mut self,
            p1: u32,
            p2: MyParam,
        ) -> my_crate::sails::client::PendingCall<io::DoThis, Self::Env> {
            self.pending_call((p1, p2))
        }
        fn do_that(
            &mut self,
            p1: (u8, u32),
        ) -> my_crate::sails::client::PendingCall<io::DoThat, Self::Env> {
            self.pending_call((p1,))
        }
    }

    pub mod io {
        use super::*;
        my_crate::sails::io_struct_impl!(DoThis (p1: u32, p2: super::MyParam) -> u16);
        my_crate::sails::io_struct_impl!(DoThat (p1: (u8,u32,)) -> u8);
    }
}
#[derive(Encode, Decode, TypeInfo)]
#[codec(crate = my_crate::sails::scale_codec)]
#[scale_info(crate = my_crate::sails::scale_info)]
pub enum MyParam2 {
    Variant1,
    Variant2(u32),
    Variant3((u32,)),
    Variant4((u8, u32)),
    Variant5 { f1: String, f2: Vec<u8> },
}

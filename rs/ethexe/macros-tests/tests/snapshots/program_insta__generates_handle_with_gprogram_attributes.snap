---
source: macros-tests/tests/program_insta.rs
expression: result
---
impl MyProgram {
    pub fn create() -> Self {
        Self
    }
}
impl sails_rs::meta::ProgramMeta for MyProgram {
    type ConstructorsMeta = meta_in_program::ConstructorsMeta;
    const SERVICES: &'static [(&'static str, sails_rs::meta::AnyServiceMetaFn)] = &[];
}
mod meta_in_program {
    use super::*;
    #[derive(sails_rs::Decode, sails_rs::TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __CreateParams {}
    impl sails_rs::gstd::InvocationIo for __CreateParams {
        const ROUTE: &'static [u8] = &[24u8, 67u8, 114u8, 101u8, 97u8, 116u8, 101u8];
        type Params = Self;
    }
    #[derive(sails_rs::TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum ConstructorsMeta {
        Create(__CreateParams),
    }
}
impl sails_rs::solidity::ProgramSignature for MyProgram {
    const CTORS: &'static [sails_rs::solidity::MethodExpo] = &[
        (
            &[24u8, 67u8, 114u8, 101u8, 97u8, 116u8, 101u8] as &[u8],
            "create",
            <<(
                u128,
                bool,
            ) as sails_rs::alloy_sol_types::SolValue>::SolType as sails_rs::alloy_sol_types::SolType>::SOL_NAME,
            <<(
                sails_rs::alloy_primitives::B256,
            ) as sails_rs::alloy_sol_types::SolValue>::SolType as sails_rs::alloy_sol_types::SolType>::SOL_NAME,
        ),
    ];
    const SERVICES: &'static [sails_rs::solidity::ServiceExpo] = &[];
    const METHODS_LEN: usize = 0;
}
const __CTOR_SIGS: [[u8; 4]; <MyProgram as sails_rs::solidity::ProgramSignature>::CTORS
    .len()] = sails_rs::solidity::ConstProgramMeta::<MyProgram>::ctor_sigs();
const __CTOR_CALLBACK_SIGS: [[u8; 4]; <MyProgram as sails_rs::solidity::ProgramSignature>::CTORS
    .len()] = sails_rs::solidity::ConstProgramMeta::<MyProgram>::ctor_callback_sigs();
const __METHOD_SIGS: [[u8; 4]; <MyProgram as sails_rs::solidity::ProgramSignature>::METHODS_LEN] = sails_rs::solidity::ConstProgramMeta::<
    MyProgram,
>::method_sigs();
const __METHOD_ROUTES: [(
    &'static [u8],
    &'static [u8],
); <MyProgram as sails_rs::solidity::ProgramSignature>::METHODS_LEN] = sails_rs::solidity::ConstProgramMeta::<
    MyProgram,
>::method_routes();
const __CALLBACK_SIGS: [[u8; 4]; <MyProgram as sails_rs::solidity::ProgramSignature>::METHODS_LEN] = sails_rs::solidity::ConstProgramMeta::<
    MyProgram,
>::callback_sigs();
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rs::{gstd, hex, prelude::*};
    static mut PROGRAM: Option<MyProgram> = None;
    #[gstd::async_init]
    async fn init() {
        use gstd::InvocationIo;
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        if let Ok(sig) = TryInto::<[u8; 4]>::try_into(&input[..4]) {
            if let Some(idx) = __CTOR_SIGS.iter().position(|s| s == &sig) {
                let (ctor_route, ..) = <MyProgram as sails_rs::solidity::ProgramSignature>::CTORS[idx];
                if let Some((program, encode_reply)) = match_ctor_solidity(
                        ctor_route,
                        &input[4..],
                    )
                    .await
                {
                    unsafe { PROGRAM = Some(program) };
                    let output = if encode_reply {
                        [
                            __CTOR_CALLBACK_SIGS[idx].as_slice(),
                            gstd::msg::id().into_bytes().as_slice(),
                        ]
                            .concat()
                    } else {
                        Vec::with_capacity(0)
                    };
                    gstd::msg::reply_bytes(output, 0).expect("Failed to send output");
                    return;
                }
            }
        }
        let (program, invocation_route) = if let Ok(request) = meta_in_program::__CreateParams::decode_params(
            input,
        ) {
            let program = MyProgram::create();
            (program, meta_in_program::__CreateParams::ROUTE)
        } else {
            gstd::unknown_input_panic("Unexpected ctor", input)
        };
        unsafe {
            PROGRAM = Some(program);
        }
        gstd::msg::reply_bytes(invocation_route, 0).expect("Failed to send output");
    }
    async fn match_ctor_solidity(
        ctor: &[u8],
        input: &[u8],
    ) -> Option<(MyProgram, bool)> {
        if ctor == &[24u8, 67u8, 114u8, 101u8, 97u8, 116u8, 101u8] {
            let (_, _encode_reply): (u128, bool) = sails_rs::alloy_sol_types::SolValue::abi_decode_params(
                    input,
                    false,
                )
                .expect("Failed to decode request");
            let program = MyProgram::create();
            return Some((program, _encode_reply));
        }
        None
    }
    #[gstd::async_main(handle_signal = my_handle_signal)]
    async fn main() {
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        let program_ref = unsafe { PROGRAM.as_mut() }.expect("Program not initialized");
        if let Ok(sig) = TryInto::<[u8; 4]>::try_into(&input[..4]) {
            if let Some(idx) = __METHOD_SIGS.iter().position(|s| s == &sig) {
                let (route, method) = __METHOD_ROUTES[idx];
            }
        }
        { gstd::unknown_input_panic("Unexpected service", input) };
    }
}

---
source: macros-tests/tests/service_insta.rs
expression: result
---
impl MyServiceWithEvents {
    pub fn do_this(&mut self) -> u32 {
        42
    }
    pub fn this(&self) -> bool {
        true
    }
}
pub struct MyServiceWithEventsExposure<T: sails_rs::gstd::services::Service> {
    message_id: sails_rs::MessageId,
    route: &'static [u8],
    #[cfg(not(target_arch = "wasm32"))]
    inner: sails_rs::Box<T>,
    #[cfg(not(target_arch = "wasm32"))]
    inner_ptr: *const T,
    #[cfg(target_arch = "wasm32")]
    inner: T,
    base: T::BaseExposures,
}
impl<T: sails_rs::gstd::services::Service> sails_rs::gstd::services::Exposure
for MyServiceWithEventsExposure<T> {
    fn message_id(&self) -> sails_rs::MessageId {
        self.message_id
    }
    fn route(&self) -> &'static [u8] {
        self.route
    }
}
impl MyServiceWithEventsExposure<MyServiceWithEvents> {
    pub fn do_this(&mut self) -> u32 {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.do_this()
    }
    pub fn this(&self) -> bool {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.this()
    }
    pub async fn try_handle(
        &mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::Exposure;
        if let Ok(request) = my_service_with_events_meta::__DoThisParams::decode_params(
            input,
        ) {
            let result = self.do_this();
            let value = 0u128;
            my_service_with_events_meta::__DoThisParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        if let Ok(request) = my_service_with_events_meta::__ThisParams::decode_params(
            input,
        ) {
            let result = self.this();
            let value = 0u128;
            my_service_with_events_meta::__ThisParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        None
    }
    pub async fn try_handle_solidity(
        &mut self,
        method: &[u8],
        input: &[u8],
    ) -> Option<(sails_rs::Vec<u8>, u128, bool)> {
        if method == &[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8] {
            let (_, _encode_reply): (u128, bool) = sails_rs::alloy_sol_types::SolValue::abi_decode_params(
                    input,
                    false,
                )
                .ok()?;
            let result = self.do_this();
            let value = 0u128;
            let output = if _encode_reply {
                let message_id = sails_rs::alloy_primitives::B256::new(
                    self.message_id.into_bytes(),
                );
                sails_rs::alloy_sol_types::SolValue::abi_encode_sequence(
                    &(message_id, result),
                )
            } else {
                sails_rs::alloy_sol_types::SolValue::abi_encode_sequence(&(result,))
            };
            return Some((output, value, _encode_reply));
        }
        if method == &[16u8, 84u8, 104u8, 105u8, 115u8] {
            let (_, _encode_reply): (u128, bool) = sails_rs::alloy_sol_types::SolValue::abi_decode_params(
                    input,
                    false,
                )
                .ok()?;
            let result = self.this();
            let value = 0u128;
            let output = if _encode_reply {
                let message_id = sails_rs::alloy_primitives::B256::new(
                    self.message_id.into_bytes(),
                );
                sails_rs::alloy_sol_types::SolValue::abi_encode_sequence(
                    &(message_id, result),
                )
            } else {
                sails_rs::alloy_sol_types::SolValue::abi_encode_sequence(&(result,))
            };
            return Some((output, value, _encode_reply));
        }
        None
    }
    pub fn emit_event(&mut self, event: MyEvents) -> sails_rs::errors::Result<()> {
        #[cfg(not(target_arch = "wasm32"))]
        { Self::__emit_event(&mut self.inner, event) }
        #[cfg(target_arch = "wasm32")]
        { sails_rs::gstd::__emit_event_with_route(self.route, event) }
    }
    fn emit_eth_event(&mut self, event: MyEvents) -> sails_rs::errors::Result<()> {
        #[cfg(not(target_arch = "wasm32"))]
        { Self::__emit_event(&mut self.inner, event) }
        #[cfg(target_arch = "wasm32")] { sails_rs::gstd::__emit_eth_event(event) }
    }
}
impl sails_rs::gstd::services::Service for MyServiceWithEvents {
    type Exposure = MyServiceWithEventsExposure<Self>;
    type BaseExposures = ();
    fn expose(
        self,
        message_id: sails_rs::MessageId,
        route: &'static [u8],
    ) -> Self::Exposure {
        #[cfg(not(target_arch = "wasm32"))]
        let inner_box = sails_rs::Box::new(self);
        #[cfg(not(target_arch = "wasm32"))]
        let inner = inner_box.as_ref();
        #[cfg(target_arch = "wasm32")]
        let inner = &self;
        Self::Exposure {
            message_id,
            route,
            base: (),
            #[cfg(not(target_arch = "wasm32"))]
            inner_ptr: inner_box.as_ref() as *const Self,
            #[cfg(not(target_arch = "wasm32"))]
            inner: inner_box,
            #[cfg(target_arch = "wasm32")]
            inner: self,
        }
    }
}
impl sails_rs::meta::ServiceMeta for MyServiceWithEvents {
    type CommandsMeta = my_service_with_events_meta::CommandsMeta;
    type QueriesMeta = my_service_with_events_meta::QueriesMeta;
    type EventsMeta = my_service_with_events_meta::EventsMeta;
    const BASE_SERVICES: &'static [sails_rs::meta::AnyServiceMetaFn] = &[];
}
mod my_service_with_events_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __DoThisParams {}
    impl sails_rs::gstd::InvocationIo for __DoThisParams {
        const ROUTE: &'static [u8] = &[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8];
        type Params = Self;
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __ThisParams {}
    impl sails_rs::gstd::InvocationIo for __ThisParams {
        const ROUTE: &'static [u8] = &[16u8, 84u8, 104u8, 105u8, 115u8];
        type Params = Self;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {
        This(__ThisParams, bool),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = MyEvents;
}
impl sails_rs::solidity::ServiceSignature for MyServiceWithEvents {
    const METHODS: &'static [sails_rs::solidity::MethodExpo] = &[
        (
            &[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8] as &[u8],
            "DoThis",
            <<(
                u128,
                bool,
            ) as sails_rs::alloy_sol_types::SolValue>::SolType as sails_rs::alloy_sol_types::SolType>::SOL_NAME,
            <<(
                sails_rs::alloy_primitives::B256,
                u32,
            ) as sails_rs::alloy_sol_types::SolValue>::SolType as sails_rs::alloy_sol_types::SolType>::SOL_NAME,
        ),
        (
            &[16u8, 84u8, 104u8, 105u8, 115u8] as &[u8],
            "This",
            <<(
                u128,
                bool,
            ) as sails_rs::alloy_sol_types::SolValue>::SolType as sails_rs::alloy_sol_types::SolType>::SOL_NAME,
            <<(
                sails_rs::alloy_primitives::B256,
                bool,
            ) as sails_rs::alloy_sol_types::SolValue>::SolType as sails_rs::alloy_sol_types::SolType>::SOL_NAME,
        ),
    ];
}
impl MyServiceWithEvents {
    fn emit_event(&mut self, event: MyEvents) -> sails_rs::errors::Result<()> {
        #[cfg(not(target_arch = "wasm32"))]
        { MyServiceWithEventsExposure::<Self>::__emit_event(self, event) }
        #[cfg(target_arch = "wasm32")] { sails_rs::gstd::__emit_event(event) }
    }
}
impl MyServiceWithEvents {
    fn emit_eth_event(&mut self, event: MyEvents) -> sails_rs::errors::Result<()> {
        #[cfg(not(target_arch = "wasm32"))]
        { MyServiceWithEventsExposure::<Self>::__emit_event(self, event) }
        #[cfg(target_arch = "wasm32")] { sails_rs::gstd::__emit_eth_event(event) }
    }
}
#[cfg(not(target_arch = "wasm32"))]
const _: () = {
    type ServiceEventsMap = sails_rs::collections::BTreeMap<
        usize,
        sails_rs::Vec<MyEvents>,
    >;
    type Mutex<T> = sails_rs::spin::Mutex<T>;
    impl<T: sails_rs::gstd::services::Service> MyServiceWithEventsExposure<T> {
        pub fn take_events(&mut self) -> sails_rs::Vec<MyEvents> {
            if core::mem::size_of_val(self.inner.as_ref()) == 0 {
                panic!(
                    "setting event listener on a zero-sized service is not supported for now"
                );
            }
            let service_ptr = self.inner_ptr as usize;
            let mut map = Self::events_map();
            map.remove(&service_ptr).unwrap_or_default()
        }
        fn __emit_event(svc: &mut T, event: MyEvents) -> sails_rs::errors::Result<()> {
            let service_ptr = svc as *const _ as *const () as usize;
            let mut map = Self::events_map();
            map.entry(service_ptr).or_default().push(event);
            Ok(())
        }
        fn events_map() -> impl core::ops::DerefMut<Target = ServiceEventsMap> {
            static MAP: Mutex<ServiceEventsMap> = Mutex::new(ServiceEventsMap::new());
            MAP.lock()
        }
    }
    impl<T: sails_rs::gstd::services::Service> Drop for MyServiceWithEventsExposure<T> {
        fn drop(&mut self) {
            let service_ptr = self.inner_ptr as usize;
            let mut map = Self::events_map();
            _ = map.remove(&service_ptr);
        }
    }
};

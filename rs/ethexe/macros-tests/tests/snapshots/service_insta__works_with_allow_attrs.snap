---
source: macros-tests/tests/service_insta.rs
expression: result
---
#[allow(warnings)]
#[allow(clippy::all)]
impl SomeService {
    #[allow(unused)]
    pub async fn do_this(&mut self, p1: u32, p2: String) -> u32 {
        p1
    }
    pub fn this(&self, p1: bool) -> bool {
        p1
    }
}
pub struct SomeServiceExposure<T: sails_rs::gstd::services::Service> {
    message_id: sails_rs::MessageId,
    route: &'static [u8],
    #[cfg(not(target_arch = "wasm32"))]
    inner: sails_rs::Box<T>,
    #[cfg(not(target_arch = "wasm32"))]
    inner_ptr: *const T,
    #[cfg(target_arch = "wasm32")]
    inner: T,
    base: T::BaseExposures,
}
impl<T: sails_rs::gstd::services::Service> sails_rs::gstd::services::Exposure
for SomeServiceExposure<T> {
    fn message_id(&self) -> sails_rs::MessageId {
        self.message_id
    }
    fn route(&self) -> &'static [u8] {
        self.route
    }
}
#[allow(warnings)]
#[allow(clippy::all)]
impl SomeServiceExposure<SomeService> {
    #[allow(unused)]
    pub async fn do_this(&mut self, p1: u32, p2: String) -> u32 {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.do_this(p1, p2).await
    }
    pub fn this(&self, p1: bool) -> bool {
        let exposure_scope = sails_rs::gstd::services::ExposureCallScope::new(self);
        self.inner.this(p1)
    }
    pub fn try_handle(
        &mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::Exposure;
        if let Ok(request) = some_service_meta::__ThisParams::decode_params(input) {
            let result = self.this(request.p1);
            let value = 0u128;
            some_service_meta::__ThisParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        None
    }
    pub async fn try_handle_async(
        &mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::Exposure;
        if let Ok(request) = some_service_meta::__DoThisParams::decode_params(input) {
            let result = self.do_this(request.p1, request.p2).await;
            let value = 0u128;
            some_service_meta::__DoThisParams::with_optimized_encode(
                &result,
                self.route().as_ref(),
                |encoded_result| result_handler(encoded_result, value),
            );
            return Some(());
        }
        None
    }
    pub fn try_handle_solidity(
        &mut self,
        method: &[u8],
        input: &[u8],
    ) -> Option<(sails_rs::Vec<u8>, u128, bool)> {
        if method == &[16u8, 84u8, 104u8, 105u8, 115u8] {
            let (_, _encode_reply, p1): (u128, bool, bool) = sails_rs::alloy_sol_types::SolValue::abi_decode_params(
                    input,
                    false,
                )
                .ok()?;
            let result = self.this(p1);
            let value = 0u128;
            let output = if _encode_reply {
                let message_id = sails_rs::alloy_primitives::B256::new(
                    self.message_id.into_bytes(),
                );
                sails_rs::alloy_sol_types::SolValue::abi_encode_sequence(
                    &(message_id, result),
                )
            } else {
                sails_rs::alloy_sol_types::SolValue::abi_encode_sequence(&(result,))
            };
            return Some((output, value, _encode_reply));
        }
        None
    }
    pub async fn try_handle_solidity_async(
        &mut self,
        method: &[u8],
        input: &[u8],
    ) -> Option<(sails_rs::Vec<u8>, u128, bool)> {
        if method == &[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8] {
            let (_, _encode_reply, p1, p2): (u128, bool, u32, String) = sails_rs::alloy_sol_types::SolValue::abi_decode_params(
                    input,
                    false,
                )
                .ok()?;
            let result = self.do_this(p1, p2).await;
            let value = 0u128;
            let output = if _encode_reply {
                let message_id = sails_rs::alloy_primitives::B256::new(
                    self.message_id.into_bytes(),
                );
                sails_rs::alloy_sol_types::SolValue::abi_encode_sequence(
                    &(message_id, result),
                )
            } else {
                sails_rs::alloy_sol_types::SolValue::abi_encode_sequence(&(result,))
            };
            return Some((output, value, _encode_reply));
        }
        None
    }
    pub fn check_asyncness(&self, input: &[u8]) -> Option<bool> {
        use sails_rs::gstd::InvocationIo;
        if some_service_meta::__DoThisParams::check_route(input).is_ok() {
            return Some(some_service_meta::__DoThisParams::ASYNC);
        }
        if some_service_meta::__ThisParams::check_route(input).is_ok() {
            return Some(some_service_meta::__ThisParams::ASYNC);
        }
        None
    }
}
impl sails_rs::gstd::services::Service for SomeService {
    type Exposure = SomeServiceExposure<Self>;
    type BaseExposures = ();
    fn expose(
        self,
        message_id: sails_rs::MessageId,
        route: &'static [u8],
    ) -> Self::Exposure {
        #[cfg(not(target_arch = "wasm32"))]
        let inner_box = sails_rs::Box::new(self);
        #[cfg(not(target_arch = "wasm32"))]
        let inner = inner_box.as_ref();
        #[cfg(target_arch = "wasm32")]
        let inner = &self;
        Self::Exposure {
            message_id,
            route,
            base: (),
            #[cfg(not(target_arch = "wasm32"))]
            inner_ptr: inner_box.as_ref() as *const Self,
            #[cfg(not(target_arch = "wasm32"))]
            inner: inner_box,
            #[cfg(target_arch = "wasm32")]
            inner: self,
        }
    }
}
impl sails_rs::meta::ServiceMeta for SomeService {
    type CommandsMeta = some_service_meta::CommandsMeta;
    type QueriesMeta = some_service_meta::QueriesMeta;
    type EventsMeta = some_service_meta::EventsMeta;
    const BASE_SERVICES: &'static [sails_rs::meta::AnyServiceMetaFn] = &[];
    const ASYNC: bool = some_service_meta::CommandsMeta::ASYNC
        || some_service_meta::QueriesMeta::ASYNC;
}
mod some_service_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    use sails_rs::gstd::InvocationIo;
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __DoThisParams {
        pub(super) p1: u32,
        pub(super) p2: String,
    }
    impl InvocationIo for __DoThisParams {
        const ROUTE: &'static [u8] = &[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8];
        type Params = Self;
        const ASYNC: bool = true;
    }
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __ThisParams {
        pub(super) p1: bool,
    }
    impl InvocationIo for __ThisParams {
        const ROUTE: &'static [u8] = &[16u8, 84u8, 104u8, 105u8, 115u8];
        type Params = Self;
        const ASYNC: bool = false;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    impl CommandsMeta {
        pub const ASYNC: bool = __DoThisParams::ASYNC;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {
        This(__ThisParams, bool),
    }
    impl QueriesMeta {
        pub const ASYNC: bool = __ThisParams::ASYNC;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = NoEvents;
}
impl sails_rs::solidity::ServiceSignature for SomeService {
    const METHODS: &'static [sails_rs::solidity::MethodExpo] = &[
        (
            &[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8] as &[u8],
            "DoThis",
            <<(
                u128,
                bool,
                u32,
                String,
            ) as sails_rs::alloy_sol_types::SolValue>::SolType as sails_rs::alloy_sol_types::SolType>::SOL_NAME,
            <<(
                sails_rs::alloy_primitives::B256,
                u32,
            ) as sails_rs::alloy_sol_types::SolValue>::SolType as sails_rs::alloy_sol_types::SolType>::SOL_NAME,
        ),
        (
            &[16u8, 84u8, 104u8, 105u8, 115u8] as &[u8],
            "This",
            <<(
                u128,
                bool,
                bool,
            ) as sails_rs::alloy_sol_types::SolValue>::SolType as sails_rs::alloy_sol_types::SolType>::SOL_NAME,
            <<(
                sails_rs::alloy_primitives::B256,
                bool,
            ) as sails_rs::alloy_sol_types::SolValue>::SolType as sails_rs::alloy_sol_types::SolType>::SOL_NAME,
        ),
    ];
}

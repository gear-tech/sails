---
source: macros-tests/tests/service_insta.rs
expression: result
---
pub struct SomeServiceExposure<T> {
    route: &'static [u8],
    inner: T,
}
impl<T: sails_rs::meta::ServiceMeta> sails_rs::gstd::services::Exposure
for SomeServiceExposure<T> {
    fn route(&self) -> &'static [u8] {
        self.route
    }
    fn check_asyncness(input: &[u8]) -> Option<bool> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::{Service, Exposure};
        if !T::ASYNC {
            return Some(false);
        }
        if let Ok(is_async) = some_service_meta::__DoThisParams::check_asyncness(input) {
            return Some(is_async);
        }
        if let Some(is_async) = <<ExtendedService1 as Service>::Exposure as Exposure>::check_asyncness(
            input,
        ) {
            return Some(is_async);
        }
        if let Some(is_async) = <<ExtendedService2 as Service>::Exposure as Exposure>::check_asyncness(
            input,
        ) {
            return Some(is_async);
        }
        None
    }
}
impl<T> core::ops::Deref for SomeServiceExposure<T> {
    type Target = T;
    fn deref(&self) -> &Self::Target {
        &self.inner
    }
}
impl<T> core::ops::DerefMut for SomeServiceExposure<T> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.inner
    }
}
#[allow(clippy::from_over_into)]
impl Into<ExtendedService1> for SomeServiceExposure<SomeService> {
    fn into(self) -> ExtendedService1 {
        let base_services: (ExtendedService1, ExtendedService2) = self.inner.into();
        base_services.0
    }
}
#[allow(clippy::from_over_into)]
impl Into<ExtendedService2> for SomeServiceExposure<SomeService> {
    fn into(self) -> ExtendedService2 {
        let base_services: (ExtendedService1, ExtendedService2) = self.inner.into();
        base_services.1
    }
}
impl SomeServiceExposure<SomeService> {
    #[export]
    pub fn do_this(&mut self) -> u32 {
        42
    }
    pub fn check_asyncness(&self, input: &[u8]) -> Option<bool> {
        <Self as sails_rs::gstd::services::Exposure>::check_asyncness(input)
    }
    pub fn try_handle(
        mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::{Service, Exposure};
        if let Ok(request) = some_service_meta::__DoThisParams::decode_params(input) {
            let result = self.do_this();
            let value = 0u128;
            if !some_service_meta::__DoThisParams::is_empty_tuple::<u32>() {
                some_service_meta::__DoThisParams::with_optimized_encode(
                    &result,
                    self.route().as_ref(),
                    |encoded_result| result_handler(encoded_result, value),
                );
            }
            return Some(());
        }
        let base_services: (ExtendedService1, ExtendedService2) = self.inner.into();
        if base_services.0.expose(self.route).try_handle(input, result_handler).is_some()
        {
            return Some(());
        }
        if base_services.1.expose(self.route).try_handle(input, result_handler).is_some()
        {
            return Some(());
        }
        None
    }
    pub async fn try_handle_async(
        mut self,
        input: &[u8],
        result_handler: fn(&[u8], u128),
    ) -> Option<()> {
        use sails_rs::gstd::InvocationIo;
        use sails_rs::gstd::services::{Service, Exposure};
        let base_services: (ExtendedService1, ExtendedService2) = self.inner.into();
        if base_services
            .0
            .expose(self.route)
            .try_handle_async(input, result_handler)
            .await
            .is_some()
        {
            return Some(());
        }
        if base_services
            .1
            .expose(self.route)
            .try_handle_async(input, result_handler)
            .await
            .is_some()
        {
            return Some(());
        }
        None
    }
    pub fn try_handle_solidity(
        mut self,
        method: &[u8],
        input: &[u8],
    ) -> Option<(sails_rs::Vec<u8>, u128, bool)> {
        use sails_rs::gstd::services::{Service, Exposure};
        if method == &[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8] {
            let (_, _encode_reply): (u128, bool) = sails_rs::alloy_sol_types::SolValue::abi_decode_params(
                    input,
                    false,
                )
                .ok()?;
            let result = self.do_this();
            let value = 0u128;
            let output = if _encode_reply {
                let message_id = sails_rs::alloy_primitives::B256::new(
                    sails_rs::gstd::Syscall::message_id().into_bytes(),
                );
                sails_rs::alloy_sol_types::SolValue::abi_encode_sequence(
                    &(message_id, result),
                )
            } else {
                sails_rs::alloy_sol_types::SolValue::abi_encode_sequence(&(result,))
            };
            return Some((output, value, _encode_reply));
        }
        let base_services: (ExtendedService1, ExtendedService2) = self.inner.into();
        if let Some(result) = base_services
            .0
            .expose(self.route)
            .try_handle_solidity(method, input)
        {
            return Some(result);
        }
        if let Some(result) = base_services
            .1
            .expose(self.route)
            .try_handle_solidity(method, input)
        {
            return Some(result);
        }
        None
    }
    pub async fn try_handle_solidity_async(
        mut self,
        method: &[u8],
        input: &[u8],
    ) -> Option<(sails_rs::Vec<u8>, u128, bool)> {
        use sails_rs::gstd::services::{Service, Exposure};
        let base_services: (ExtendedService1, ExtendedService2) = self.inner.into();
        if let Some(result) = base_services
            .0
            .expose(self.route)
            .try_handle_solidity_async(method, input)
            .await
        {
            return Some(result);
        }
        if let Some(result) = base_services
            .1
            .expose(self.route)
            .try_handle_solidity_async(method, input)
            .await
        {
            return Some(result);
        }
        None
    }
}
impl sails_rs::gstd::services::Service for SomeService {
    type Exposure = SomeServiceExposure<Self>;
    fn expose(self, route: &'static [u8]) -> Self::Exposure {
        Self::Exposure {
            route,
            inner: self,
        }
    }
}
impl sails_rs::meta::ServiceMeta for SomeService {
    type CommandsMeta = some_service_meta::CommandsMeta;
    type QueriesMeta = some_service_meta::QueriesMeta;
    type EventsMeta = some_service_meta::EventsMeta;
    const BASE_SERVICES: &'static [sails_rs::meta::AnyServiceMetaFn] = &[
        sails_rs::meta::AnyServiceMeta::new::<ExtendedService1>,
        sails_rs::meta::AnyServiceMeta::new::<ExtendedService2>,
    ];
    const ASYNC: bool = <ExtendedService1 as sails_rs::meta::ServiceMeta>::ASYNC
        || <ExtendedService2 as sails_rs::meta::ServiceMeta>::ASYNC;
}
mod some_service_meta {
    use super::*;
    use sails_rs::{Decode, TypeInfo};
    use sails_rs::gstd::InvocationIo;
    #[derive(Decode, TypeInfo)]
    #[codec(crate = sails_rs::scale_codec)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub struct __DoThisParams {}
    impl InvocationIo for __DoThisParams {
        const ROUTE: &'static [u8] = &[24u8, 68u8, 111u8, 84u8, 104u8, 105u8, 115u8];
        type Params = Self;
        const ASYNC: bool = false;
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum CommandsMeta {
        DoThis(__DoThisParams, u32),
    }
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum QueriesMeta {}
    #[derive(TypeInfo)]
    #[scale_info(crate = sails_rs::scale_info)]
    pub enum NoEvents {}
    pub type EventsMeta = NoEvents;
}
impl sails_rs::solidity::ServiceSignature for SomeService {
    const METHODS: &'static [sails_rs::solidity::MethodExpo] = sails_rs::const_concat_slices!(
        < sails_rs::solidity::MethodExpo >, & [(& [24u8, 68u8, 111u8, 84u8, 104u8, 105u8,
        115u8] as & [u8], "DoThis", << (u128, bool,) as
        sails_rs::alloy_sol_types::SolValue > ::SolType as
        sails_rs::alloy_sol_types::SolType > ::SOL_NAME, <<
        (sails_rs::alloy_primitives::B256, u32) as sails_rs::alloy_sol_types::SolValue >
        ::SolType as sails_rs::alloy_sol_types::SolType > ::SOL_NAME,),], <
        ExtendedService1 as sails_rs::solidity::ServiceSignature > ::METHODS, <
        ExtendedService2 as sails_rs::solidity::ServiceSignature > ::METHODS
    );
}

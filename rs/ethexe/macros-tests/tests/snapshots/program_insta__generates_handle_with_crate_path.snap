---
source: macros-tests/tests/program_insta.rs
expression: result
---
impl MyProgram {
    pub fn default() -> Self {
        Self
    }
}
impl sails_rename::meta::ProgramMeta for MyProgram {
    type ConstructorsMeta = meta_in_program::ConstructorsMeta;
    const SERVICES: &'static [(&'static str, sails_rename::meta::AnyServiceMetaFn)] = &[];
}
mod meta_in_program {
    use super::*;
    #[derive(sails_rename::Decode, sails_rename::TypeInfo)]
    #[codec(crate = sails_rename::scale_codec)]
    #[scale_info(crate = sails_rename::scale_info)]
    pub struct __DefaultParams {}
    impl sails_rename::gstd::InvocationIo for __DefaultParams {
        const ROUTE: &'static [u8] = &[
            28u8,
            68u8,
            101u8,
            102u8,
            97u8,
            117u8,
            108u8,
            116u8,
        ];
        type Params = Self;
    }
    #[derive(sails_rename::TypeInfo)]
    #[scale_info(crate = sails_rename::scale_info)]
    pub enum ConstructorsMeta {
        Default(__DefaultParams),
    }
}
impl sails_rename::solidity::ProgramSignature for MyProgram {
    const CTORS: &'static [sails_rename::solidity::MethodRoute] = &[
        (
            sails_rename::concatcp!(
                "default", << (u128,) as sails_rename::alloy_sol_types::SolValue >
                ::SolType as sails_rename::alloy_sol_types::SolType > ::SOL_NAME,
            ),
            &[28u8, 68u8, 101u8, 102u8, 97u8, 117u8, 108u8, 116u8] as &[u8],
        ),
    ];
    const SERVICES: &'static [(
        &'static str,
        &'static [u8],
        &'static [sails_rename::solidity::MethodRoute],
    )] = &[];
    const METHODS_LEN: usize = 0;
}
const __CTOR_SIGS: [[u8; 4]; <MyProgram as sails_rename::solidity::ProgramSignature>::CTORS
    .len()] = sails_rename::solidity::ConstProgramMeta::<MyProgram>::ctor_sigs();
const __METHOD_SIGS: [[u8; 4]; <MyProgram as sails_rename::solidity::ProgramSignature>::METHODS_LEN] = sails_rename::solidity::ConstProgramMeta::<
    MyProgram,
>::method_sigs();
const __METHOD_ROUTES: [(
    &'static [u8],
    &'static [u8],
); <MyProgram as sails_rename::solidity::ProgramSignature>::METHODS_LEN] = sails_rename::solidity::ConstProgramMeta::<
    MyProgram,
>::method_routes();
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rename::{gstd, hex, prelude::*};
    static mut PROGRAM: Option<MyProgram> = None;
    #[gstd::async_init]
    async fn init() {
        use sails_rename::gstd::InvocationIo;
        let mut input: &[u8] = &sails_rename::gstd::msg::load_bytes()
            .expect("Failed to read input");
        if let Ok(sig) = TryInto::<[u8; 4]>::try_into(&input[..4]) {
            if let Some(idx) = __CTOR_SIGS.iter().position(|s| s == &sig) {
                let (_, ctor_route) = <MyProgram as sails_rename::solidity::ProgramSignature>::CTORS[idx];
                unsafe {
                    PROGRAM = match_ctor_solidity(ctor_route, &input[4..]).await;
                }
                if unsafe { PROGRAM.is_some() } {
                    sails_rename::gstd::msg::reply_bytes(ctor_route, 0)
                        .expect("Failed to send output");
                    return;
                }
            }
        }
        let (program, invocation_route) = if let Ok(request) = meta_in_program::__DefaultParams::decode_params(
            input,
        ) {
            let program = MyProgram::default();
            (program, meta_in_program::__DefaultParams::ROUTE)
        } else {
            sails_rename::gstd::unknown_input_panic("Unexpected ctor", input)
        };
        unsafe {
            PROGRAM = Some(program);
        }
        sails_rename::gstd::msg::reply_bytes(invocation_route, 0)
            .expect("Failed to send output");
    }
    async fn match_ctor_solidity(ctor: &[u8], input: &[u8]) -> Option<MyProgram> {
        if ctor == &[28u8, 68u8, 101u8, 102u8, 97u8, 117u8, 108u8, 116u8] {
            let (): () = sails_rename::alloy_sol_types::SolValue::abi_decode_params(
                    input,
                    false,
                )
                .expect("Failed to decode request");
            let program = MyProgram::default();
            return Some(program);
        }
        None
    }
    #[gstd::async_main]
    async fn main() {
        let mut input: &[u8] = &sails_rename::gstd::msg::load_bytes()
            .expect("Failed to read input");
        let program_ref = unsafe { PROGRAM.as_ref() }.expect("Program not initialized");
        if let Ok(sig) = TryInto::<[u8; 4]>::try_into(&input[..4]) {
            if let Some(idx) = __METHOD_SIGS.iter().position(|s| s == &sig) {
                let (route, method) = __METHOD_ROUTES[idx];
            }
        }
        let (output, value): (Vec<u8>, ValueUnit) = {
            sails_rename::gstd::unknown_input_panic("Unexpected service", input)
        };
        sails_rename::gstd::msg::reply_bytes(output, value)
            .expect("Failed to send output");
    }
}

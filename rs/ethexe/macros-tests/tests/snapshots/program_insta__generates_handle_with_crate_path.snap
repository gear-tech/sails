---
source: macros-tests/tests/program_insta.rs
expression: result
---
impl MyProgram {
    pub fn create() -> Self {
        Self
    }
}
impl sails_rename::meta::ProgramMeta for MyProgram {
    type ConstructorsMeta = meta_in_program::ConstructorsMeta;
    const SERVICES: &'static [(&'static str, sails_rename::meta::AnyServiceMetaFn)] = &[];
    const ASYNC: bool = false;
}
mod meta_in_program {
    use super::*;
    use sails_rename::gstd::InvocationIo;
    #[derive(sails_rename::Decode, sails_rename::TypeInfo)]
    #[codec(crate = sails_rename::scale_codec)]
    #[scale_info(crate = sails_rename::scale_info)]
    pub struct __CreateParams {}
    impl InvocationIo for __CreateParams {
        const ROUTE: &'static [u8] = &[24u8, 67u8, 114u8, 101u8, 97u8, 116u8, 101u8];
        type Params = Self;
        const ASYNC: bool = false;
    }
    #[derive(sails_rename::TypeInfo)]
    #[scale_info(crate = sails_rename::scale_info)]
    pub enum ConstructorsMeta {
        Create(__CreateParams),
    }
}
impl sails_rename::solidity::ProgramSignature for MyProgram {
    const CTORS: &'static [sails_rename::solidity::MethodExpo] = &[
        (
            &[24u8, 67u8, 114u8, 101u8, 97u8, 116u8, 101u8] as &[u8],
            "create",
            <<(
                u128,
                bool,
            ) as sails_rename::alloy_sol_types::SolValue>::SolType as sails_rename::alloy_sol_types::SolType>::SOL_NAME,
            <<(
                sails_rename::alloy_primitives::B256,
            ) as sails_rename::alloy_sol_types::SolValue>::SolType as sails_rename::alloy_sol_types::SolType>::SOL_NAME,
        ),
    ];
    const SERVICES: &'static [sails_rename::solidity::ServiceExpo] = &[];
    const METHODS_LEN: usize = 0;
}
const __CTOR_SIGS: [[u8; 4]; <MyProgram as sails_rename::solidity::ProgramSignature>::CTORS
    .len()] = sails_rename::solidity::ConstProgramMeta::<MyProgram>::ctor_sigs();
const __CTOR_CALLBACK_SIGS: [[u8; 4]; <MyProgram as sails_rename::solidity::ProgramSignature>::CTORS
    .len()] = sails_rename::solidity::ConstProgramMeta::<
    MyProgram,
>::ctor_callback_sigs();
const __METHOD_SIGS: [[u8; 4]; <MyProgram as sails_rename::solidity::ProgramSignature>::METHODS_LEN] = sails_rename::solidity::ConstProgramMeta::<
    MyProgram,
>::method_sigs();
const __METHOD_ROUTES: [(
    &'static [u8],
    &'static [u8],
); <MyProgram as sails_rename::solidity::ProgramSignature>::METHODS_LEN] = sails_rename::solidity::ConstProgramMeta::<
    MyProgram,
>::method_routes();
const __CALLBACK_SIGS: [[u8; 4]; <MyProgram as sails_rename::solidity::ProgramSignature>::METHODS_LEN] = sails_rename::solidity::ConstProgramMeta::<
    MyProgram,
>::callback_sigs();
#[cfg(target_arch = "wasm32")]
pub mod wasm {
    use super::*;
    use sails_rename::{gstd, hex, prelude::*};
    static mut PROGRAM: Option<MyProgram> = None;
    #[unsafe(no_mangle)]
    extern "C" fn init() {
        use gstd::InvocationIo;
        let mut input: &[u8] = &gstd::msg::load_bytes().expect("Failed to read input");
        if let Ok(sig) = TryInto::<[u8; 4]>::try_into(&input[..4]) {
            if let Some(idx) = __CTOR_SIGS.iter().position(|s| s == &sig) {
                let (ctor_route, ..) = <MyProgram as sails_rename::solidity::ProgramSignature>::CTORS[idx];
                if let Some(encode_reply) = match_ctor_solidity(
                    ctor_route,
                    &input[4..],
                ) {
                    let output = if encode_reply {
                        [
                            __CTOR_CALLBACK_SIGS[idx].as_slice(),
                            gstd::msg::id().into_bytes().as_slice(),
                        ]
                            .concat()
                    } else {
                        Vec::with_capacity(0)
                    };
                    gstd::msg::reply_bytes(output, 0).expect("Failed to send output");
                    return;
                }
            }
        }
        let invocation_route = if let Ok(request) = meta_in_program::__CreateParams::decode_params(
            input,
        ) {
            let program = MyProgram::create();
            unsafe {
                PROGRAM = Some(program);
            }
            meta_in_program::__CreateParams::ROUTE
        } else {
            gstd::unknown_input_panic("Unexpected ctor", input)
        };
        gstd::msg::reply_bytes(invocation_route, 0).expect("Failed to send output");
    }
    fn match_ctor_solidity(ctor: &[u8], input: &[u8]) -> Option<bool> {
        if ctor == &[24u8, 67u8, 114u8, 101u8, 97u8, 116u8, 101u8] {
            let (_, _encode_reply): (u128, bool) = sails_rename::alloy_sol_types::SolValue::abi_decode_params(
                    input,
                    false,
                )
                .expect("Failed to decode request");
            let program = MyProgram::create();
            unsafe { PROGRAM = Some(program) };
            return Some(_encode_reply);
        }
        None
    }
    #[unsafe(no_mangle)]
    extern "C" fn handle() {
        let mut input = gstd::msg::load_bytes().expect("Failed to read input");
        let program_ref = unsafe { PROGRAM.as_mut() }.expect("Program not initialized");
        if let Ok(sig) = TryInto::<[u8; 4]>::try_into(&input[..4]) {
            if let Some(idx) = __METHOD_SIGS.iter().position(|s| s == &sig) {
                let (route, method) = __METHOD_ROUTES[idx];
            }
        }
        { gstd::unknown_input_panic("Unexpected service", &input) };
    }
    #[unsafe(no_mangle)]
    extern "C" fn handle_reply() {
        use sails_rename::meta::ProgramMeta;
        if MyProgram::ASYNC {
            gstd::handle_reply_with_hook();
        }
    }
}

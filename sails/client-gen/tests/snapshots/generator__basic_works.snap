---
source: sails/client-gen/tests/generator.rs
expression: "gen(idl, \"Basic\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails::collections::BTreeMap;
#[allow(unused_imports)]
use sails::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
#[derive(Clone)]
pub struct Basic<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<A: Default, R: Remoting<A>> Basic<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R, A> traits::Basic<A> for Basic<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<A, u16> {
        RemotingAction::new(self.remoting.clone(), basic::io::DoThis(p1, p2))
    }
    fn do_that(&mut self, p1: (u8, u32)) -> impl Call<A, u8> {
        RemotingAction::new(self.remoting.clone(), basic::io::DoThat(p1))
    }
}
pub mod basic {
    use super::*;
    pub mod io {
        use super::*;
        use sails::calls::ActionIo;
        #[derive(Debug, Encode)]
        #[codec(crate = sails::scale_codec)]
        pub struct DoThis(pub(crate) u32, pub(crate) super::MyParam);
        impl DoThis {
            #[allow(dead_code)]
            pub fn encode_call(p1: u32, p2: super::MyParam) -> Vec<u8> {
                let call = DoThis(p1, p2);
                call.encode_call()
            }
        }
        impl ActionIo for DoThis {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 105, 115];
            type Reply = u16;
        }
        #[derive(Debug, Encode)]
        #[codec(crate = sails::scale_codec)]
        pub struct DoThat(pub(crate) (u8, u32));
        impl DoThat {
            #[allow(dead_code)]
            pub fn encode_call(p1: (u8, u32)) -> Vec<u8> {
                let call = DoThat(p1);
                call.encode_call()
            }
        }
        impl ActionIo for DoThat {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 97, 116];
            type Reply = u8;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails::scale_codec)]
pub struct MyParam {
    pub f1: u32,
    pub f2: Vec<String>,
    pub f3: Option<(u8, u32)>,
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails::scale_codec)]
pub enum MyParam2 {
    Variant1,
    Variant2(u32),
    Variant3((u32,)),
    Variant4((u8, u32)),
    Variant5 { f1: String, f2: Vec<u8> },
}
pub mod traits {
    use super::*;
    pub trait Basic<A> {
        #[allow(clippy::type_complexity)]
        fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<A, u16>;
        #[allow(clippy::type_complexity)]
        fn do_that(&mut self, p1: (u8, u32)) -> impl Call<A, u8>;
    }
}

---
source: sails/client-gen/tests/generator.rs
expression: "gen(idl, \"RmrkCatalog\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails::collections::BTreeMap;
#[allow(unused_imports)]
use sails::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct RmrkCatalogFactory<R, A> {
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<R: Remoting<A>, A> RmrkCatalogFactory<R, A> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R: Remoting<A> + Clone, A: Default> traits::RmrkCatalogFactory<A>
    for RmrkCatalogFactory<R, A>
{
    fn new(&self) -> impl Activation<A> {
        RemotingAction::new(self.remoting.clone(), rmrk_catalog_factory::io::New())
    }
}
pub mod rmrk_catalog_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails::calls::EncodeDecodeWithRoute;
        #[derive(Debug, Encode)]
        #[codec(crate = sails::scale_codec)]
        pub struct New();
        impl New {
            pub fn encode_call() -> Vec<u8> {
                let call = New();
                call.encode_call()
            }
        }
        impl EncodeDecodeWithRoute for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Reply = ();
        }
    }
}
#[derive(Clone)]
pub struct RmrkCatalog<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<A: Default, R: Remoting<A>> RmrkCatalog<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R, A> traits::RmrkCatalog<A> for RmrkCatalog<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn add_equippables(
        &mut self,
        part_id: u32,
        collection_ids: Vec<ActorId>,
    ) -> impl Call<A, Result<(u32, Vec<ActorId>), Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            rmrk_catalog::io::AddEquippables(part_id, collection_ids),
        )
    }
    fn add_parts(
        &mut self,
        parts: BTreeMap<u32, Part>,
    ) -> impl Call<A, Result<BTreeMap<u32, Part>, Error>> {
        RemotingAction::new(self.remoting.clone(), rmrk_catalog::io::AddParts(parts))
    }
    fn remove_equippable(
        &mut self,
        part_id: u32,
        collection_id: ActorId,
    ) -> impl Call<A, Result<(u32, ActorId), Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            rmrk_catalog::io::RemoveEquippable(part_id, collection_id),
        )
    }
    fn remove_parts(&mut self, part_ids: Vec<u32>) -> impl Call<A, Result<Vec<u32>, Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            rmrk_catalog::io::RemoveParts(part_ids),
        )
    }
    fn reset_equippables(&mut self, part_id: u32) -> impl Call<A, Result<(), Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            rmrk_catalog::io::ResetEquippables(part_id),
        )
    }
    fn set_equippables_to_all(&mut self, part_id: u32) -> impl Call<A, Result<(), Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            rmrk_catalog::io::SetEquippablesToAll(part_id),
        )
    }
    fn equippable(
        &self,
        part_id: u32,
        collection_id: ActorId,
    ) -> impl Query<A, Result<bool, Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            rmrk_catalog::io::Equippable(part_id, collection_id),
        )
    }
    fn part(&self, part_id: u32) -> impl Query<A, Option<Part>> {
        RemotingAction::new(self.remoting.clone(), rmrk_catalog::io::Part(part_id))
    }
}
pub mod rmrk_catalog {
    use super::*;
    pub mod io {
        use super::*;
        use sails::calls::EncodeDecodeWithRoute;
        #[derive(Debug, Encode)]
        #[codec(crate = sails::scale_codec)]
        pub struct AddEquippables(pub(crate) u32, pub(crate) Vec<ActorId>);
        impl AddEquippables {
            pub fn encode_call(part_id: u32, collection_ids: Vec<ActorId>) -> Vec<u8> {
                let call = AddEquippables(part_id, collection_ids);
                call.encode_call()
            }
        }
        impl EncodeDecodeWithRoute for AddEquippables {
            const ROUTE: &'static [u8] = &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 56, 65, 100, 100, 69, 113,
                117, 105, 112, 112, 97, 98, 108, 101, 115,
            ];
            type Reply = Result<(u32, Vec<ActorId>), super::Error>;
        }
        #[derive(Debug, Encode)]
        #[codec(crate = sails::scale_codec)]
        pub struct AddParts(pub(crate) BTreeMap<u32, super::Part>);
        impl AddParts {
            pub fn encode_call(parts: BTreeMap<u32, super::Part>) -> Vec<u8> {
                let call = AddParts(parts);
                call.encode_call()
            }
        }
        impl EncodeDecodeWithRoute for AddParts {
            const ROUTE: &'static [u8] = &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 32, 65, 100, 100, 80, 97,
                114, 116, 115,
            ];
            type Reply = Result<BTreeMap<u32, super::Part>, super::Error>;
        }
        #[derive(Debug, Encode)]
        #[codec(crate = sails::scale_codec)]
        pub struct RemoveEquippable(pub(crate) u32, pub(crate) ActorId);
        impl RemoveEquippable {
            pub fn encode_call(part_id: u32, collection_id: ActorId) -> Vec<u8> {
                let call = RemoveEquippable(part_id, collection_id);
                call.encode_call()
            }
        }
        impl EncodeDecodeWithRoute for RemoveEquippable {
            const ROUTE: &'static [u8] = &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 64, 82, 101, 109, 111, 118,
                101, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101,
            ];
            type Reply = Result<(u32, ActorId), super::Error>;
        }
        #[derive(Debug, Encode)]
        #[codec(crate = sails::scale_codec)]
        pub struct RemoveParts(pub(crate) Vec<u32>);
        impl RemoveParts {
            pub fn encode_call(part_ids: Vec<u32>) -> Vec<u8> {
                let call = RemoveParts(part_ids);
                call.encode_call()
            }
        }
        impl EncodeDecodeWithRoute for RemoveParts {
            const ROUTE: &'static [u8] = &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 44, 82, 101, 109, 111, 118,
                101, 80, 97, 114, 116, 115,
            ];
            type Reply = Result<Vec<u32>, super::Error>;
        }
        #[derive(Debug, Encode)]
        #[codec(crate = sails::scale_codec)]
        pub struct ResetEquippables(pub(crate) u32);
        impl ResetEquippables {
            pub fn encode_call(part_id: u32) -> Vec<u8> {
                let call = ResetEquippables(part_id);
                call.encode_call()
            }
        }
        impl EncodeDecodeWithRoute for ResetEquippables {
            const ROUTE: &'static [u8] = &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 64, 82, 101, 115, 101, 116,
                69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115,
            ];
            type Reply = Result<(), super::Error>;
        }
        #[derive(Debug, Encode)]
        #[codec(crate = sails::scale_codec)]
        pub struct SetEquippablesToAll(pub(crate) u32);
        impl SetEquippablesToAll {
            pub fn encode_call(part_id: u32) -> Vec<u8> {
                let call = SetEquippablesToAll(part_id);
                call.encode_call()
            }
        }
        impl EncodeDecodeWithRoute for SetEquippablesToAll {
            const ROUTE: &'static [u8] = &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 76, 83, 101, 116, 69, 113,
                117, 105, 112, 112, 97, 98, 108, 101, 115, 84, 111, 65, 108, 108,
            ];
            type Reply = Result<(), super::Error>;
        }
        #[derive(Debug, Encode)]
        #[codec(crate = sails::scale_codec)]
        pub struct Equippable(pub(crate) u32, pub(crate) ActorId);
        impl Equippable {
            pub fn encode_call(part_id: u32, collection_id: ActorId) -> Vec<u8> {
                let call = Equippable(part_id, collection_id);
                call.encode_call()
            }
        }
        impl EncodeDecodeWithRoute for Equippable {
            const ROUTE: &'static [u8] = &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 40, 69, 113, 117, 105, 112,
                112, 97, 98, 108, 101,
            ];
            type Reply = Result<bool, super::Error>;
        }
        #[derive(Debug, Encode)]
        #[codec(crate = sails::scale_codec)]
        pub struct Part(pub(crate) u32);
        impl Part {
            pub fn encode_call(part_id: u32) -> Vec<u8> {
                let call = Part(part_id);
                call.encode_call()
            }
        }
        impl EncodeDecodeWithRoute for Part {
            const ROUTE: &'static [u8] = &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 16, 80, 97, 114, 116,
            ];
            type Reply = Option<super::Part>;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails::scale_codec)]
pub enum Error {
    PartIdCantBeZero,
    BadConfig,
    PartAlreadyExists,
    ZeroLengthPassed,
    PartDoesNotExist,
    WrongPartFormat,
    NotAllowedToCall,
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails::scale_codec)]
pub enum Part {
    Fixed(FixedPart),
    Slot(SlotPart),
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails::scale_codec)]
pub struct FixedPart {
    pub z: Option<u32>,
    pub metadata_uri: String,
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails::scale_codec)]
pub struct SlotPart {
    pub equippable: Vec<ActorId>,
    pub z: Option<u32>,
    pub metadata_uri: String,
}
pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait RmrkCatalogFactory<A> {
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<A>;
    }
    pub trait RmrkCatalog<A> {
        #[allow(clippy::type_complexity)]
        fn add_equippables(
            &mut self,
            part_id: u32,
            collection_ids: Vec<ActorId>,
        ) -> impl Call<A, Result<(u32, Vec<ActorId>), Error>>;
        #[allow(clippy::type_complexity)]
        fn add_parts(
            &mut self,
            parts: BTreeMap<u32, Part>,
        ) -> impl Call<A, Result<BTreeMap<u32, Part>, Error>>;
        #[allow(clippy::type_complexity)]
        fn remove_equippable(
            &mut self,
            part_id: u32,
            collection_id: ActorId,
        ) -> impl Call<A, Result<(u32, ActorId), Error>>;
        #[allow(clippy::type_complexity)]
        fn remove_parts(&mut self, part_ids: Vec<u32>) -> impl Call<A, Result<Vec<u32>, Error>>;
        #[allow(clippy::type_complexity)]
        fn reset_equippables(&mut self, part_id: u32) -> impl Call<A, Result<(), Error>>;
        #[allow(clippy::type_complexity)]
        fn set_equippables_to_all(&mut self, part_id: u32) -> impl Call<A, Result<(), Error>>;
        #[allow(clippy::type_complexity)]
        fn equippable(
            &self,
            part_id: u32,
            collection_id: ActorId,
        ) -> impl Query<A, Result<bool, Error>>;
        #[allow(clippy::type_complexity)]
        fn part(&self, part_id: u32) -> impl Query<A, Option<Part>>;
    }
}

---
source: sails/client-gen/tests/generator.rs
expression: "gen(idl, \"Multiple\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails::collections::BTreeMap;
#[allow(unused_imports)]
use sails::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
#[derive(Clone)]
pub struct Multiple<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<A: Default, R: Remoting<A>> Multiple<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R, A> traits::Multiple<A> for Multiple<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<A, u16> {
        RemotingAction::<_, _, multiple::io::DoThis>::new(self.remoting.clone(), (p1, p2))
    }
    fn do_that(&mut self, p1: (u8, u32)) -> impl Call<A, u8> {
        RemotingAction::<_, _, multiple::io::DoThat>::new(self.remoting.clone(), p1)
    }
}
pub mod multiple {
    use super::*;
    pub mod io {
        use super::*;
        use sails::calls::ActionIo;
        pub struct DoThis(());
        impl DoThis {
            #[allow(dead_code)]
            pub fn encode_call(p1: u32, p2: super::MyParam) -> Vec<u8> {
                <DoThis as ActionIo>::encode_call(&(p1, p2))
            }
        }
        impl ActionIo for DoThis {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 105, 115];
            type Params = (u32, super::MyParam);
            type Reply = u16;
        }
        pub struct DoThat(());
        impl DoThat {
            #[allow(dead_code)]
            pub fn encode_call(p1: (u8, u32)) -> Vec<u8> {
                <DoThat as ActionIo>::encode_call(&p1)
            }
        }
        impl ActionIo for DoThat {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 97, 116];
            type Params = (u8, u32);
            type Reply = u8;
        }
    }
}
#[derive(Clone)]
pub struct Named<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<A: Default, R: Remoting<A>> Named<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R, A> traits::Named<A> for Named<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn that(&self, p1: u32) -> impl Query<A, String> {
        RemotingAction::<_, _, named::io::That>::new(self.remoting.clone(), p1)
    }
}
pub mod named {
    use super::*;
    pub mod io {
        use super::*;
        use sails::calls::ActionIo;
        pub struct That(());
        impl That {
            #[allow(dead_code)]
            pub fn encode_call(p1: u32) -> Vec<u8> {
                <That as ActionIo>::encode_call(&p1)
            }
        }
        impl ActionIo for That {
            const ROUTE: &'static [u8] = &[20, 78, 97, 109, 101, 100, 16, 84, 104, 97, 116];
            type Params = u32;
            type Reply = String;
        }
    }
}
pub mod traits {
    use super::*;
    pub trait Multiple<A> {
        #[allow(clippy::type_complexity)]
        fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<A, u16>;
        #[allow(clippy::type_complexity)]
        fn do_that(&mut self, p1: (u8, u32)) -> impl Call<A, u8>;
    }
    pub trait Named<A> {
        #[allow(clippy::type_complexity)]
        fn that(&self, p1: u32) -> impl Query<A, String>;
    }
}

// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct ComputeStressFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> ComputeStressFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::ComputeStressFactory for ComputeStressFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, compute_stress_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod compute_stress_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct ComputeStress<R> {
    remoting: R,
}
impl<R> ComputeStress<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::ComputeStress for ComputeStress<R> {
    type Args = R::Args;
    fn compute_stress(
        &mut self,
        n: u32,
    ) -> impl Call<Output = ComputeStressResult, Args = R::Args> {
        RemotingAction::<_, compute_stress::io::ComputeStress>::new(self.remoting.clone(), n)
    }
}

pub mod compute_stress {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct ComputeStress(());
        impl ComputeStress {
            #[allow(dead_code)]
            pub fn encode_call(n: u32) -> Vec<u8> {
                <ComputeStress as ActionIo>::encode_call(&n)
            }
        }
        impl ActionIo for ComputeStress {
            const ROUTE: &'static [u8] = &[
                52, 67, 111, 109, 112, 117, 116, 101, 83, 116, 114, 101, 115, 115, 52, 67, 111,
                109, 112, 117, 116, 101, 83, 116, 114, 101, 115, 115,
            ];
            type Params = u32;
            type Reply = super::ComputeStressResult;
        }
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct ComputeStressResult {
    pub res: u32,
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait ComputeStressFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait ComputeStress {
        type Args;
        fn compute_stress(
            &mut self,
            n: u32,
        ) -> impl Call<Output = ComputeStressResult, Args = Self::Args>;
    }
}

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub ComputeStress<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::ComputeStress for ComputeStress<A> { type Args = A; fn compute_stress (&mut self, n: u32,) -> MockCall<A, ComputeStressResult>; } }
}

// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::{client::*, collections::*, prelude::*};
pub struct ComputeStressProgramProgram;
impl sails_rs::client::Program for ComputeStressProgramProgram {}
pub trait ComputeStressProgram {
    type Env: sails_rs::client::GearEnv;
    fn compute_stress(
        &self,
    ) -> sails_rs::client::Service<compute_stress::ComputeStressImpl, Self::Env>;
}
impl<E: sails_rs::client::GearEnv> ComputeStressProgram
    for sails_rs::client::Actor<ComputeStressProgramProgram, E>
{
    type Env = E;
    fn compute_stress(
        &self,
    ) -> sails_rs::client::Service<compute_stress::ComputeStressImpl, Self::Env> {
        self.service(stringify!(ComputeStress))
    }
}
pub trait ComputeStressProgramCtors {
    type Env: sails_rs::client::GearEnv;
    fn new_for_bench(
        self,
    ) -> sails_rs::client::PendingCtor<ComputeStressProgramProgram, io::NewForBench, Self::Env>;
}
impl<E: sails_rs::client::GearEnv> ComputeStressProgramCtors
    for sails_rs::client::Deployment<ComputeStressProgramProgram, E>
{
    type Env = E;
    fn new_for_bench(
        self,
    ) -> sails_rs::client::PendingCtor<ComputeStressProgramProgram, io::NewForBench, Self::Env>
    {
        self.pending_ctor(())
    }
}

pub mod io {
    use super::*;
    sails_rs::io_struct_impl!(NewForBench () -> ());
}

pub mod compute_stress {
    use super::*;
    pub trait ComputeStress {
        type Env: sails_rs::client::GearEnv;
        /// !@interface_id = 0xf8aa07c8c4b0189f
        /// !@entry_id = 0x0001
        fn compute_stress(
            &mut self,
            n: u32,
        ) -> sails_rs::client::PendingCall<io::ComputeStress, Self::Env>;
    }
    pub struct ComputeStressImpl;
    impl<E: sails_rs::client::GearEnv> ComputeStress
        for sails_rs::client::Service<ComputeStressImpl, E>
    {
        type Env = E;
        fn compute_stress(
            &mut self,
            n: u32,
        ) -> sails_rs::client::PendingCall<io::ComputeStress, Self::Env> {
            self.pending_call((n,))
        }
    }

    pub mod io {
        use super::*;
        sails_rs::io_struct_impl!(ComputeStress (n: u32) -> super::ComputeStressResult);
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct ComputeStressResult {
    pub res: u32,
}

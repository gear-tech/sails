// Code generated by sails-client-gen. DO NOT EDIT.
use sails_rs::{client::*, prelude::*};
pub struct AllocStressProgramProgram;
impl Program for AllocStressProgramProgram {}
pub trait AllocStressProgram {
    type Env: GearEnv;
    fn alloc_stress(&self) -> Service<Self::Env, alloc_stress::AllocStressImpl>;
}
impl<E: GearEnv> AllocStressProgram for Actor<E, AllocStressProgramProgram> {
    type Env = E;
    fn alloc_stress(&self) -> Service<Self::Env, alloc_stress::AllocStressImpl> {
        self.service(stringify!(alloc_stress::AllocStress))
    }
}
pub trait AllocStressProgramCtors {
    type Env: GearEnv;
    fn new_for_bench(self) -> PendingCtor<Self::Env, AllocStressProgramProgram, io::NewForBench>;
}
impl<E: GearEnv> AllocStressProgramCtors for Deployment<E, AllocStressProgramProgram> {
    type Env = E;
    fn new_for_bench(self) -> PendingCtor<Self::Env, AllocStressProgramProgram, io::NewForBench> {
        self.pending_ctor(())
    }
}

pub mod io {
    use super::*;
    sails_rs::io_struct_impl!(NewForBench () -> ());
}

pub mod alloc_stress {
    use super::*;
    pub trait AllocStress {
        type Env: GearEnv;
        fn alloc_stress(&mut self, n: u32) -> PendingCall<Self::Env, io::AllocStress>;
    }
    pub struct AllocStressImpl;
    impl<E: GearEnv> AllocStress for Service<E, AllocStressImpl> {
        type Env = E;
        fn alloc_stress(&mut self, n: u32) -> PendingCall<Self::Env, io::AllocStress> {
            self.pending_call((n,))
        }
    }

    pub mod io {
        use super::*;
        sails_rs::io_struct_impl!(AllocStress (n: u32) -> AllocStressResult);
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct AllocStressResult {
    pub inner: Vec<u8>,
}

// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::{client::*, collections::*, prelude::*};
pub struct AllocStressProgramProgram;
impl sails_rs::client::Program for AllocStressProgramProgram {}
pub trait AllocStressProgram {
    type Env: sails_rs::client::GearEnv;
    fn alloc_stress(&self) -> sails_rs::client::Service<alloc_stress::AllocStressImpl, Self::Env>;
}
impl<E: sails_rs::client::GearEnv> AllocStressProgram
    for sails_rs::client::Actor<AllocStressProgramProgram, E>
{
    type Env = E;
    fn alloc_stress(&self) -> sails_rs::client::Service<alloc_stress::AllocStressImpl, Self::Env> {
        self.service(stringify!(AllocStress))
    }
}
pub trait AllocStressProgramCtors {
    type Env: sails_rs::client::GearEnv;
    fn new_for_bench(
        self,
    ) -> sails_rs::client::PendingCtor<AllocStressProgramProgram, io::NewForBench, Self::Env>;
}
impl<E: sails_rs::client::GearEnv> AllocStressProgramCtors
    for sails_rs::client::Deployment<AllocStressProgramProgram, E>
{
    type Env = E;
    fn new_for_bench(
        self,
    ) -> sails_rs::client::PendingCtor<AllocStressProgramProgram, io::NewForBench, Self::Env> {
        self.pending_ctor(())
    }
}

pub mod io {
    use super::*;
    sails_rs::io_struct_impl!(NewForBench () -> ());
}

pub mod alloc_stress {
    use super::*;
    pub trait AllocStress {
        type Env: sails_rs::client::GearEnv;
        /// !@interface_id32 = 0x5c8922fd
        /// !@interface_uid64 = 0xe9ab96965c8922fd
        /// !@entry_id = 0x0001
        fn alloc_stress(
            &mut self,
            n: u32,
        ) -> sails_rs::client::PendingCall<io::AllocStress, Self::Env>;
    }
    pub struct AllocStressImpl;
    impl<E: sails_rs::client::GearEnv> AllocStress for sails_rs::client::Service<AllocStressImpl, E> {
        type Env = E;
        fn alloc_stress(
            &mut self,
            n: u32,
        ) -> sails_rs::client::PendingCall<io::AllocStress, Self::Env> {
            self.pending_call((n,))
        }
    }

    pub mod io {
        use super::*;
        sails_rs::io_struct_impl!(AllocStress (n: u32) -> super::AllocStressResult);
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct AllocStressResult {
    pub inner: Vec<u8>,
}

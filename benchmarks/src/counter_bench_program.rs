// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::{client::*, collections::*, prelude::*};
pub struct CounterBenchProgramProgram;
impl sails_rs::client::Program for CounterBenchProgramProgram {}
pub trait CounterBenchProgram {
    type Env: sails_rs::client::GearEnv;
    fn counter_bench(
        &self,
    ) -> sails_rs::client::Service<Self::Env, counter_bench::CounterBenchImpl>;
}
impl<E: sails_rs::client::GearEnv> CounterBenchProgram
    for sails_rs::client::Actor<E, CounterBenchProgramProgram>
{
    type Env = E;
    fn counter_bench(
        &self,
    ) -> sails_rs::client::Service<Self::Env, counter_bench::CounterBenchImpl> {
        self.service(stringify!(CounterBench))
    }
}
pub trait CounterBenchProgramCtors {
    type Env: sails_rs::client::GearEnv;
    fn new_for_bench(
        self,
    ) -> sails_rs::client::PendingCtor<Self::Env, CounterBenchProgramProgram, io::NewForBench>;
}
impl<E: sails_rs::client::GearEnv> CounterBenchProgramCtors
    for sails_rs::client::Deployment<E, CounterBenchProgramProgram>
{
    type Env = E;
    fn new_for_bench(
        self,
    ) -> sails_rs::client::PendingCtor<Self::Env, CounterBenchProgramProgram, io::NewForBench> {
        self.pending_ctor(())
    }
}

pub mod io {
    use super::*;
    sails_rs::io_struct_impl!(NewForBench () -> ());
}

pub mod counter_bench {
    use super::*;
    pub trait CounterBench {
        type Env: sails_rs::client::GearEnv;
        fn inc(&mut self) -> sails_rs::client::PendingCall<Self::Env, io::Inc>;
        fn inc_async(&mut self) -> sails_rs::client::PendingCall<Self::Env, io::IncAsync>;
    }
    pub struct CounterBenchImpl;
    impl<E: sails_rs::client::GearEnv> CounterBench for sails_rs::client::Service<E, CounterBenchImpl> {
        type Env = E;
        fn inc(&mut self) -> sails_rs::client::PendingCall<Self::Env, io::Inc> {
            self.pending_call(())
        }
        fn inc_async(&mut self) -> sails_rs::client::PendingCall<Self::Env, io::IncAsync> {
            self.pending_call(())
        }
    }

    pub mod io {
        use super::*;
        sails_rs::io_struct_impl!(Inc () -> u64);
        sails_rs::io_struct_impl!(IncAsync () -> u64);
    }
}

// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct PingPongFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> PingPongFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::PingPongFactory for PingPongFactory<R> {
    type Args = R::Args;
    fn new_for_bench(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, ping_pong_factory::io::NewForBench>::new(self.remoting.clone(), ())
    }
}

pub mod ping_pong_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct NewForBench(());
        impl NewForBench {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <NewForBench as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for NewForBench {
            const ROUTE: &'static [u8] = &[44, 78, 101, 119, 70, 111, 114, 66, 101, 110, 99, 104];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct PingPongService<R> {
    remoting: R,
}
impl<R> PingPongService<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::PingPongService for PingPongService<R> {
    type Args = R::Args;
    fn ping(
        &mut self,
        payload: PingPongPayload,
    ) -> impl Call<Output = PingPongPayload, Args = R::Args> {
        RemotingAction::<_, ping_pong_service::io::Ping>::new(self.remoting.clone(), payload)
    }
}

pub mod ping_pong_service {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct Ping(());
        impl Ping {
            #[allow(dead_code)]
            pub fn encode_call(payload: super::PingPongPayload) -> Vec<u8> {
                <Ping as ActionIo>::encode_call(&payload)
            }
        }
        impl ActionIo for Ping {
            const ROUTE: &'static [u8] = &[
                60, 80, 105, 110, 103, 80, 111, 110, 103, 83, 101, 114, 118, 105, 99, 101, 16, 80,
                105, 110, 103,
            ];
            type Params = super::PingPongPayload;
            type Reply = super::PingPongPayload;
        }
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum PingPongPayload {
    Start(ActorId),
    Ping,
    Pong,
    Finished,
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait PingPongFactory {
        type Args;
        fn new_for_bench(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait PingPongService {
        type Args;
        fn ping(
            &mut self,
            payload: PingPongPayload,
        ) -> impl Call<Output = PingPongPayload, Args = Self::Args>;
    }
}

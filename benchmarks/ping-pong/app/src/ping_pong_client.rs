// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::{client::*, collections::*, prelude::*};
pub struct PingPongProgram;
impl Program for PingPongProgram {}
pub trait PingPong {
    type Env: GearEnv;
    fn ping_pong_service(&self) -> Service<Self::Env, ping_pong_service::PingPongServiceImpl>;
}
impl<E: GearEnv> PingPong for Actor<E, PingPongProgram> {
    type Env = E;
    fn ping_pong_service(&self) -> Service<Self::Env, ping_pong_service::PingPongServiceImpl> {
        self.service(stringify!(PingPongService))
    }
}
pub trait PingPongCtors {
    type Env: GearEnv;
    fn new_for_bench(self) -> PendingCtor<Self::Env, PingPongProgram, io::NewForBench>;
}
impl<E: GearEnv> PingPongCtors for Deployment<E, PingPongProgram> {
    type Env = E;
    fn new_for_bench(self) -> PendingCtor<Self::Env, PingPongProgram, io::NewForBench> {
        self.pending_ctor(())
    }
}

pub mod io {
    use super::*;
    sails_rs::io_struct_impl!(NewForBench () -> ());
}

pub mod ping_pong_service {
    use super::*;
    pub trait PingPongService {
        type Env: GearEnv;
        fn ping(&mut self, payload: PingPongPayload) -> PendingCall<Self::Env, io::Ping>;
    }
    pub struct PingPongServiceImpl;
    impl<E: GearEnv> PingPongService for Service<E, PingPongServiceImpl> {
        type Env = E;
        fn ping(&mut self, payload: PingPongPayload) -> PendingCall<Self::Env, io::Ping> {
            self.pending_call((payload,))
        }
    }

    pub mod io {
        use super::*;
        sails_rs::io_struct_impl!(Ping (payload: super::PingPongPayload) -> super::PingPongPayload);
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum PingPongPayload {
    Start(ActorId),
    Ping,
    Pong,
    Finished,
}

// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::{client::*, collections::*, prelude::*};
pub struct PingPongProgram;
impl sails_rs::client::Program for PingPongProgram {}
pub trait PingPong {
    type Env: sails_rs::client::GearEnv;
    fn ping_pong_service(
        &self,
    ) -> sails_rs::client::Service<ping_pong_service::PingPongServiceImpl, Self::Env>;
}
impl<E: sails_rs::client::GearEnv> PingPong for sails_rs::client::Actor<PingPongProgram, E> {
    type Env = E;
    fn ping_pong_service(
        &self,
    ) -> sails_rs::client::Service<ping_pong_service::PingPongServiceImpl, Self::Env> {
        self.service(stringify!(PingPongService))
    }
}
pub trait PingPongCtors {
    type Env: sails_rs::client::GearEnv;
    fn new_for_bench(
        self,
    ) -> sails_rs::client::PendingCtor<PingPongProgram, io::NewForBench, Self::Env>;
}
impl<E: sails_rs::client::GearEnv> PingPongCtors
    for sails_rs::client::Deployment<PingPongProgram, E>
{
    type Env = E;
    fn new_for_bench(
        self,
    ) -> sails_rs::client::PendingCtor<PingPongProgram, io::NewForBench, Self::Env> {
        self.pending_ctor(())
    }
}

pub mod io {
    use super::*;
    sails_rs::io_struct_impl!(NewForBench () -> ());
}

pub mod ping_pong_service {
    use super::*;
    pub trait PingPongService {
        type Env: sails_rs::client::GearEnv;
        /// !@interface_id = 0x8386db6747db38ed
        /// !@entry_id = 0x0001
        fn ping(
            &mut self,
            payload: PingPongPayload,
        ) -> sails_rs::client::PendingCall<io::Ping, Self::Env>;
    }
    pub struct PingPongServiceImpl;
    impl<E: sails_rs::client::GearEnv> PingPongService
        for sails_rs::client::Service<PingPongServiceImpl, E>
    {
        type Env = E;
        fn ping(
            &mut self,
            payload: PingPongPayload,
        ) -> sails_rs::client::PendingCall<io::Ping, Self::Env> {
            self.pending_call((payload,))
        }
    }

    pub mod io {
        use super::*;
        sails_rs::io_struct_impl!(Ping (payload: super::PingPongPayload) -> super::PingPongPayload);
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum PingPongPayload {
    Start(ActorId),
    Ping,
    Pong,
    Finished,
}

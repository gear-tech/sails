// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct CounterBenchFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> CounterBenchFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::CounterBenchFactory for CounterBenchFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, counter_bench_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod counter_bench_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct CounterBench<R> {
    remoting: R,
}
impl<R> CounterBench<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::CounterBench for CounterBench<R> {
    type Args = R::Args;
    fn inc(&mut self) -> impl Call<Output = u64, Args = R::Args> {
        RemotingAction::<_, counter_bench::io::Inc>::new(self.remoting.clone(), ())
    }
    fn inc_async(&mut self) -> impl Call<Output = u64, Args = R::Args> {
        RemotingAction::<_, counter_bench::io::IncAsync>::new(self.remoting.clone(), ())
    }
}

pub mod counter_bench {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct Inc(());
        impl Inc {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Inc as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Inc {
            const ROUTE: &'static [u8] = &[
                48, 67, 111, 117, 110, 116, 101, 114, 66, 101, 110, 99, 104, 12, 73, 110, 99,
            ];
            type Params = ();
            type Reply = u64;
        }
        pub struct IncAsync(());
        impl IncAsync {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <IncAsync as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for IncAsync {
            const ROUTE: &'static [u8] = &[
                48, 67, 111, 117, 110, 116, 101, 114, 66, 101, 110, 99, 104, 32, 73, 110, 99, 65,
                115, 121, 110, 99,
            ];
            type Params = ();
            type Reply = u64;
        }
    }
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait CounterBenchFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait CounterBench {
        type Args;
        fn inc(&mut self) -> impl Call<Output = u64, Args = Self::Args>;
        fn inc_async(&mut self) -> impl Call<Output = u64, Args = Self::Args>;
    }
}

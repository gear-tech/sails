name: '[rs] Benchmarks'

on:
  pull_request:
    # types: [labeled]
    # paths:
    #   - 'rs/**'
    #   - 'Cargo.lock'
    #   - 'Cargo.toml'
  push:
    branches: [master]
    paths:
      - 'rs/**'
      - 'Cargo.lock'
      - 'Cargo.toml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  benchmark:
    # if: contains(github.event.label.name, 'run-benchmarks')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      # Checkout the current branch (PR branch)
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Free Disk Space
        uses: ./.github/actions/free-disk-space

      - name: Install wasm-opt
        uses: ./.github/actions/install-wasm-utils

      # Run benchmarks on PR branch
      - name: Run Benchmarks
        run: |
          make bench

      # Step 1: Check if current benchmarks differ significantly from previous ones in current branch
      - name: Check Benchmark Diff vs Current Branch
        if: github.event_name == 'pull_request'
        run: |
          # Get previous bench_data.json from current branch (before the latest commit)
          git fetch origin ${{ github.head_ref }}
          if git show HEAD~1:benchmarks/bench_data.json > bench_data_previous.json 2>/dev/null; then
            echo "Found previous benchmark data in current branch"
            cd benchmarks
            cargo run --bin check-benchmark-diff -- bench_data.json ../bench_data_previous.json 1.0
          else
            echo "No previous benchmark data found in current branch - treating as first run"
          fi
        env:
          CARGO_TERM_COLOR: always

      # Step 2: If diff check passes, compare with master baseline  
      - name: Checkout master branch for baseline
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4
        with:
          ref: master
          path: master-branch

      # Copy baseline JSON from master
      - name: Copy Baseline JSON from Master
        if: github.event_name == 'pull_request'
        run: |
          cp master-branch/benchmarks/bench_data.json baseline.json

# todo [sab] remove
      - name: Display Bench Data
        if: github.event_name == 'pull_request'
        run: |
          echo "=== Current PR Bench Data ==="
          cat benchmarks/bench_data.json
          echo ""
          echo "=== Master Baseline Bench Data ==="
          cat baseline.json

      # Compare benchmarks and generate markdown table
      - name: Compare Benchmarks vs Master
        if: github.event_name == 'pull_request'
        run: |
          cd benchmarks
          cargo run --bin compare-benchmarks -- bench_data.json ../baseline.json comparison.md
        env:
          CARGO_TERM_COLOR: always

      # Read the comparison markdown for the comment
      - name: Read Comparison Result
        if: github.event_name == 'pull_request'
        id: comparison
        run: |
          cd benchmarks
          echo 'COMPARISON_TABLE<<EOF' >> $GITHUB_OUTPUT
          cat comparison.md >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

# todo [sab] write a new comment, not updated (edited)
      # Comment the comparison table on the PR
      - name: Comment PR with Benchmark Comparison
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comparisonTable = `${{ steps.comparison.outputs.COMPARISON_TABLE }}`;
            
            // Find existing benchmark comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ”¬ Benchmark Comparison')
            );
            
            const commentBody = `${comparisonTable}
            
            ---
            <sub>ðŸ¤– This comment was automatically generated by the benchmark comparison workflow.</sub>`;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

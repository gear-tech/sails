{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "AccountId32"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "flags",
            "TypeName": "ExtraFlags",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ExtraFlags"
        ],
        "TypeDef": "Composite"
      },
      "8": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 9
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 9
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 9
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 9
          }
        ],
        "TypeDef": "Composite"
      },
      "9": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 10
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 10
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "10": {
        "TypeId": 11,
        "TypeDef": "Compact"
      },
      "11": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "12": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "13": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "14": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 15
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "15": {
        "TypeId": 16,
        "TypeDef": "Sequence"
      },
      "16": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 17
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 17
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 17
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "17": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "18": {
        "TypeId": 19,
        "TypeDef": "Sequence"
      },
      "19": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 335
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 20
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 139
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 20
          },
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "20": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 21
              }
            ],
            "Index": 0
          },
          {
            "Name": "Grandpa",
            "TypeFields": [
              {
                "TypeName": "pallet_grandpa::Event",
                "TypeId": 30
              }
            ],
            "Index": 4
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 35
              }
            ],
            "Index": 5
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "pallet_vesting::Event<Runtime>",
                "TypeId": 37
              }
            ],
            "Index": 10
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 38
              }
            ],
            "Index": 6
          },
          {
            "Name": "BagsList",
            "TypeFields": [
              {
                "TypeName": "pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>",
                "TypeId": 39
              }
            ],
            "Index": 11
          },
          {
            "Name": "ImOnline",
            "TypeFields": [
              {
                "TypeName": "pallet_im_online::Event<Runtime>",
                "TypeId": 40
              }
            ],
            "Index": 12
          },
          {
            "Name": "Staking",
            "TypeFields": [
              {
                "TypeName": "pallet_staking::Event<Runtime>",
                "TypeId": 49
              }
            ],
            "Index": 13
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "pallet_session::Event",
                "TypeId": 56
              }
            ],
            "Index": 7
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "pallet_treasury::Event<Runtime>",
                "TypeId": 57
              }
            ],
            "Index": 14
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "pallet_utility::Event",
                "TypeId": 59
              }
            ],
            "Index": 8
          },
          {
            "Name": "ConvictionVoting",
            "TypeFields": [
              {
                "TypeName": "pallet_conviction_voting::Event<Runtime>",
                "TypeId": 61
              }
            ],
            "Index": 16
          },
          {
            "Name": "Referenda",
            "TypeFields": [
              {
                "TypeName": "pallet_referenda::Event<Runtime>",
                "TypeId": 62
              }
            ],
            "Index": 17
          },
          {
            "Name": "FellowshipCollective",
            "TypeFields": [
              {
                "TypeName": "pallet_ranked_collective::Event<Runtime, pallet_ranked_collective::\nInstance1>",
                "TypeId": 280
              }
            ],
            "Index": 18
          },
          {
            "Name": "FellowshipReferenda",
            "TypeFields": [
              {
                "TypeName": "pallet_referenda::Event<Runtime, pallet_referenda::Instance2>",
                "TypeId": 283
              }
            ],
            "Index": 19
          },
          {
            "Name": "Whitelist",
            "TypeFields": [
              {
                "TypeName": "pallet_whitelist::Event<Runtime>",
                "TypeId": 284
              }
            ],
            "Index": 21
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "pallet_scheduler::Event<Runtime>",
                "TypeId": 289
              }
            ],
            "Index": 22
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::Event<Runtime>",
                "TypeId": 291
              }
            ],
            "Index": 23
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "pallet_identity::Event<Runtime>",
                "TypeId": 292
              }
            ],
            "Index": 24
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "pallet_proxy::Event<Runtime>",
                "TypeId": 293
              }
            ],
            "Index": 25
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "pallet_multisig::Event<Runtime>",
                "TypeId": 294
              }
            ],
            "Index": 26
          },
          {
            "Name": "ElectionProviderMultiPhase",
            "TypeFields": [
              {
                "TypeName": "pallet_election_provider_multi_phase::Event<Runtime>",
                "TypeId": 295
              }
            ],
            "Index": 27
          },
          {
            "Name": "Offences",
            "TypeFields": [
              {
                "TypeName": "pallet_offences::Event",
                "TypeId": 299
              }
            ],
            "Index": 28
          },
          {
            "Name": "Bounties",
            "TypeFields": [
              {
                "TypeName": "pallet_bounties::Event<Runtime>",
                "TypeId": 300
              }
            ],
            "Index": 29
          },
          {
            "Name": "ChildBounties",
            "TypeFields": [
              {
                "TypeName": "pallet_child_bounties::Event<Runtime>",
                "TypeId": 301
              }
            ],
            "Index": 30
          },
          {
            "Name": "NominationPools",
            "TypeFields": [
              {
                "TypeName": "pallet_nomination_pools::Event<Runtime>",
                "TypeId": 302
              }
            ],
            "Index": 31
          },
          {
            "Name": "Gear",
            "TypeFields": [
              {
                "TypeName": "pallet_gear::Event<Runtime>",
                "TypeId": 303
              }
            ],
            "Index": 104
          },
          {
            "Name": "StakingRewards",
            "TypeFields": [
              {
                "TypeName": "pallet_gear_staking_rewards::Event<Runtime>",
                "TypeId": 333
              }
            ],
            "Index": 106
          },
          {
            "Name": "GearVoucher",
            "TypeFields": [
              {
                "TypeName": "pallet_gear_voucher::Event<Runtime>",
                "TypeId": 334
              }
            ],
            "Index": 107
          }
        ],
        "Path": [
          "vara_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "21": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 22
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 25
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 22
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "22": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 23
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 24
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "23": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "24": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "25": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 26
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 27
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 28
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 29
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "RootNotAllowed",
            "TypeFields": null,
            "Index": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "26": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 17
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "27": {
        "Variants": [
          {
            "Name": "FundsUnavailable",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "OnlyProvider",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CannotCreateHold",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "NotExpendable",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Blocked",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "28": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "29": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "30": {
        "Variants": [
          {
            "Name": "NewAuthorities",
            "TypeFields": [
              {
                "Name": "authority_set",
                "TypeName": "AuthorityList",
                "TypeId": 31
              }
            ],
            "Index": 0,
            "Docs": [
              "New authority set has been applied."
            ]
          },
          {
            "Name": "Paused",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Current authority set has been paused."
            ]
          },
          {
            "Name": "Resumed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Current authority set has been resumed."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "31": {
        "TypeId": 32,
        "TypeDef": "Sequence"
      },
      "32": {
        "TypeIds": [
          33,
          11
        ],
        "TypeDef": "Tuple"
      },
      "33": {
        "TypeFields": [
          {
            "TypeName": "ed25519::Public",
            "TypeId": 34
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "34": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "35": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 36
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          },
          {
            "Name": "Minted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Some amount was minted into an account."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Some amount was burned from an account."
            ]
          },
          {
            "Name": "Suspended",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "Some amount was suspended from an account (it can be restored later)."
            ]
          },
          {
            "Name": "Restored",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Some amount was restored into an account."
            ]
          },
          {
            "Name": "Upgraded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "An account was upgraded."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 15,
            "Docs": [
              "Total issuance was increased by `amount`, creating a credit to be balanced."
            ]
          },
          {
            "Name": "Rescinded",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Total issuance was decreased by `amount`, creating a debt to be balanced."
            ]
          },
          {
            "Name": "Locked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Some balance was locked."
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Some balance was unlocked."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "Some balance was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 20,
            "Docs": [
              "Some balance was thawed."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "36": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "37": {
        "Variants": [
          {
            "Name": "VestingUpdated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "unvested",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "The amount vested has been updated. This could indicate a change in funds available.",
              "The balance given is the amount which is left unvested (and thus locked)."
            ]
          },
          {
            "Name": "VestingCompleted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "An \\[account\\] has become fully vested."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "38": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "39": {
        "Variants": [
          {
            "Name": "Rebagged",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "from",
                "TypeName": "T::Score",
                "TypeId": 11
              },
              {
                "Name": "to",
                "TypeName": "T::Score",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "Moved an account from one bag to another."
            ]
          },
          {
            "Name": "ScoreUpdated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "new_score",
                "TypeName": "T::Score",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "Updated the score of some account to the given amount."
            ]
          }
        ],
        "Path": [
          "pallet_bags_list",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "40": {
        "Variants": [
          {
            "Name": "HeartbeatReceived",
            "TypeFields": [
              {
                "Name": "authority_id",
                "TypeName": "T::AuthorityId",
                "TypeId": 41
              }
            ],
            "Index": 0,
            "Docs": [
              "A new heartbeat was received from `AuthorityId`."
            ]
          },
          {
            "Name": "AllGood",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "At the end of the session, no offence was committed."
            ]
          },
          {
            "Name": "SomeOffline",
            "TypeFields": [
              {
                "Name": "offline",
                "TypeName": "Vec<IdentificationTuple<T>>",
                "TypeId": 43
              }
            ],
            "Index": 2,
            "Docs": [
              "At the end of the session, at least one validator was found to be offline."
            ]
          }
        ],
        "Path": [
          "pallet_im_online",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "41": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 42
          }
        ],
        "Path": [
          "pallet_im_online",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "42": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "43": {
        "TypeId": 44,
        "TypeDef": "Sequence"
      },
      "44": {
        "TypeIds": [
          0,
          45
        ],
        "TypeDef": "Tuple"
      },
      "45": {
        "TypeFields": [
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 46
          },
          {
            "Name": "own",
            "TypeName": "Balance",
            "TypeId": 46
          },
          {
            "Name": "others",
            "TypeName": "Vec<IndividualExposure<AccountId, Balance>>",
            "TypeId": 47
          }
        ],
        "Path": [
          "sp_staking",
          "Exposure"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "46": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "47": {
        "TypeId": 48,
        "TypeDef": "Sequence"
      },
      "48": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 46
          }
        ],
        "Path": [
          "sp_staking",
          "IndividualExposure"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "49": {
        "Variants": [
          {
            "Name": "EraPaid",
            "TypeFields": [
              {
                "Name": "era_index",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "validator_payout",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "remainder",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "The era payout has been set; the first balance is the validator-payout; the second is",
              "the remainder from the maximum amount of reward."
            ]
          },
          {
            "Name": "Rewarded",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "dest",
                "TypeName": "RewardDestination<T::AccountId>",
                "TypeId": 50
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "The nominator has been rewarded by this amount to this destination."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "staker",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A staker (validator or nominator) has been slashed by the given amount."
            ]
          },
          {
            "Name": "SlashReported",
            "TypeFields": [
              {
                "Name": "validator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "fraction",
                "TypeName": "Perbill",
                "TypeId": 51
              },
              {
                "Name": "slash_era",
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A slash for the given validator, for the given percentage of their stake, at the given",
              "era as been reported."
            ]
          },
          {
            "Name": "OldSlashingReportDiscarded",
            "TypeFields": [
              {
                "Name": "session_index",
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "An old slashing report from a prior era was discarded because it could",
              "not be processed."
            ]
          },
          {
            "Name": "StakersElected",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A new set of stakers was elected."
            ]
          },
          {
            "Name": "Bonded",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "An account has bonded this amount. \\[stash, amount\\]",
              "",
              "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
              "it will not be emitted for staking rewards when they are added to stake."
            ]
          },
          {
            "Name": "Unbonded",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "An account has unbonded this amount."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
              "from the unlocking queue."
            ]
          },
          {
            "Name": "Kicked",
            "TypeFields": [
              {
                "Name": "nominator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 9,
            "Docs": [
              "A nominator has been kicked from a validator."
            ]
          },
          {
            "Name": "StakingElectionFailed",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The election failed. No new era is planned."
            ]
          },
          {
            "Name": "Chilled",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 11,
            "Docs": [
              "An account has stopped participating as either a validator or nominator."
            ]
          },
          {
            "Name": "PayoutStarted",
            "TypeFields": [
              {
                "Name": "era_index",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "validator_stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 12,
            "Docs": [
              "The stakers' rewards are getting paid."
            ]
          },
          {
            "Name": "ValidatorPrefsSet",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "prefs",
                "TypeName": "ValidatorPrefs",
                "TypeId": 52
              }
            ],
            "Index": 13,
            "Docs": [
              "A validator has set their preferences."
            ]
          },
          {
            "Name": "SnapshotVotersSizeExceeded",
            "TypeFields": [
              {
                "Name": "size",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 14,
            "Docs": [
              "Voters size limit reached."
            ]
          },
          {
            "Name": "SnapshotTargetsSizeExceeded",
            "TypeFields": [
              {
                "Name": "size",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "Targets size limit reached."
            ]
          },
          {
            "Name": "ForceEra",
            "TypeFields": [
              {
                "Name": "mode",
                "TypeName": "Forcing",
                "TypeId": 55
              }
            ],
            "Index": 16,
            "Docs": [
              "A new force era mode was set."
            ]
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "50": {
        "Variants": [
          {
            "Name": "Staked",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Stash",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Controller",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Account",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "pallet_staking",
          "RewardDestination"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "51": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Perbill"
        ],
        "TypeDef": "Composite"
      },
      "52": {
        "TypeFields": [
          {
            "Name": "commission",
            "TypeName": "Perbill",
            "TypeId": 53
          },
          {
            "Name": "blocked",
            "TypeName": "bool",
            "TypeId": 54
          }
        ],
        "Path": [
          "pallet_staking",
          "ValidatorPrefs"
        ],
        "TypeDef": "Composite"
      },
      "53": {
        "TypeId": 51,
        "TypeDef": "Compact"
      },
      "54": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "55": {
        "Variants": [
          {
            "Name": "NotForcing",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ForceNew",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "ForceNone",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "ForceAlways",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_staking",
          "Forcing"
        ],
        "TypeDef": "Variant"
      },
      "56": {
        "Variants": [
          {
            "Name": "NewSession",
            "TypeFields": [
              {
                "Name": "session_index",
                "TypeName": "SessionIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New session has happened. Note that the argument is the session index, not the",
              "block number as the type might suggest."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "57": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New proposal."
            ]
          },
          {
            "Name": "Spending",
            "TypeFields": [
              {
                "Name": "budget_remaining",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "We have ended a spend period and will now allocate funds."
            ]
          },
          {
            "Name": "Awarded",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "award",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Some funds have been allocated."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "slashed",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A proposal was rejected; funds were slashed."
            ]
          },
          {
            "Name": "Burnt",
            "TypeFields": [
              {
                "Name": "burnt_funds",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some of our funds have been burnt."
            ]
          },
          {
            "Name": "Rollover",
            "TypeFields": [
              {
                "Name": "rollover_balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "Some funds have been deposited."
            ]
          },
          {
            "Name": "SpendApproved",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "A new spend proposal has been approved."
            ]
          },
          {
            "Name": "UpdatedInactive",
            "TypeFields": [
              {
                "Name": "reactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "deactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "The inactive funds of the pallet have been updated."
            ]
          },
          {
            "Name": "AssetSpendApproved",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "asset_kind",
                "TypeName": "T::AssetKind",
                "TypeId": 58
              },
              {
                "Name": "amount",
                "TypeName": "AssetBalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::Beneficiary",
                "TypeId": 0
              },
              {
                "Name": "valid_from",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "expire_at",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "A new asset spend proposal has been approved."
            ]
          },
          {
            "Name": "AssetSpendVoided",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "An approved spend was voided."
            ]
          },
          {
            "Name": "Paid",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "payment_id",
                "TypeName": "<T::Paymaster as Pay>::Id",
                "TypeId": 58
              }
            ],
            "Index": 11,
            "Docs": [
              "A payment happened."
            ]
          },
          {
            "Name": "PaymentFailed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "payment_id",
                "TypeName": "<T::Paymaster as Pay>::Id",
                "TypeId": 58
              }
            ],
            "Index": 12,
            "Docs": [
              "A payment failed and can be retried."
            ]
          },
          {
            "Name": "SpendProcessed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "A spend was processed and removed from the storage. It might have been successfully",
              "paid or it may have expired."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "58": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "59": {
        "Variants": [
          {
            "Name": "BatchInterrupted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 25
              }
            ],
            "Index": 0,
            "Docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ]
          },
          {
            "Name": "BatchCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Batch of dispatches completed fully with no error."
            ]
          },
          {
            "Name": "BatchCompletedWithErrors",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Batch of dispatches completed but has errors."
            ]
          },
          {
            "Name": "ItemCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ]
          },
          {
            "Name": "ItemFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 25
              }
            ],
            "Index": 4,
            "Docs": [
              "A single item within a Batch of dispatches has completed with error."
            ]
          },
          {
            "Name": "DispatchedAs",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 60
              }
            ],
            "Index": 5,
            "Docs": [
              "A call was dispatched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "60": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 58
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 25
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 58
          },
          {
            "Name": "E",
            "TypeId": 25
          }
        ],
        "TypeDef": "Variant"
      },
      "61": {
        "Variants": [
          {
            "Name": "Delegated",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "An account has delegated their vote to another account. \\[who, target\\]"
            ]
          },
          {
            "Name": "Undelegated",
            "TypeFields": [
              {
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "An \\[account\\] has cancelled a previous delegation operation."
            ]
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "62": {
        "Variants": [
          {
            "Name": "Submitted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 63,
                "Docs": [
                  "The track (and by extension proposal dispatch origin) of this referendum."
                ]
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 64,
                "Docs": [
                  "The proposal for the referendum."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A referendum has been submitted."
            ]
          },
          {
            "Name": "DecisionDepositPlaced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "The decision deposit has been placed."
            ]
          },
          {
            "Name": "DecisionDepositRefunded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "The decision deposit has been refunded."
            ]
          },
          {
            "Name": "DepositSlashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A deposit has been slashed."
            ]
          },
          {
            "Name": "DecisionStarted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 63,
                "Docs": [
                  "The track (and by extension proposal dispatch origin) of this referendum."
                ]
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 64,
                "Docs": [
                  "The proposal for the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 279,
                "Docs": [
                  "The current tally of votes in this referendum."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "A referendum has moved into the deciding phase."
            ]
          },
          {
            "Name": "ConfirmStarted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 5
          },
          {
            "Name": "ConfirmAborted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 6
          },
          {
            "Name": "Confirmed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 279,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "A referendum has ended its confirmation phase and is ready for approval."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "A referendum has been approved and its proposal has been scheduled."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 279,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 9,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "TimedOut",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 279,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 10,
            "Docs": [
              "A referendum has been timed out without being decided."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 279,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 11,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 279,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 12,
            "Docs": [
              "A referendum has been killed."
            ]
          },
          {
            "Name": "SubmissionDepositRefunded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 13,
            "Docs": [
              "The submission deposit has been refunded."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Metadata for a referendum has been set."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Metadata for a referendum has been cleared."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "63": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "64": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H::Output",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inline",
            "TypeFields": [
              {
                "TypeName": "BoundedInline",
                "TypeId": 278
              }
            ],
            "Index": 1
          },
          {
            "Name": "Lookup",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H::Output",
                "TypeId": 12
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "preimages",
          "Bounded"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 65
          },
          {
            "Name": "H",
            "TypeId": 277
          }
        ],
        "TypeDef": "Variant"
      },
      "65": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 66
              }
            ],
            "Index": 0
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 70
              }
            ],
            "Index": 1
          },
          {
            "Name": "Babe",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                "TypeId": 71
              }
            ],
            "Index": 3
          },
          {
            "Name": "Grandpa",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                "TypeId": 81
              }
            ],
            "Index": 4
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 93
              }
            ],
            "Index": 5
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                "TypeId": 98
              }
            ],
            "Index": 10
          },
          {
            "Name": "BagsList",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BagsList, Runtime>",
                "TypeId": 100
              }
            ],
            "Index": 11
          },
          {
            "Name": "ImOnline",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>",
                "TypeId": 101
              }
            ],
            "Index": 12
          },
          {
            "Name": "Staking",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                "TypeId": 105
              }
            ],
            "Index": 13
          },
          {
            "Name": "Session",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                "TypeId": 113
              }
            ],
            "Index": 7
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                "TypeId": 116
              }
            ],
            "Index": 14
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                "TypeId": 118
              }
            ],
            "Index": 8
          },
          {
            "Name": "ConvictionVoting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>",
                "TypeId": 124
              }
            ],
            "Index": 16
          },
          {
            "Name": "Referenda",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>",
                "TypeId": 129
              }
            ],
            "Index": 17
          },
          {
            "Name": "FellowshipCollective",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipCollective, Runtime>",
                "TypeId": 132
              }
            ],
            "Index": 18
          },
          {
            "Name": "FellowshipReferenda",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipReferenda, Runtime>",
                "TypeId": 133
              }
            ],
            "Index": 19
          },
          {
            "Name": "Whitelist",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>",
                "TypeId": 134
              }
            ],
            "Index": 21
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                "TypeId": 135
              }
            ],
            "Index": 22
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                "TypeId": 138
              }
            ],
            "Index": 23
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                "TypeId": 140
              }
            ],
            "Index": 24
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                "TypeId": 180
              }
            ],
            "Index": 25
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                "TypeId": 183
              }
            ],
            "Index": 26
          },
          {
            "Name": "ElectionProviderMultiPhase",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
                "TypeId": 186
              }
            ],
            "Index": 27
          },
          {
            "Name": "Bounties",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                "TypeId": 247
              }
            ],
            "Index": 29
          },
          {
            "Name": "ChildBounties",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ChildBounties, Runtime>",
                "TypeId": 248
              }
            ],
            "Index": 30
          },
          {
            "Name": "NominationPools",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NominationPools, Runtime>",
                "TypeId": 249
              }
            ],
            "Index": 31
          },
          {
            "Name": "Gear",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Gear, Runtime>",
                "TypeId": 260
              }
            ],
            "Index": 104
          },
          {
            "Name": "StakingRewards",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StakingRewards, Runtime>",
                "TypeId": 266
              }
            ],
            "Index": 106
          },
          {
            "Name": "GearVoucher",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<GearVoucher, Runtime>",
                "TypeId": 267
              }
            ],
            "Index": 107
          }
        ],
        "Path": [
          "vara_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "66": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::remark`]."
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 11
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::set_heap_pages`]."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::set_code`]."
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::set_code_without_checks`]."
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 67
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::set_storage`]."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 69
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::kill_storage`]."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 13
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::kill_prefix`]."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::remark_with_event`]."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "67": {
        "TypeId": 68,
        "TypeDef": "Sequence"
      },
      "68": {
        "TypeIds": [
          13,
          13
        ],
        "TypeDef": "Tuple"
      },
      "69": {
        "TypeId": 13,
        "TypeDef": "Sequence"
      },
      "70": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 10
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set`]."
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "71": {
        "Variants": [
          {
            "Name": "report_equivocation",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<HeaderFor<T>>>",
                "TypeId": 72
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 77
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::report_equivocation`]."
            ]
          },
          {
            "Name": "report_equivocation_unsigned",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<HeaderFor<T>>>",
                "TypeId": 72
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 77
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::report_equivocation_unsigned`]."
            ]
          },
          {
            "Name": "plan_config_change",
            "TypeFields": [
              {
                "Name": "config",
                "TypeName": "NextConfigDescriptor",
                "TypeId": 78
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::plan_config_change`]."
            ]
          }
        ],
        "Path": [
          "pallet_babe",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "72": {
        "TypeFields": [
          {
            "Name": "offender",
            "TypeName": "Id",
            "TypeId": 75
          },
          {
            "Name": "slot",
            "TypeName": "Slot",
            "TypeId": 76
          },
          {
            "Name": "first_header",
            "TypeName": "Header",
            "TypeId": 73
          },
          {
            "Name": "second_header",
            "TypeName": "Header",
            "TypeId": 73
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "EquivocationProof"
        ],
        "TypeParams": [
          {
            "Name": "Header",
            "TypeId": 73
          },
          {
            "Name": "Id",
            "TypeId": 75
          }
        ],
        "TypeDef": "Composite"
      },
      "73": {
        "TypeFields": [
          {
            "Name": "parent_hash",
            "TypeName": "Hash::Output",
            "TypeId": 12
          },
          {
            "Name": "number",
            "TypeName": "Number",
            "TypeId": 74
          },
          {
            "Name": "state_root",
            "TypeName": "Hash::Output",
            "TypeId": 12
          },
          {
            "Name": "extrinsics_root",
            "TypeName": "Hash::Output",
            "TypeId": 12
          },
          {
            "Name": "digest",
            "TypeName": "Digest",
            "TypeId": 14
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "header",
          "Header"
        ],
        "TypeParams": [
          {
            "Name": "Number",
            "TypeId": 4
          },
          {
            "Name": "Hash"
          }
        ],
        "TypeDef": "Composite"
      },
      "74": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "75": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 42
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "76": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "Slot"
        ],
        "TypeDef": "Composite"
      },
      "77": {
        "TypeFields": [
          {
            "Name": "session",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "trie_nodes",
            "TypeName": "Vec<Vec<u8>>",
            "TypeId": 69
          },
          {
            "Name": "validator_count",
            "TypeName": "ValidatorCount",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_session",
          "MembershipProof"
        ],
        "TypeDef": "Composite"
      },
      "78": {
        "Variants": [
          {
            "Name": "V1",
            "TypeFields": [
              {
                "Name": "c",
                "TypeName": "(u64, u64)",
                "TypeId": 79
              },
              {
                "Name": "allowed_slots",
                "TypeName": "AllowedSlots",
                "TypeId": 80
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "NextConfigDescriptor"
        ],
        "TypeDef": "Variant"
      },
      "79": {
        "TypeIds": [
          11,
          11
        ],
        "TypeDef": "Tuple"
      },
      "80": {
        "Variants": [
          {
            "Name": "PrimarySlots",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "PrimaryAndSecondaryPlainSlots",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "PrimaryAndSecondaryVRFSlots",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "AllowedSlots"
        ],
        "TypeDef": "Variant"
      },
      "81": {
        "Variants": [
          {
            "Name": "report_equivocation",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                "TypeId": 82
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 77
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::report_equivocation`]."
            ]
          },
          {
            "Name": "report_equivocation_unsigned",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                "TypeId": 82
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 77
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::report_equivocation_unsigned`]."
            ]
          },
          {
            "Name": "note_stalled",
            "TypeFields": [
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "best_finalized_block_number",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::note_stalled`]."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "82": {
        "TypeFields": [
          {
            "Name": "set_id",
            "TypeName": "SetId",
            "TypeId": 11
          },
          {
            "Name": "equivocation",
            "TypeName": "Equivocation<H, N>",
            "TypeId": 83
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "EquivocationProof"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "83": {
        "Variants": [
          {
            "Name": "Prevote",
            "TypeFields": [
              {
                "TypeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                "TypeId": 84
              }
            ],
            "Index": 0
          },
          {
            "Name": "Precommit",
            "TypeFields": [
              {
                "TypeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                "TypeId": 90
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "84": {
        "TypeFields": [
          {
            "Name": "round_number",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "identity",
            "TypeName": "Id",
            "TypeId": 33
          },
          {
            "Name": "first",
            "TypeName": "(V, S)",
            "TypeId": 89
          },
          {
            "Name": "second",
            "TypeName": "(V, S)",
            "TypeId": 89
          }
        ],
        "Path": [
          "finality_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 33
          },
          {
            "Name": "V",
            "TypeId": 85
          },
          {
            "Name": "S",
            "TypeId": 86
          }
        ],
        "TypeDef": "Composite"
      },
      "85": {
        "TypeFields": [
          {
            "Name": "target_hash",
            "TypeName": "H",
            "TypeId": 12
          },
          {
            "Name": "target_number",
            "TypeName": "N",
            "TypeId": 4
          }
        ],
        "Path": [
          "finality_grandpa",
          "Prevote"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "86": {
        "TypeFields": [
          {
            "TypeName": "ed25519::Signature",
            "TypeId": 87
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "app",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "87": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 88
          }
        ],
        "Path": [
          "sp_core",
          "ed25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "88": {
        "Length": 64,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "89": {
        "TypeIds": [
          85,
          86
        ],
        "TypeDef": "Tuple"
      },
      "90": {
        "TypeFields": [
          {
            "Name": "round_number",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "identity",
            "TypeName": "Id",
            "TypeId": 33
          },
          {
            "Name": "first",
            "TypeName": "(V, S)",
            "TypeId": 92
          },
          {
            "Name": "second",
            "TypeName": "(V, S)",
            "TypeId": 92
          }
        ],
        "Path": [
          "finality_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 33
          },
          {
            "Name": "V",
            "TypeId": 91
          },
          {
            "Name": "S",
            "TypeId": 86
          }
        ],
        "TypeDef": "Composite"
      },
      "91": {
        "TypeFields": [
          {
            "Name": "target_hash",
            "TypeName": "H",
            "TypeId": 12
          },
          {
            "Name": "target_number",
            "TypeName": "N",
            "TypeId": 4
          }
        ],
        "Path": [
          "finality_grandpa",
          "Precommit"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 12
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "92": {
        "TypeIds": [
          91,
          86
        ],
        "TypeDef": "Tuple"
      },
      "93": {
        "Variants": [
          {
            "Name": "transfer_allow_death",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 46
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::transfer_allow_death`]."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 46
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::force_transfer`]."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 46
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::transfer_keep_alive`]."
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::transfer_all`]."
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::force_unreserve`]."
            ]
          },
          {
            "Name": "upgrade_accounts",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 97
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::upgrade_accounts`]."
            ]
          },
          {
            "Name": "force_set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 46
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::force_set_balance`]."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "94": {
        "Variants": [
          {
            "Name": "Id",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "AccountIndex",
                "TypeId": 95
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 2
          },
          {
            "Name": "Address32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "Address20",
            "TypeFields": [
              {
                "TypeName": "[u8; 20]",
                "TypeId": 96
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "sp_runtime",
          "multiaddress",
          "MultiAddress"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AccountIndex",
            "TypeId": 58
          }
        ],
        "TypeDef": "Variant"
      },
      "95": {
        "TypeId": 58,
        "TypeDef": "Compact"
      },
      "96": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "97": {
        "TypeId": 0,
        "TypeDef": "Sequence"
      },
      "98": {
        "Variants": [
          {
            "Name": "vest",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "See [`Pallet::vest`]."
            ]
          },
          {
            "Name": "vest_other",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::vest_other`]."
            ]
          },
          {
            "Name": "vested_transfer",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "schedule",
                "TypeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                "TypeId": 99
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::vested_transfer`]."
            ]
          },
          {
            "Name": "force_vested_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "schedule",
                "TypeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                "TypeId": 99
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::force_vested_transfer`]."
            ]
          },
          {
            "Name": "merge_schedules",
            "TypeFields": [
              {
                "Name": "schedule1_index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "schedule2_index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::merge_schedules`]."
            ]
          },
          {
            "Name": "force_remove_vesting_schedule",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 94
              },
              {
                "Name": "schedule_index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::force_remove_vesting_schedule`]."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "99": {
        "TypeFields": [
          {
            "Name": "locked",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "per_block",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "starting_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_vesting",
          "vesting_info",
          "VestingInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "100": {
        "Variants": [
          {
            "Name": "rebag",
            "TypeFields": [
              {
                "Name": "dislocated",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::rebag`]."
            ]
          },
          {
            "Name": "put_in_front_of",
            "TypeFields": [
              {
                "Name": "lighter",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::put_in_front_of`]."
            ]
          },
          {
            "Name": "put_in_front_of_other",
            "TypeFields": [
              {
                "Name": "heavier",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "lighter",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::put_in_front_of_other`]."
            ]
          }
        ],
        "Path": [
          "pallet_bags_list",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "101": {
        "Variants": [
          {
            "Name": "heartbeat",
            "TypeFields": [
              {
                "Name": "heartbeat",
                "TypeName": "Heartbeat<BlockNumberFor<T>>",
                "TypeId": 102
              },
              {
                "Name": "signature",
                "TypeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                "TypeId": 103
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::heartbeat`]."
            ]
          }
        ],
        "Path": [
          "pallet_im_online",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "102": {
        "TypeFields": [
          {
            "Name": "block_number",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "session_index",
            "TypeName": "SessionIndex",
            "TypeId": 4
          },
          {
            "Name": "authority_index",
            "TypeName": "AuthIndex",
            "TypeId": 4
          },
          {
            "Name": "validators_len",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_im_online",
          "Heartbeat"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "103": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Signature",
            "TypeId": 104
          }
        ],
        "Path": [
          "pallet_im_online",
          "sr25519",
          "app_sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "104": {
        "TypeFields": [
          {
            "TypeName": "[u8; 64]",
            "TypeId": 88
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "105": {
        "Variants": [
          {
            "Name": "bond",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 46
              },
              {
                "Name": "payee",
                "TypeName": "RewardDestination<T::AccountId>",
                "TypeId": 50
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::bond`]."
            ]
          },
          {
            "Name": "bond_extra",
            "TypeFields": [
              {
                "Name": "max_additional",
                "TypeName": "BalanceOf<T>",
                "TypeId": 46
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::bond_extra`]."
            ]
          },
          {
            "Name": "unbond",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 46
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::unbond`]."
            ]
          },
          {
            "Name": "withdraw_unbonded",
            "TypeFields": [
              {
                "Name": "num_slashing_spans",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::withdraw_unbonded`]."
            ]
          },
          {
            "Name": "validate",
            "TypeFields": [
              {
                "Name": "prefs",
                "TypeName": "ValidatorPrefs",
                "TypeId": 52
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::validate`]."
            ]
          },
          {
            "Name": "nominate",
            "TypeFields": [
              {
                "Name": "targets",
                "TypeName": "Vec<AccountIdLookupOf<T>>",
                "TypeId": 106
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::nominate`]."
            ]
          },
          {
            "Name": "chill",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "See [`Pallet::chill`]."
            ]
          },
          {
            "Name": "set_payee",
            "TypeFields": [
              {
                "Name": "payee",
                "TypeName": "RewardDestination<T::AccountId>",
                "TypeId": 50
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::set_payee`]."
            ]
          },
          {
            "Name": "set_controller",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "See [`Pallet::set_controller`]."
            ]
          },
          {
            "Name": "set_validator_count",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "u32",
                "TypeId": 74
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::set_validator_count`]."
            ]
          },
          {
            "Name": "increase_validator_count",
            "TypeFields": [
              {
                "Name": "additional",
                "TypeName": "u32",
                "TypeId": 74
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::increase_validator_count`]."
            ]
          },
          {
            "Name": "scale_validator_count",
            "TypeFields": [
              {
                "Name": "factor",
                "TypeName": "Percent",
                "TypeId": 107
              }
            ],
            "Index": 11,
            "Docs": [
              "See [`Pallet::scale_validator_count`]."
            ]
          },
          {
            "Name": "force_no_eras",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "See [`Pallet::force_no_eras`]."
            ]
          },
          {
            "Name": "force_new_era",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "See [`Pallet::force_new_era`]."
            ]
          },
          {
            "Name": "set_invulnerables",
            "TypeFields": [
              {
                "Name": "invulnerables",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 97
              }
            ],
            "Index": 14,
            "Docs": [
              "See [`Pallet::set_invulnerables`]."
            ]
          },
          {
            "Name": "force_unstake",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "num_slashing_spans",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "See [`Pallet::force_unstake`]."
            ]
          },
          {
            "Name": "force_new_era_always",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "See [`Pallet::force_new_era_always`]."
            ]
          },
          {
            "Name": "cancel_deferred_slash",
            "TypeFields": [
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "slash_indices",
                "TypeName": "Vec<u32>",
                "TypeId": 108
              }
            ],
            "Index": 17,
            "Docs": [
              "See [`Pallet::cancel_deferred_slash`]."
            ]
          },
          {
            "Name": "payout_stakers",
            "TypeFields": [
              {
                "Name": "validator_stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 18,
            "Docs": [
              "See [`Pallet::payout_stakers`]."
            ]
          },
          {
            "Name": "rebond",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 46
              }
            ],
            "Index": 19,
            "Docs": [
              "See [`Pallet::rebond`]."
            ]
          },
          {
            "Name": "reap_stash",
            "TypeFields": [
              {
                "Name": "stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "num_slashing_spans",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 20,
            "Docs": [
              "See [`Pallet::reap_stash`]."
            ]
          },
          {
            "Name": "kick",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "Vec<AccountIdLookupOf<T>>",
                "TypeId": 106
              }
            ],
            "Index": 21,
            "Docs": [
              "See [`Pallet::kick`]."
            ]
          },
          {
            "Name": "set_staking_configs",
            "TypeFields": [
              {
                "Name": "min_nominator_bond",
                "TypeName": "ConfigOp<BalanceOf<T>>",
                "TypeId": 109
              },
              {
                "Name": "min_validator_bond",
                "TypeName": "ConfigOp<BalanceOf<T>>",
                "TypeId": 109
              },
              {
                "Name": "max_nominator_count",
                "TypeName": "ConfigOp<u32>",
                "TypeId": 110
              },
              {
                "Name": "max_validator_count",
                "TypeName": "ConfigOp<u32>",
                "TypeId": 110
              },
              {
                "Name": "chill_threshold",
                "TypeName": "ConfigOp<Percent>",
                "TypeId": 111
              },
              {
                "Name": "min_commission",
                "TypeName": "ConfigOp<Perbill>",
                "TypeId": 112
              }
            ],
            "Index": 22,
            "Docs": [
              "See [`Pallet::set_staking_configs`]."
            ]
          },
          {
            "Name": "chill_other",
            "TypeFields": [
              {
                "Name": "controller",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 23,
            "Docs": [
              "See [`Pallet::chill_other`]."
            ]
          },
          {
            "Name": "force_apply_min_commission",
            "TypeFields": [
              {
                "Name": "validator_stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 24,
            "Docs": [
              "See [`Pallet::force_apply_min_commission`]."
            ]
          },
          {
            "Name": "set_min_commission",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "Perbill",
                "TypeId": 51
              }
            ],
            "Index": 25,
            "Docs": [
              "See [`Pallet::set_min_commission`]."
            ]
          },
          {
            "Name": "payout_stakers_by_page",
            "TypeFields": [
              {
                "Name": "validator_stash",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "page",
                "TypeName": "Page",
                "TypeId": 4
              }
            ],
            "Index": 26,
            "Docs": [
              "See [`Pallet::payout_stakers_by_page`]."
            ]
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "106": {
        "TypeId": 94,
        "TypeDef": "Sequence"
      },
      "107": {
        "TypeFields": [
          {
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Percent"
        ],
        "TypeDef": "Composite"
      },
      "108": {
        "TypeId": 4,
        "TypeDef": "Sequence"
      },
      "109": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "110": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "111": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 107
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 107
          }
        ],
        "TypeDef": "Variant"
      },
      "112": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 51
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 51
          }
        ],
        "TypeDef": "Variant"
      },
      "113": {
        "Variants": [
          {
            "Name": "set_keys",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "T::Keys",
                "TypeId": 114
              },
              {
                "Name": "proof",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::set_keys`]."
            ]
          },
          {
            "Name": "purge_keys",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "See [`Pallet::purge_keys`]."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "114": {
        "TypeFields": [
          {
            "Name": "babe",
            "TypeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 75
          },
          {
            "Name": "grandpa",
            "TypeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 33
          },
          {
            "Name": "im_online",
            "TypeName": "<ImOnline as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 41
          },
          {
            "Name": "authority_discovery",
            "TypeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public",
            "TypeId": 115
          }
        ],
        "Path": [
          "vara_runtime",
          "SessionKeys"
        ],
        "TypeDef": "Composite"
      },
      "115": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 42
          }
        ],
        "Path": [
          "sp_authority_discovery",
          "app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "116": {
        "Variants": [
          {
            "Name": "propose_spend",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 46
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::propose_spend`]."
            ]
          },
          {
            "Name": "reject_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 74
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::reject_proposal`]."
            ]
          },
          {
            "Name": "approve_proposal",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 74
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::approve_proposal`]."
            ]
          },
          {
            "Name": "spend_local",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 46
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::spend_local`]."
            ]
          },
          {
            "Name": "remove_approval",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 74
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::remove_approval`]."
            ]
          },
          {
            "Name": "spend",
            "TypeFields": [
              {
                "Name": "asset_kind",
                "TypeName": "Box<T::AssetKind>",
                "TypeId": 58
              },
              {
                "Name": "amount",
                "TypeName": "AssetBalanceOf<T, I>",
                "TypeId": 46
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<BeneficiaryLookupOf<T, I>>",
                "TypeId": 0
              },
              {
                "Name": "valid_from",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 117
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::spend`]."
            ]
          },
          {
            "Name": "payout",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::payout`]."
            ]
          },
          {
            "Name": "check_status",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::check_status`]."
            ]
          },
          {
            "Name": "void_spend",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::void_spend`]."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "117": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "118": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 119
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::batch`]."
            ]
          },
          {
            "Name": "as_derivative",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 63
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 65
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::as_derivative`]."
            ]
          },
          {
            "Name": "batch_all",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 119
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::batch_all`]."
            ]
          },
          {
            "Name": "dispatch_as",
            "TypeFields": [
              {
                "Name": "as_origin",
                "TypeName": "Box<T::PalletsOrigin>",
                "TypeId": 120
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 65
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::dispatch_as`]."
            ]
          },
          {
            "Name": "force_batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 119
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::force_batch`]."
            ]
          },
          {
            "Name": "with_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 65
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::with_weight`]."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "119": {
        "TypeId": 65,
        "TypeDef": "Sequence"
      },
      "120": {
        "Variants": [
          {
            "Name": "system",
            "TypeFields": [
              {
                "TypeName": "frame_system::Origin<Runtime>",
                "TypeId": 121
              }
            ],
            "Index": 0
          },
          {
            "Name": "Origins",
            "TypeFields": [
              {
                "TypeName": "pallet_custom_origins::Origin",
                "TypeId": 122
              }
            ],
            "Index": 20
          },
          {
            "Name": "Void",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void",
                "TypeId": 123
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "vara_runtime",
          "OriginCaller"
        ],
        "TypeDef": "Variant"
      },
      "121": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "122": {
        "Variants": [
          {
            "Name": "StakingAdmin",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Treasurer",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "FellowshipAdmin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "GeneralAdmin",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "ReferendumCanceller",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "ReferendumKiller",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "SmallTipper",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "BigTipper",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "SmallSpender",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "MediumSpender",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "BigSpender",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "WhitelistedCaller",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "FellowshipInitiates",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "Fellows",
            "TypeFields": null,
            "Index": 13
          },
          {
            "Name": "FellowshipExperts",
            "TypeFields": null,
            "Index": 14
          },
          {
            "Name": "FellowshipMasters",
            "TypeFields": null,
            "Index": 15
          },
          {
            "Name": "Fellowship1Dan",
            "TypeFields": null,
            "Index": 16
          },
          {
            "Name": "Fellowship2Dan",
            "TypeFields": null,
            "Index": 17
          },
          {
            "Name": "Fellowship3Dan",
            "TypeFields": null,
            "Index": 18
          },
          {
            "Name": "Fellowship4Dan",
            "TypeFields": null,
            "Index": 19
          },
          {
            "Name": "Fellowship5Dan",
            "TypeFields": null,
            "Index": 20
          },
          {
            "Name": "Fellowship6Dan",
            "TypeFields": null,
            "Index": 21
          },
          {
            "Name": "Fellowship7Dan",
            "TypeFields": null,
            "Index": 22
          },
          {
            "Name": "Fellowship8Dan",
            "TypeFields": null,
            "Index": 23
          },
          {
            "Name": "Fellowship9Dan",
            "TypeFields": null,
            "Index": 24
          }
        ],
        "Path": [
          "vara_runtime",
          "governance",
          "origins",
          "pallet_custom_origins",
          "Origin"
        ],
        "TypeDef": "Variant"
      },
      "123": {
        "Variants": null,
        "Path": [
          "sp_core",
          "Void"
        ],
        "TypeDef": "Variant"
      },
      "124": {
        "Variants": [
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "poll_index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 74
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T, I>>",
                "TypeId": 125
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::vote`]."
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 63
              },
              {
                "Name": "to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 127
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::delegate`]."
            ]
          },
          {
            "Name": "undelegate",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 63
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::undelegate`]."
            ]
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 63
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::unlock`]."
            ]
          },
          {
            "Name": "remove_vote",
            "TypeFields": [
              {
                "Name": "class",
                "TypeName": "Option<ClassOf<T, I>>",
                "TypeId": 128
              },
              {
                "Name": "index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::remove_vote`]."
            ]
          },
          {
            "Name": "remove_other_vote",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "class",
                "TypeName": "ClassOf<T, I>",
                "TypeId": 63
              },
              {
                "Name": "index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::remove_other_vote`]."
            ]
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "125": {
        "Variants": [
          {
            "Name": "Standard",
            "TypeFields": [
              {
                "Name": "vote",
                "TypeName": "Vote",
                "TypeId": 126
              },
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Split",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "SplitAbstain",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "abstain",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "AccountVote"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "126": {
        "TypeFields": [
          {
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "Vote"
        ],
        "TypeDef": "Composite"
      },
      "127": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Locked1x",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Locked2x",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Locked3x",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Locked4x",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Locked5x",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Locked6x",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "conviction",
          "Conviction"
        ],
        "TypeDef": "Variant"
      },
      "128": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 63
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 63
          }
        ],
        "TypeDef": "Variant"
      },
      "129": {
        "Variants": [
          {
            "Name": "submit",
            "TypeFields": [
              {
                "Name": "proposal_origin",
                "TypeName": "Box<PalletsOriginOf<T>>",
                "TypeId": 120
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 64
              },
              {
                "Name": "enactment_moment",
                "TypeName": "DispatchTime<BlockNumberFor<T>>",
                "TypeId": 130
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::submit`]."
            ]
          },
          {
            "Name": "place_decision_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::place_decision_deposit`]."
            ]
          },
          {
            "Name": "refund_decision_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::refund_decision_deposit`]."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::cancel`]."
            ]
          },
          {
            "Name": "kill",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::kill`]."
            ]
          },
          {
            "Name": "nudge_referendum",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::nudge_referendum`]."
            ]
          },
          {
            "Name": "one_fewer_deciding",
            "TypeFields": [
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 63
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::one_fewer_deciding`]."
            ]
          },
          {
            "Name": "refund_submission_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::refund_submission_deposit`]."
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "maybe_hash",
                "TypeName": "Option<T::Hash>",
                "TypeId": 131
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::set_metadata`]."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "130": {
        "Variants": [
          {
            "Name": "At",
            "TypeFields": [
              {
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "After",
            "TypeFields": [
              {
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "schedule",
          "DispatchTime"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "131": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 12
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 12
          }
        ],
        "TypeDef": "Variant"
      },
      "132": {
        "Variants": [
          {
            "Name": "add_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::add_member`]."
            ]
          },
          {
            "Name": "promote_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::promote_member`]."
            ]
          },
          {
            "Name": "demote_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::demote_member`]."
            ]
          },
          {
            "Name": "remove_member",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "min_rank",
                "TypeName": "Rank",
                "TypeId": 63
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::remove_member`]."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "poll",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "aye",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::vote`]."
            ]
          },
          {
            "Name": "cleanup_poll",
            "TypeFields": [
              {
                "Name": "poll_index",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "max",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::cleanup_poll`]."
            ]
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "133": {
        "Variants": [
          {
            "Name": "submit",
            "TypeFields": [
              {
                "Name": "proposal_origin",
                "TypeName": "Box<PalletsOriginOf<T>>",
                "TypeId": 120
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 64
              },
              {
                "Name": "enactment_moment",
                "TypeName": "DispatchTime<BlockNumberFor<T>>",
                "TypeId": 130
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::submit`]."
            ]
          },
          {
            "Name": "place_decision_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::place_decision_deposit`]."
            ]
          },
          {
            "Name": "refund_decision_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::refund_decision_deposit`]."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::cancel`]."
            ]
          },
          {
            "Name": "kill",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::kill`]."
            ]
          },
          {
            "Name": "nudge_referendum",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::nudge_referendum`]."
            ]
          },
          {
            "Name": "one_fewer_deciding",
            "TypeFields": [
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 63
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::one_fewer_deciding`]."
            ]
          },
          {
            "Name": "refund_submission_deposit",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::refund_submission_deposit`]."
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "maybe_hash",
                "TypeName": "Option<T::Hash>",
                "TypeId": 131
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::set_metadata`]."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "134": {
        "Variants": [
          {
            "Name": "whitelist_call",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::whitelist_call`]."
            ]
          },
          {
            "Name": "remove_whitelisted_call",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::remove_whitelisted_call`]."
            ]
          },
          {
            "Name": "dispatch_whitelisted_call",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "call_encoded_len",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "call_weight_witness",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::dispatch_whitelisted_call`]."
            ]
          },
          {
            "Name": "dispatch_whitelisted_call_with_preimage",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 65
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::dispatch_whitelisted_call_with_preimage`]."
            ]
          }
        ],
        "Path": [
          "pallet_whitelist",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "135": {
        "Variants": [
          {
            "Name": "schedule",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 136
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 65
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::schedule`]."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::cancel`]."
            ]
          },
          {
            "Name": "schedule_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 136
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 65
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::schedule_named`]."
            ]
          },
          {
            "Name": "cancel_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::cancel_named`]."
            ]
          },
          {
            "Name": "schedule_after",
            "TypeFields": [
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 136
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 65
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::schedule_after`]."
            ]
          },
          {
            "Name": "schedule_named_after",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 136
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 65
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::schedule_named_after`]."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "136": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 137
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 137
          }
        ],
        "TypeDef": "Variant"
      },
      "137": {
        "TypeIds": [
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "138": {
        "Variants": [
          {
            "Name": "note_preimage",
            "TypeFields": [
              {
                "Name": "bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::note_preimage`]."
            ]
          },
          {
            "Name": "unnote_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::unnote_preimage`]."
            ]
          },
          {
            "Name": "request_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::request_preimage`]."
            ]
          },
          {
            "Name": "unrequest_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::unrequest_preimage`]."
            ]
          },
          {
            "Name": "ensure_updated",
            "TypeFields": [
              {
                "Name": "hashes",
                "TypeName": "Vec<T::Hash>",
                "TypeId": 139
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::ensure_updated`]."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "139": {
        "TypeId": 12,
        "TypeDef": "Sequence"
      },
      "140": {
        "Variants": [
          {
            "Name": "add_registrar",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::add_registrar`]."
            ]
          },
          {
            "Name": "set_identity",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "Box<T::IdentityInformation>",
                "TypeId": 141
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::set_identity`]."
            ]
          },
          {
            "Name": "set_subs",
            "TypeFields": [
              {
                "Name": "subs",
                "TypeName": "Vec<(T::AccountId, Data)>",
                "TypeId": 177
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::set_subs`]."
            ]
          },
          {
            "Name": "clear_identity",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "See [`Pallet::clear_identity`]."
            ]
          },
          {
            "Name": "request_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 74
              },
              {
                "Name": "max_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 46
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::request_judgement`]."
            ]
          },
          {
            "Name": "cancel_request",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::cancel_request`]."
            ]
          },
          {
            "Name": "set_fee",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 74
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 46
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::set_fee`]."
            ]
          },
          {
            "Name": "set_account_id",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 74
              },
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::set_account_id`]."
            ]
          },
          {
            "Name": "set_fields",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 74
              },
              {
                "Name": "fields",
                "TypeName": "<T::IdentityInformation as IdentityInformationProvider>::\nFieldsIdentifier",
                "TypeId": 11
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::set_fields`]."
            ]
          },
          {
            "Name": "provide_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 74
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "judgement",
                "TypeName": "Judgement<BalanceOf<T>>",
                "TypeId": 179
              },
              {
                "Name": "identity",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::provide_judgement`]."
            ]
          },
          {
            "Name": "kill_identity",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::kill_identity`]."
            ]
          },
          {
            "Name": "add_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 144
              }
            ],
            "Index": 11,
            "Docs": [
              "See [`Pallet::add_sub`]."
            ]
          },
          {
            "Name": "rename_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 144
              }
            ],
            "Index": 12,
            "Docs": [
              "See [`Pallet::rename_sub`]."
            ]
          },
          {
            "Name": "remove_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 13,
            "Docs": [
              "See [`Pallet::remove_sub`]."
            ]
          },
          {
            "Name": "quit_sub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "See [`Pallet::quit_sub`]."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Identity pallet declaration."
        ]
      },
      "141": {
        "TypeFields": [
          {
            "Name": "additional",
            "TypeName": "BoundedVec<(Data, Data), FieldLimit>",
            "TypeId": 142
          },
          {
            "Name": "display",
            "TypeName": "Data",
            "TypeId": 144
          },
          {
            "Name": "legal",
            "TypeName": "Data",
            "TypeId": 144
          },
          {
            "Name": "web",
            "TypeName": "Data",
            "TypeId": 144
          },
          {
            "Name": "riot",
            "TypeName": "Data",
            "TypeId": 144
          },
          {
            "Name": "email",
            "TypeName": "Data",
            "TypeId": 144
          },
          {
            "Name": "pgp_fingerprint",
            "TypeName": "Option<[u8; 20]>",
            "TypeId": 176
          },
          {
            "Name": "image",
            "TypeName": "Data",
            "TypeId": 144
          },
          {
            "Name": "twitter",
            "TypeName": "Data",
            "TypeId": 144
          }
        ],
        "Path": [
          "pallet_identity",
          "legacy",
          "IdentityInfo"
        ],
        "TypeParams": [
          {
            "Name": "FieldLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "142": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 175
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 143
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "143": {
        "TypeIds": [
          144,
          144
        ],
        "TypeDef": "Tuple"
      },
      "144": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Raw0",
            "TypeFields": [
              {
                "TypeId": 145
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw1",
            "TypeFields": [
              {
                "TypeId": 146
              }
            ],
            "Index": 2
          },
          {
            "Name": "Raw2",
            "TypeFields": [
              {
                "TypeId": 147
              }
            ],
            "Index": 3
          },
          {
            "Name": "Raw3",
            "TypeFields": [
              {
                "TypeId": 148
              }
            ],
            "Index": 4
          },
          {
            "Name": "Raw4",
            "TypeFields": [
              {
                "TypeId": 17
              }
            ],
            "Index": 5
          },
          {
            "Name": "Raw5",
            "TypeFields": [
              {
                "TypeId": 149
              }
            ],
            "Index": 6
          },
          {
            "Name": "Raw6",
            "TypeFields": [
              {
                "TypeId": 150
              }
            ],
            "Index": 7
          },
          {
            "Name": "Raw7",
            "TypeFields": [
              {
                "TypeId": 151
              }
            ],
            "Index": 8
          },
          {
            "Name": "Raw8",
            "TypeFields": [
              {
                "TypeId": 152
              }
            ],
            "Index": 9
          },
          {
            "Name": "Raw9",
            "TypeFields": [
              {
                "TypeId": 153
              }
            ],
            "Index": 10
          },
          {
            "Name": "Raw10",
            "TypeFields": [
              {
                "TypeId": 154
              }
            ],
            "Index": 11
          },
          {
            "Name": "Raw11",
            "TypeFields": [
              {
                "TypeId": 155
              }
            ],
            "Index": 12
          },
          {
            "Name": "Raw12",
            "TypeFields": [
              {
                "TypeId": 156
              }
            ],
            "Index": 13
          },
          {
            "Name": "Raw13",
            "TypeFields": [
              {
                "TypeId": 157
              }
            ],
            "Index": 14
          },
          {
            "Name": "Raw14",
            "TypeFields": [
              {
                "TypeId": 158
              }
            ],
            "Index": 15
          },
          {
            "Name": "Raw15",
            "TypeFields": [
              {
                "TypeId": 159
              }
            ],
            "Index": 16
          },
          {
            "Name": "Raw16",
            "TypeFields": [
              {
                "TypeId": 160
              }
            ],
            "Index": 17
          },
          {
            "Name": "Raw17",
            "TypeFields": [
              {
                "TypeId": 161
              }
            ],
            "Index": 18
          },
          {
            "Name": "Raw18",
            "TypeFields": [
              {
                "TypeId": 162
              }
            ],
            "Index": 19
          },
          {
            "Name": "Raw19",
            "TypeFields": [
              {
                "TypeId": 163
              }
            ],
            "Index": 20
          },
          {
            "Name": "Raw20",
            "TypeFields": [
              {
                "TypeId": 96
              }
            ],
            "Index": 21
          },
          {
            "Name": "Raw21",
            "TypeFields": [
              {
                "TypeId": 164
              }
            ],
            "Index": 22
          },
          {
            "Name": "Raw22",
            "TypeFields": [
              {
                "TypeId": 165
              }
            ],
            "Index": 23
          },
          {
            "Name": "Raw23",
            "TypeFields": [
              {
                "TypeId": 166
              }
            ],
            "Index": 24
          },
          {
            "Name": "Raw24",
            "TypeFields": [
              {
                "TypeId": 167
              }
            ],
            "Index": 25
          },
          {
            "Name": "Raw25",
            "TypeFields": [
              {
                "TypeId": 168
              }
            ],
            "Index": 26
          },
          {
            "Name": "Raw26",
            "TypeFields": [
              {
                "TypeId": 169
              }
            ],
            "Index": 27
          },
          {
            "Name": "Raw27",
            "TypeFields": [
              {
                "TypeId": 170
              }
            ],
            "Index": 28
          },
          {
            "Name": "Raw28",
            "TypeFields": [
              {
                "TypeId": 171
              }
            ],
            "Index": 29
          },
          {
            "Name": "Raw29",
            "TypeFields": [
              {
                "TypeId": 172
              }
            ],
            "Index": 30
          },
          {
            "Name": "Raw30",
            "TypeFields": [
              {
                "TypeId": 173
              }
            ],
            "Index": 31
          },
          {
            "Name": "Raw31",
            "TypeFields": [
              {
                "TypeId": 174
              }
            ],
            "Index": 32
          },
          {
            "Name": "Raw32",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 33
          },
          {
            "Name": "BlakeTwo256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 34
          },
          {
            "Name": "Sha256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 35
          },
          {
            "Name": "Keccak256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 36
          },
          {
            "Name": "ShaThree256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 37
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Data"
        ],
        "TypeDef": "Variant"
      },
      "145": {
        "Length": 0,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "146": {
        "Length": 1,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "147": {
        "Length": 2,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "148": {
        "Length": 3,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "149": {
        "Length": 5,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "150": {
        "Length": 6,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "151": {
        "Length": 7,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "152": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "153": {
        "Length": 9,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "154": {
        "Length": 10,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "155": {
        "Length": 11,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "156": {
        "Length": 12,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "157": {
        "Length": 13,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "158": {
        "Length": 14,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "159": {
        "Length": 15,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "160": {
        "Length": 16,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "161": {
        "Length": 17,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "162": {
        "Length": 18,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "163": {
        "Length": 19,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "164": {
        "Length": 21,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "165": {
        "Length": 22,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "166": {
        "Length": 23,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "167": {
        "Length": 24,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "168": {
        "Length": 25,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "169": {
        "Length": 26,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "170": {
        "Length": 27,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "171": {
        "Length": 28,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "172": {
        "Length": 29,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "173": {
        "Length": 30,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "174": {
        "Length": 31,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "175": {
        "TypeId": 143,
        "TypeDef": "Sequence"
      },
      "176": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 96
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 96
          }
        ],
        "TypeDef": "Variant"
      },
      "177": {
        "TypeId": 178,
        "TypeDef": "Sequence"
      },
      "178": {
        "TypeIds": [
          0,
          144
        ],
        "TypeDef": "Tuple"
      },
      "179": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "FeePaid",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reasonable",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "KnownGood",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "OutOfDate",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LowQuality",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Erroneous",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Judgement"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "180": {
        "Variants": [
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 181
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 65
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::proxy`]."
            ]
          },
          {
            "Name": "add_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 182
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::add_proxy`]."
            ]
          },
          {
            "Name": "remove_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 182
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::remove_proxy`]."
            ]
          },
          {
            "Name": "remove_proxies",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "See [`Pallet::remove_proxies`]."
            ]
          },
          {
            "Name": "create_pure",
            "TypeFields": [
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 182
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 63
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::create_pure`]."
            ]
          },
          {
            "Name": "kill_pure",
            "TypeFields": [
              {
                "Name": "spawner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 182
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 63
              },
              {
                "Name": "height",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 74
              },
              {
                "Name": "ext_index",
                "TypeName": "u32",
                "TypeId": 74
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::kill_pure`]."
            ]
          },
          {
            "Name": "announce",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::announce`]."
            ]
          },
          {
            "Name": "remove_announcement",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::remove_announcement`]."
            ]
          },
          {
            "Name": "reject_announcement",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::reject_announcement`]."
            ]
          },
          {
            "Name": "proxy_announced",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 181
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 65
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::proxy_announced`]."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "181": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 182
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 182
          }
        ],
        "TypeDef": "Variant"
      },
      "182": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NonTransfer",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Governance",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Staking",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "IdentityJudgement",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "CancelProxy",
            "TypeFields": null,
            "Index": 5
          }
        ],
        "Path": [
          "vara_runtime",
          "ProxyType"
        ],
        "TypeDef": "Variant"
      },
      "183": {
        "Variants": [
          {
            "Name": "as_multi_threshold_1",
            "TypeFields": [
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 97
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 65
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::as_multi_threshold_1`]."
            ]
          },
          {
            "Name": "as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 63
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 97
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 184
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 65
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::as_multi`]."
            ]
          },
          {
            "Name": "approve_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 63
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 97
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 184
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 9
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::approve_as_multi`]."
            ]
          },
          {
            "Name": "cancel_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 63
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 97
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 185
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::cancel_as_multi`]."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "184": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 185
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 185
          }
        ],
        "TypeDef": "Variant"
      },
      "185": {
        "TypeFields": [
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_multisig",
          "Timepoint"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "186": {
        "Variants": [
          {
            "Name": "submit_unsigned",
            "TypeFields": [
              {
                "Name": "raw_solution",
                "TypeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                "TypeId": 187
              },
              {
                "Name": "witness",
                "TypeName": "SolutionOrSnapshotSize",
                "TypeId": 240
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::submit_unsigned`]."
            ]
          },
          {
            "Name": "set_minimum_untrusted_score",
            "TypeFields": [
              {
                "Name": "maybe_next_score",
                "TypeName": "Option<ElectionScore>",
                "TypeId": 241
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::set_minimum_untrusted_score`]."
            ]
          },
          {
            "Name": "set_emergency_election_result",
            "TypeFields": [
              {
                "Name": "supports",
                "TypeName": "Supports<T::AccountId>",
                "TypeId": 242
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::set_emergency_election_result`]."
            ]
          },
          {
            "Name": "submit",
            "TypeFields": [
              {
                "Name": "raw_solution",
                "TypeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                "TypeId": 187
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::submit`]."
            ]
          },
          {
            "Name": "governance_fallback",
            "TypeFields": [
              {
                "Name": "maybe_max_voters",
                "TypeName": "Option<u32>",
                "TypeId": 117
              },
              {
                "Name": "maybe_max_targets",
                "TypeName": "Option<u32>",
                "TypeId": 117
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::governance_fallback`]."
            ]
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "187": {
        "TypeFields": [
          {
            "Name": "solution",
            "TypeName": "S",
            "TypeId": 188
          },
          {
            "Name": "score",
            "TypeName": "ElectionScore",
            "TypeId": 239
          },
          {
            "Name": "round",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "RawSolution"
        ],
        "TypeParams": [
          {
            "Name": "S",
            "TypeId": 188
          }
        ],
        "TypeDef": "Composite"
      },
      "188": {
        "TypeFields": [
          {
            "Name": "votes1",
            "TypeId": 189
          },
          {
            "Name": "votes2",
            "TypeId": 192
          },
          {
            "Name": "votes3",
            "TypeId": 197
          },
          {
            "Name": "votes4",
            "TypeId": 200
          },
          {
            "Name": "votes5",
            "TypeId": 203
          },
          {
            "Name": "votes6",
            "TypeId": 206
          },
          {
            "Name": "votes7",
            "TypeId": 209
          },
          {
            "Name": "votes8",
            "TypeId": 212
          },
          {
            "Name": "votes9",
            "TypeId": 215
          },
          {
            "Name": "votes10",
            "TypeId": 218
          },
          {
            "Name": "votes11",
            "TypeId": 221
          },
          {
            "Name": "votes12",
            "TypeId": 224
          },
          {
            "Name": "votes13",
            "TypeId": 227
          },
          {
            "Name": "votes14",
            "TypeId": 230
          },
          {
            "Name": "votes15",
            "TypeId": 233
          },
          {
            "Name": "votes16",
            "TypeId": 236
          }
        ],
        "Path": [
          "vara_runtime",
          "NposSolution16"
        ],
        "TypeDef": "Composite"
      },
      "189": {
        "TypeId": 190,
        "TypeDef": "Sequence"
      },
      "190": {
        "TypeIds": [
          74,
          191
        ],
        "TypeDef": "Tuple"
      },
      "191": {
        "TypeId": 63,
        "TypeDef": "Compact"
      },
      "192": {
        "TypeId": 193,
        "TypeDef": "Sequence"
      },
      "193": {
        "TypeIds": [
          74,
          194,
          191
        ],
        "TypeDef": "Tuple"
      },
      "194": {
        "TypeIds": [
          191,
          195
        ],
        "TypeDef": "Tuple"
      },
      "195": {
        "TypeId": 196,
        "TypeDef": "Compact"
      },
      "196": {
        "TypeFields": [
          {
            "TypeName": "u16",
            "TypeId": 63
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "PerU16"
        ],
        "TypeDef": "Composite"
      },
      "197": {
        "TypeId": 198,
        "TypeDef": "Sequence"
      },
      "198": {
        "TypeIds": [
          74,
          199,
          191
        ],
        "TypeDef": "Tuple"
      },
      "199": {
        "Length": 2,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "200": {
        "TypeId": 201,
        "TypeDef": "Sequence"
      },
      "201": {
        "TypeIds": [
          74,
          202,
          191
        ],
        "TypeDef": "Tuple"
      },
      "202": {
        "Length": 3,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "203": {
        "TypeId": 204,
        "TypeDef": "Sequence"
      },
      "204": {
        "TypeIds": [
          74,
          205,
          191
        ],
        "TypeDef": "Tuple"
      },
      "205": {
        "Length": 4,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "206": {
        "TypeId": 207,
        "TypeDef": "Sequence"
      },
      "207": {
        "TypeIds": [
          74,
          208,
          191
        ],
        "TypeDef": "Tuple"
      },
      "208": {
        "Length": 5,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "209": {
        "TypeId": 210,
        "TypeDef": "Sequence"
      },
      "210": {
        "TypeIds": [
          74,
          211,
          191
        ],
        "TypeDef": "Tuple"
      },
      "211": {
        "Length": 6,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "212": {
        "TypeId": 213,
        "TypeDef": "Sequence"
      },
      "213": {
        "TypeIds": [
          74,
          214,
          191
        ],
        "TypeDef": "Tuple"
      },
      "214": {
        "Length": 7,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "215": {
        "TypeId": 216,
        "TypeDef": "Sequence"
      },
      "216": {
        "TypeIds": [
          74,
          217,
          191
        ],
        "TypeDef": "Tuple"
      },
      "217": {
        "Length": 8,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "218": {
        "TypeId": 219,
        "TypeDef": "Sequence"
      },
      "219": {
        "TypeIds": [
          74,
          220,
          191
        ],
        "TypeDef": "Tuple"
      },
      "220": {
        "Length": 9,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "221": {
        "TypeId": 222,
        "TypeDef": "Sequence"
      },
      "222": {
        "TypeIds": [
          74,
          223,
          191
        ],
        "TypeDef": "Tuple"
      },
      "223": {
        "Length": 10,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "224": {
        "TypeId": 225,
        "TypeDef": "Sequence"
      },
      "225": {
        "TypeIds": [
          74,
          226,
          191
        ],
        "TypeDef": "Tuple"
      },
      "226": {
        "Length": 11,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "227": {
        "TypeId": 228,
        "TypeDef": "Sequence"
      },
      "228": {
        "TypeIds": [
          74,
          229,
          191
        ],
        "TypeDef": "Tuple"
      },
      "229": {
        "Length": 12,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "230": {
        "TypeId": 231,
        "TypeDef": "Sequence"
      },
      "231": {
        "TypeIds": [
          74,
          232,
          191
        ],
        "TypeDef": "Tuple"
      },
      "232": {
        "Length": 13,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "233": {
        "TypeId": 234,
        "TypeDef": "Sequence"
      },
      "234": {
        "TypeIds": [
          74,
          235,
          191
        ],
        "TypeDef": "Tuple"
      },
      "235": {
        "Length": 14,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "236": {
        "TypeId": 237,
        "TypeDef": "Sequence"
      },
      "237": {
        "TypeIds": [
          74,
          238,
          191
        ],
        "TypeDef": "Tuple"
      },
      "238": {
        "Length": 15,
        "TypeId": 194,
        "TypeDef": "Array"
      },
      "239": {
        "TypeFields": [
          {
            "Name": "minimal_stake",
            "TypeName": "ExtendedBalance",
            "TypeId": 6
          },
          {
            "Name": "sum_stake",
            "TypeName": "ExtendedBalance",
            "TypeId": 6
          },
          {
            "Name": "sum_stake_squared",
            "TypeName": "ExtendedBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_npos_elections",
          "ElectionScore"
        ],
        "TypeDef": "Composite"
      },
      "240": {
        "TypeFields": [
          {
            "Name": "voters",
            "TypeName": "u32",
            "TypeId": 74
          },
          {
            "Name": "targets",
            "TypeName": "u32",
            "TypeId": 74
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "SolutionOrSnapshotSize"
        ],
        "TypeDef": "Composite"
      },
      "241": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 239
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 239
          }
        ],
        "TypeDef": "Variant"
      },
      "242": {
        "TypeId": 243,
        "TypeDef": "Sequence"
      },
      "243": {
        "TypeIds": [
          0,
          244
        ],
        "TypeDef": "Tuple"
      },
      "244": {
        "TypeFields": [
          {
            "Name": "total",
            "TypeName": "ExtendedBalance",
            "TypeId": 6
          },
          {
            "Name": "voters",
            "TypeName": "Vec<(AccountId, ExtendedBalance)>",
            "TypeId": 245
          }
        ],
        "Path": [
          "sp_npos_elections",
          "Support"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "245": {
        "TypeId": 246,
        "TypeDef": "Sequence"
      },
      "246": {
        "TypeIds": [
          0,
          6
        ],
        "TypeDef": "Tuple"
      },
      "247": {
        "Variants": [
          {
            "Name": "propose_bounty",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 46
              },
              {
                "Name": "description",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::propose_bounty`]."
            ]
          },
          {
            "Name": "approve_bounty",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::approve_bounty`]."
            ]
          },
          {
            "Name": "propose_curator",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              },
              {
                "Name": "curator",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 46
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::propose_curator`]."
            ]
          },
          {
            "Name": "unassign_curator",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::unassign_curator`]."
            ]
          },
          {
            "Name": "accept_curator",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::accept_curator`]."
            ]
          },
          {
            "Name": "award_bounty",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::award_bounty`]."
            ]
          },
          {
            "Name": "claim_bounty",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::claim_bounty`]."
            ]
          },
          {
            "Name": "close_bounty",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::close_bounty`]."
            ]
          },
          {
            "Name": "extend_bounty_expiry",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              },
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::extend_bounty_expiry`]."
            ]
          }
        ],
        "Path": [
          "pallet_bounties",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "248": {
        "Variants": [
          {
            "Name": "add_child_bounty",
            "TypeFields": [
              {
                "Name": "parent_bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 46
              },
              {
                "Name": "description",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::add_child_bounty`]."
            ]
          },
          {
            "Name": "propose_curator",
            "TypeFields": [
              {
                "Name": "parent_bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              },
              {
                "Name": "child_bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              },
              {
                "Name": "curator",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 46
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::propose_curator`]."
            ]
          },
          {
            "Name": "accept_curator",
            "TypeFields": [
              {
                "Name": "parent_bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              },
              {
                "Name": "child_bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::accept_curator`]."
            ]
          },
          {
            "Name": "unassign_curator",
            "TypeFields": [
              {
                "Name": "parent_bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              },
              {
                "Name": "child_bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::unassign_curator`]."
            ]
          },
          {
            "Name": "award_child_bounty",
            "TypeFields": [
              {
                "Name": "parent_bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              },
              {
                "Name": "child_bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::award_child_bounty`]."
            ]
          },
          {
            "Name": "claim_child_bounty",
            "TypeFields": [
              {
                "Name": "parent_bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              },
              {
                "Name": "child_bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::claim_child_bounty`]."
            ]
          },
          {
            "Name": "close_child_bounty",
            "TypeFields": [
              {
                "Name": "parent_bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              },
              {
                "Name": "child_bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 74
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::close_child_bounty`]."
            ]
          }
        ],
        "Path": [
          "pallet_child_bounties",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "249": {
        "Variants": [
          {
            "Name": "join",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 46
              },
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::join`]."
            ]
          },
          {
            "Name": "bond_extra",
            "TypeFields": [
              {
                "Name": "extra",
                "TypeName": "BondExtra<BalanceOf<T>>",
                "TypeId": 250
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::bond_extra`]."
            ]
          },
          {
            "Name": "claim_payout",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "See [`Pallet::claim_payout`]."
            ]
          },
          {
            "Name": "unbond",
            "TypeFields": [
              {
                "Name": "member_account",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "unbonding_points",
                "TypeName": "BalanceOf<T>",
                "TypeId": 46
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::unbond`]."
            ]
          },
          {
            "Name": "pool_withdraw_unbonded",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "num_slashing_spans",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::pool_withdraw_unbonded`]."
            ]
          },
          {
            "Name": "withdraw_unbonded",
            "TypeFields": [
              {
                "Name": "member_account",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "num_slashing_spans",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::withdraw_unbonded`]."
            ]
          },
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 46
              },
              {
                "Name": "root",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "nominator",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "bouncer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::create`]."
            ]
          },
          {
            "Name": "create_with_pool_id",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 46
              },
              {
                "Name": "root",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "nominator",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "bouncer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::create_with_pool_id`]."
            ]
          },
          {
            "Name": "nominate",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "validators",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 97
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::nominate`]."
            ]
          },
          {
            "Name": "set_state",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "state",
                "TypeName": "PoolState",
                "TypeId": 251
              }
            ],
            "Index": 9,
            "Docs": [
              "See [`Pallet::set_state`]."
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "metadata",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 10,
            "Docs": [
              "See [`Pallet::set_metadata`]."
            ]
          },
          {
            "Name": "set_configs",
            "TypeFields": [
              {
                "Name": "min_join_bond",
                "TypeName": "ConfigOp<BalanceOf<T>>",
                "TypeId": 252
              },
              {
                "Name": "min_create_bond",
                "TypeName": "ConfigOp<BalanceOf<T>>",
                "TypeId": 252
              },
              {
                "Name": "max_pools",
                "TypeName": "ConfigOp<u32>",
                "TypeId": 253
              },
              {
                "Name": "max_members",
                "TypeName": "ConfigOp<u32>",
                "TypeId": 253
              },
              {
                "Name": "max_members_per_pool",
                "TypeName": "ConfigOp<u32>",
                "TypeId": 253
              },
              {
                "Name": "global_max_commission",
                "TypeName": "ConfigOp<Perbill>",
                "TypeId": 254
              }
            ],
            "Index": 11,
            "Docs": [
              "See [`Pallet::set_configs`]."
            ]
          },
          {
            "Name": "update_roles",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "new_root",
                "TypeName": "ConfigOp<T::AccountId>",
                "TypeId": 255
              },
              {
                "Name": "new_nominator",
                "TypeName": "ConfigOp<T::AccountId>",
                "TypeId": 255
              },
              {
                "Name": "new_bouncer",
                "TypeName": "ConfigOp<T::AccountId>",
                "TypeId": 255
              }
            ],
            "Index": 12,
            "Docs": [
              "See [`Pallet::update_roles`]."
            ]
          },
          {
            "Name": "chill",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "See [`Pallet::chill`]."
            ]
          },
          {
            "Name": "bond_extra_other",
            "TypeFields": [
              {
                "Name": "member",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "extra",
                "TypeName": "BondExtra<BalanceOf<T>>",
                "TypeId": 250
              }
            ],
            "Index": 14,
            "Docs": [
              "See [`Pallet::bond_extra_other`]."
            ]
          },
          {
            "Name": "set_claim_permission",
            "TypeFields": [
              {
                "Name": "permission",
                "TypeName": "ClaimPermission",
                "TypeId": 256
              }
            ],
            "Index": 15,
            "Docs": [
              "See [`Pallet::set_claim_permission`]."
            ]
          },
          {
            "Name": "claim_payout_other",
            "TypeFields": [
              {
                "Name": "other",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 16,
            "Docs": [
              "See [`Pallet::claim_payout_other`]."
            ]
          },
          {
            "Name": "set_commission",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "new_commission",
                "TypeName": "Option<(Perbill, T::AccountId)>",
                "TypeId": 257
              }
            ],
            "Index": 17,
            "Docs": [
              "See [`Pallet::set_commission`]."
            ]
          },
          {
            "Name": "set_commission_max",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "max_commission",
                "TypeName": "Perbill",
                "TypeId": 51
              }
            ],
            "Index": 18,
            "Docs": [
              "See [`Pallet::set_commission_max`]."
            ]
          },
          {
            "Name": "set_commission_change_rate",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "change_rate",
                "TypeName": "CommissionChangeRate<BlockNumberFor<T>>",
                "TypeId": 259
              }
            ],
            "Index": 19,
            "Docs": [
              "See [`Pallet::set_commission_change_rate`]."
            ]
          },
          {
            "Name": "claim_commission",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 20,
            "Docs": [
              "See [`Pallet::claim_commission`]."
            ]
          },
          {
            "Name": "adjust_pool_deposit",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 21,
            "Docs": [
              "See [`Pallet::adjust_pool_deposit`]."
            ]
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "250": {
        "Variants": [
          {
            "Name": "FreeBalance",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Rewards",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "BondExtra"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "251": {
        "Variants": [
          {
            "Name": "Open",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Blocked",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Destroying",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "PoolState"
        ],
        "TypeDef": "Variant"
      },
      "252": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "253": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "254": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 51
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 51
          }
        ],
        "TypeDef": "Variant"
      },
      "255": {
        "Variants": [
          {
            "Name": "Noop",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Set",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "Remove",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "ConfigOp"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "256": {
        "Variants": [
          {
            "Name": "Permissioned",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "PermissionlessCompound",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "PermissionlessWithdraw",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "PermissionlessAll",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "ClaimPermission"
        ],
        "TypeDef": "Variant"
      },
      "257": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 258
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 258
          }
        ],
        "TypeDef": "Variant"
      },
      "258": {
        "TypeIds": [
          51,
          0
        ],
        "TypeDef": "Tuple"
      },
      "259": {
        "TypeFields": [
          {
            "Name": "max_increase",
            "TypeName": "Perbill",
            "TypeId": 51
          },
          {
            "Name": "min_delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "CommissionChangeRate"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "260": {
        "Variants": [
          {
            "Name": "upload_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::upload_code`]."
            ]
          },
          {
            "Name": "upload_program",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "salt",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "init_payload",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::upload_program`]."
            ]
          },
          {
            "Name": "create_program",
            "TypeFields": [
              {
                "Name": "code_id",
                "TypeName": "CodeId",
                "TypeId": 261
              },
              {
                "Name": "salt",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "init_payload",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::create_program`]."
            ]
          },
          {
            "Name": "send_message",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "ProgramId",
                "TypeId": 262
              },
              {
                "Name": "payload",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::send_message`]."
            ]
          },
          {
            "Name": "send_reply",
            "TypeFields": [
              {
                "Name": "reply_to_id",
                "TypeName": "MessageId",
                "TypeId": 263
              },
              {
                "Name": "payload",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::send_reply`]."
            ]
          },
          {
            "Name": "claim_value",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 263
              }
            ],
            "Index": 5,
            "Docs": [
              "See [`Pallet::claim_value`]."
            ]
          },
          {
            "Name": "run",
            "TypeFields": [
              {
                "Name": "max_gas",
                "TypeName": "Option<GasBalanceOf<T>>",
                "TypeId": 264
              }
            ],
            "Index": 6,
            "Docs": [
              "See [`Pallet::run`]."
            ]
          },
          {
            "Name": "set_execute_inherent",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 7,
            "Docs": [
              "See [`Pallet::set_execute_inherent`]."
            ]
          },
          {
            "Name": "claim_value_to_inheritor",
            "TypeFields": [
              {
                "Name": "program_id",
                "TypeName": "ProgramId",
                "TypeId": 262
              },
              {
                "Name": "depth",
                "TypeName": "NonZeroU32",
                "TypeId": 265
              }
            ],
            "Index": 8,
            "Docs": [
              "See [`Pallet::claim_value_to_inheritor`]."
            ]
          }
        ],
        "Path": [
          "pallet_gear",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "261": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "gprimitives",
          "CodeId"
        ],
        "TypeDef": "Composite"
      },
      "262": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "gprimitives",
          "ActorId"
        ],
        "TypeDef": "Composite"
      },
      "263": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "gprimitives",
          "MessageId"
        ],
        "TypeDef": "Composite"
      },
      "264": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 11
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 11
          }
        ],
        "TypeDef": "Variant"
      },
      "265": {
        "TypeFields": [
          {
            "TypeId": 4
          }
        ],
        "Path": [
          "NonZeroU32"
        ],
        "TypeDef": "Composite"
      },
      "266": {
        "Variants": [
          {
            "Name": "refill",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::refill`]."
            ]
          },
          {
            "Name": "force_refill",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::force_refill`]."
            ]
          },
          {
            "Name": "withdraw",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 94
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::withdraw`]."
            ]
          },
          {
            "Name": "align_supply",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::align_supply`]."
            ]
          }
        ],
        "Path": [
          "pallet_gear_staking_rewards",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "267": {
        "Variants": [
          {
            "Name": "issue",
            "TypeFields": [
              {
                "Name": "spender",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "programs",
                "TypeName": "Option<BTreeSet<ProgramId>>",
                "TypeId": 268
              },
              {
                "Name": "code_uploading",
                "TypeName": "bool",
                "TypeId": 54
              },
              {
                "Name": "duration",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "See [`Pallet::issue`]."
            ]
          },
          {
            "Name": "call",
            "TypeFields": [
              {
                "Name": "voucher_id",
                "TypeName": "VoucherId",
                "TypeId": 271
              },
              {
                "Name": "call",
                "TypeName": "PrepaidCall<BalanceOf<T>>",
                "TypeId": 272
              }
            ],
            "Index": 1,
            "Docs": [
              "See [`Pallet::call`]."
            ]
          },
          {
            "Name": "revoke",
            "TypeFields": [
              {
                "Name": "spender",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "voucher_id",
                "TypeName": "VoucherId",
                "TypeId": 271
              }
            ],
            "Index": 2,
            "Docs": [
              "See [`Pallet::revoke`]."
            ]
          },
          {
            "Name": "update",
            "TypeFields": [
              {
                "Name": "spender",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "voucher_id",
                "TypeName": "VoucherId",
                "TypeId": 271
              },
              {
                "Name": "move_ownership",
                "TypeName": "Option<AccountIdOf<T>>",
                "TypeId": 273
              },
              {
                "Name": "balance_top_up",
                "TypeName": "Option<BalanceOf<T>>",
                "TypeId": 274
              },
              {
                "Name": "append_programs",
                "TypeName": "Option<Option<BTreeSet<ProgramId>>>",
                "TypeId": 275
              },
              {
                "Name": "code_uploading",
                "TypeName": "Option<bool>",
                "TypeId": 276
              },
              {
                "Name": "prolong_duration",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 117
              }
            ],
            "Index": 3,
            "Docs": [
              "See [`Pallet::update`]."
            ]
          },
          {
            "Name": "decline",
            "TypeFields": [
              {
                "Name": "voucher_id",
                "TypeName": "VoucherId",
                "TypeId": 271
              }
            ],
            "Index": 4,
            "Docs": [
              "See [`Pallet::decline`]."
            ]
          }
        ],
        "Path": [
          "pallet_gear_voucher",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "268": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 269
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 269
          }
        ],
        "TypeDef": "Variant"
      },
      "269": {
        "TypeFields": [
          {
            "TypeId": 270
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 262
          }
        ],
        "TypeDef": "Composite"
      },
      "270": {
        "TypeId": 262,
        "TypeDef": "Sequence"
      },
      "271": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "pallet_gear_voucher",
          "internal",
          "VoucherId"
        ],
        "TypeDef": "Composite"
      },
      "272": {
        "Variants": [
          {
            "Name": "SendMessage",
            "TypeFields": [
              {
                "Name": "destination",
                "TypeName": "ProgramId",
                "TypeId": 262
              },
              {
                "Name": "payload",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "value",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 0
          },
          {
            "Name": "SendReply",
            "TypeFields": [
              {
                "Name": "reply_to_id",
                "TypeName": "MessageId",
                "TypeId": 263
              },
              {
                "Name": "payload",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              },
              {
                "Name": "gas_limit",
                "TypeName": "u64",
                "TypeId": 11
              },
              {
                "Name": "value",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 1
          },
          {
            "Name": "UploadCode",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 13
              }
            ],
            "Index": 2
          },
          {
            "Name": "DeclineVoucher",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_gear_voucher",
          "internal",
          "PrepaidCall"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "273": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "274": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "275": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 268
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 268
          }
        ],
        "TypeDef": "Variant"
      },
      "276": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 54
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 54
          }
        ],
        "TypeDef": "Variant"
      },
      "277": {
        "Path": [
          "sp_runtime",
          "traits",
          "BlakeTwo256"
        ],
        "TypeDef": "Composite"
      },
      "278": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "279": {
        "TypeFields": [
          {
            "Name": "ayes",
            "TypeName": "Votes",
            "TypeId": 6
          },
          {
            "Name": "nays",
            "TypeName": "Votes",
            "TypeId": 6
          },
          {
            "Name": "support",
            "TypeName": "Votes",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "types",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "Votes",
            "TypeId": 6
          },
          {
            "Name": "Total"
          }
        ],
        "TypeDef": "Composite"
      },
      "280": {
        "Variants": [
          {
            "Name": "MemberAdded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A member `who` has been added."
            ]
          },
          {
            "Name": "RankChanged",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "rank",
                "TypeName": "Rank",
                "TypeId": 63
              }
            ],
            "Index": 1,
            "Docs": [
              "The member `who`se rank has been changed to the given `rank`."
            ]
          },
          {
            "Name": "MemberRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "rank",
                "TypeName": "Rank",
                "TypeId": 63
              }
            ],
            "Index": 2,
            "Docs": [
              "The member `who` of given `rank` has been removed from the collective."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "poll",
                "TypeName": "PollIndexOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "vote",
                "TypeName": "VoteRecord",
                "TypeId": 281
              },
              {
                "Name": "tally",
                "TypeName": "TallyOf<T, I>",
                "TypeId": 282
              }
            ],
            "Index": 3,
            "Docs": [
              "The member `who` has voted for the `poll` with the given `vote` leading to an updated",
              "`tally`."
            ]
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "281": {
        "Variants": [
          {
            "Name": "Aye",
            "TypeFields": [
              {
                "TypeName": "Votes",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Nay",
            "TypeFields": [
              {
                "TypeName": "Votes",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "VoteRecord"
        ],
        "TypeDef": "Variant"
      },
      "282": {
        "TypeFields": [
          {
            "Name": "bare_ayes",
            "TypeName": "MemberIndex",
            "TypeId": 4
          },
          {
            "Name": "ayes",
            "TypeName": "Votes",
            "TypeId": 4
          },
          {
            "Name": "nays",
            "TypeName": "Votes",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          },
          {
            "Name": "M"
          }
        ],
        "TypeDef": "Composite"
      },
      "283": {
        "Variants": [
          {
            "Name": "Submitted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 63,
                "Docs": [
                  "The track (and by extension proposal dispatch origin) of this referendum."
                ]
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 64,
                "Docs": [
                  "The proposal for the referendum."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A referendum has been submitted."
            ]
          },
          {
            "Name": "DecisionDepositPlaced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "The decision deposit has been placed."
            ]
          },
          {
            "Name": "DecisionDepositRefunded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "The decision deposit has been refunded."
            ]
          },
          {
            "Name": "DepositSlashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A deposit has been slashed."
            ]
          },
          {
            "Name": "DecisionStarted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "track",
                "TypeName": "TrackIdOf<T, I>",
                "TypeId": 63,
                "Docs": [
                  "The track (and by extension proposal dispatch origin) of this referendum."
                ]
              },
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T, I>",
                "TypeId": 64,
                "Docs": [
                  "The proposal for the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 282,
                "Docs": [
                  "The current tally of votes in this referendum."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "A referendum has moved into the deciding phase."
            ]
          },
          {
            "Name": "ConfirmStarted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 5
          },
          {
            "Name": "ConfirmAborted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 6
          },
          {
            "Name": "Confirmed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 282,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "A referendum has ended its confirmation phase and is ready for approval."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              }
            ],
            "Index": 8,
            "Docs": [
              "A referendum has been approved and its proposal has been scheduled."
            ]
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 282,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 9,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "TimedOut",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 282,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 10,
            "Docs": [
              "A referendum has been timed out without being decided."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 282,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 11,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "tally",
                "TypeName": "T::Tally",
                "TypeId": 282,
                "Docs": [
                  "The final tally of votes in this referendum."
                ]
              }
            ],
            "Index": 12,
            "Docs": [
              "A referendum has been killed."
            ]
          },
          {
            "Name": "SubmissionDepositRefunded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The account who placed the deposit."
                ]
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6,
                "Docs": [
                  "The amount placed by the account."
                ]
              }
            ],
            "Index": 13,
            "Docs": [
              "The submission deposit has been refunded."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Metadata for a referendum has been set."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4,
                "Docs": [
                  "Index of the referendum."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Metadata for a referendum has been cleared."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "284": {
        "Variants": [
          {
            "Name": "CallWhitelisted",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 0
          },
          {
            "Name": "WhitelistedCallRemoved",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 1
          },
          {
            "Name": "WhitelistedCallDispatched",
            "TypeFields": [
              {
                "Name": "call_hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              },
              {
                "Name": "result",
                "TypeName": "DispatchResultWithPostInfo",
                "TypeId": 285
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_whitelist",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "285": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 286
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 288
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 286
          },
          {
            "Name": "E",
            "TypeId": 288
          }
        ],
        "TypeDef": "Variant"
      },
      "286": {
        "TypeFields": [
          {
            "Name": "actual_weight",
            "TypeName": "Option<Weight>",
            "TypeId": 287
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 24
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PostDispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "287": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 9
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 9
          }
        ],
        "TypeDef": "Variant"
      },
      "288": {
        "TypeFields": [
          {
            "Name": "post_info",
            "TypeName": "Info",
            "TypeId": 286
          },
          {
            "Name": "error",
            "TypeName": "DispatchError",
            "TypeId": 25
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchErrorWithPostInfo"
        ],
        "TypeParams": [
          {
            "Name": "Info",
            "TypeId": 286
          }
        ],
        "TypeDef": "Composite"
      },
      "289": {
        "Variants": [
          {
            "Name": "Scheduled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Scheduled some task."
            ]
          },
          {
            "Name": "Canceled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Canceled some task."
            ]
          },
          {
            "Name": "Dispatched",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 137
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 290
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 60
              }
            ],
            "Index": 2,
            "Docs": [
              "Dispatched some task."
            ]
          },
          {
            "Name": "CallUnavailable",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 137
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 290
              }
            ],
            "Index": 3,
            "Docs": [
              "The call for the provided hash was not found so the task has been aborted."
            ]
          },
          {
            "Name": "PeriodicFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 137
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 290
              }
            ],
            "Index": 4,
            "Docs": [
              "The given task was unable to be renewed since the agenda is full at that block."
            ]
          },
          {
            "Name": "PermanentlyOverweight",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 137
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 290
              }
            ],
            "Index": 5,
            "Docs": [
              "The given task can never be executed since it is overweight."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "290": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          }
        ],
        "TypeDef": "Variant"
      },
      "291": {
        "Variants": [
          {
            "Name": "Noted",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 0,
            "Docs": [
              "A preimage has been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "A preimage has been requested."
            ]
          },
          {
            "Name": "Cleared",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "A preimage has ben cleared."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "292": {
        "Variants": [
          {
            "Name": "IdentitySet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A name was set or reset (which will remove all judgements)."
            ]
          },
          {
            "Name": "IdentityCleared",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A name was cleared, and the given balance returned."
            ]
          },
          {
            "Name": "IdentityKilled",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A name was removed and the given balance slashed."
            ]
          },
          {
            "Name": "JudgementRequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A judgement was asked from a registrar."
            ]
          },
          {
            "Name": "JudgementUnrequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A judgement request was retracted."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A judgement was given by a registrar."
            ]
          },
          {
            "Name": "RegistrarAdded",
            "TypeFields": [
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A registrar was added."
            ]
          },
          {
            "Name": "SubIdentityAdded",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "A sub-identity was added to an identity and the deposit paid."
            ]
          },
          {
            "Name": "SubIdentityRemoved",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "A sub-identity was removed from an identity and the deposit freed."
            ]
          },
          {
            "Name": "SubIdentityRevoked",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "A sub-identity was cleared, and the given deposit repatriated from the",
              "main identity account to the sub-identity account."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "293": {
        "Variants": [
          {
            "Name": "ProxyExecuted",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 60
              }
            ],
            "Index": 0,
            "Docs": [
              "A proxy was executed correctly, with the given."
            ]
          },
          {
            "Name": "PureCreated",
            "TypeFields": [
              {
                "Name": "pure",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 182
              },
              {
                "Name": "disambiguation_index",
                "TypeName": "u16",
                "TypeId": 63
              }
            ],
            "Index": 1,
            "Docs": [
              "A pure account has been created by new proxy with given",
              "disambiguation index and proxy type."
            ]
          },
          {
            "Name": "Announced",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 12
              }
            ],
            "Index": 2,
            "Docs": [
              "An announcement was placed to make a call in the future."
            ]
          },
          {
            "Name": "ProxyAdded",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 182
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A proxy was added."
            ]
          },
          {
            "Name": "ProxyRemoved",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 182
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proxy was removed."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "294": {
        "Variants": [
          {
            "Name": "NewMultisig",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "A new multisig operation has begun."
            ]
          },
          {
            "Name": "MultisigApproval",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 185
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A multisig operation has been approved by someone."
            ]
          },
          {
            "Name": "MultisigExecuted",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 185
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 60
              }
            ],
            "Index": 2,
            "Docs": [
              "A multisig operation has been executed."
            ]
          },
          {
            "Name": "MultisigCancelled",
            "TypeFields": [
              {
                "Name": "cancelling",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 185
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "A multisig operation has been cancelled."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "295": {
        "Variants": [
          {
            "Name": "SolutionStored",
            "TypeFields": [
              {
                "Name": "compute",
                "TypeName": "ElectionCompute",
                "TypeId": 296
              },
              {
                "Name": "origin",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 273
              },
              {
                "Name": "prev_ejected",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 0,
            "Docs": [
              "A solution was stored with the given compute.",
              "",
              "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,",
              "the stored solution was submited in the signed phase by a miner with the `AccountId`.",
              "Otherwise, the solution was stored either during the unsigned phase or by",
              "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make",
              "room for this one."
            ]
          },
          {
            "Name": "ElectionFinalized",
            "TypeFields": [
              {
                "Name": "compute",
                "TypeName": "ElectionCompute",
                "TypeId": 296
              },
              {
                "Name": "score",
                "TypeName": "ElectionScore",
                "TypeId": 239
              }
            ],
            "Index": 1,
            "Docs": [
              "The election has been finalized, with the given computation and score."
            ]
          },
          {
            "Name": "ElectionFailed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "An election failed.",
              "",
              "Not much can be said about which computes failed in the process."
            ]
          },
          {
            "Name": "Rewarded",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "<T as frame_system::Config>::AccountId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "An account has been rewarded for their signed submission being finalized."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "<T as frame_system::Config>::AccountId",
                "TypeId": 0
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "An account has been slashed for submitting an invalid signed submission."
            ]
          },
          {
            "Name": "PhaseTransitioned",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "Phase<BlockNumberFor<T>>",
                "TypeId": 297
              },
              {
                "Name": "to",
                "TypeName": "Phase<BlockNumberFor<T>>",
                "TypeId": 297
              },
              {
                "Name": "round",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "There was a phase transition in a given round."
            ]
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "296": {
        "Variants": [
          {
            "Name": "OnChain",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Unsigned",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Fallback",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Emergency",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "ElectionCompute"
        ],
        "TypeDef": "Variant"
      },
      "297": {
        "Variants": [
          {
            "Name": "Off",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Unsigned",
            "TypeFields": [
              {
                "TypeName": "(bool, Bn)",
                "TypeId": 298
              }
            ],
            "Index": 2
          },
          {
            "Name": "Emergency",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "Phase"
        ],
        "TypeParams": [
          {
            "Name": "Bn",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "298": {
        "TypeIds": [
          54,
          4
        ],
        "TypeDef": "Tuple"
      },
      "299": {
        "Variants": [
          {
            "Name": "Offence",
            "TypeFields": [
              {
                "Name": "kind",
                "TypeName": "Kind",
                "TypeId": 160
              },
              {
                "Name": "timeslot",
                "TypeName": "OpaqueTimeSlot",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "There is an offence reported of the given `kind` happened at the `session_index` and",
              "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
              "\\[kind, timeslot\\]."
            ]
          }
        ],
        "Path": [
          "pallet_offences",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "300": {
        "Variants": [
          {
            "Name": "BountyProposed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "New bounty proposal."
            ]
          },
          {
            "Name": "BountyRejected",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              },
              {
                "Name": "bond",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A bounty proposal was rejected; funds were slashed."
            ]
          },
          {
            "Name": "BountyBecameActive",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "A bounty proposal is funded and became active."
            ]
          },
          {
            "Name": "BountyAwarded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A bounty is awarded to a beneficiary."
            ]
          },
          {
            "Name": "BountyClaimed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              },
              {
                "Name": "payout",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "A bounty is claimed by beneficiary."
            ]
          },
          {
            "Name": "BountyCanceled",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A bounty is cancelled."
            ]
          },
          {
            "Name": "BountyExtended",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A bounty expiry is extended."
            ]
          },
          {
            "Name": "BountyApproved",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "A bounty is approved."
            ]
          },
          {
            "Name": "CuratorProposed",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 4
              },
              {
                "Name": "curator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "A bounty curator is proposed."
            ]
          },
          {
            "Name": "CuratorUnassigned",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "A bounty curator is unassigned."
            ]
          },
          {
            "Name": "CuratorAccepted",
            "TypeFields": [
              {
                "Name": "bounty_id",
                "TypeName": "BountyIndex",
                "TypeId": 4
              },
              {
                "Name": "curator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 10,
            "Docs": [
              "A bounty curator is accepted."
            ]
          }
        ],
        "Path": [
          "pallet_bounties",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "301": {
        "Variants": [
          {
            "Name": "Added",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              },
              {
                "Name": "child_index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A child-bounty is added."
            ]
          },
          {
            "Name": "Awarded",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              },
              {
                "Name": "child_index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "A child-bounty is awarded to a beneficiary."
            ]
          },
          {
            "Name": "Claimed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              },
              {
                "Name": "child_index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              },
              {
                "Name": "payout",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "A child-bounty is claimed by beneficiary."
            ]
          },
          {
            "Name": "Canceled",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              },
              {
                "Name": "child_index",
                "TypeName": "BountyIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A child-bounty is cancelled."
            ]
          }
        ],
        "Path": [
          "pallet_child_bounties",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "302": {
        "Variants": [
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "depositor",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A pool has been created."
            ]
          },
          {
            "Name": "Bonded",
            "TypeFields": [
              {
                "Name": "member",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "bonded",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "joined",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 1,
            "Docs": [
              "A member has became bonded in a pool."
            ]
          },
          {
            "Name": "PaidOut",
            "TypeFields": [
              {
                "Name": "member",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "payout",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A payout has been made to a member."
            ]
          },
          {
            "Name": "Unbonded",
            "TypeFields": [
              {
                "Name": "member",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "points",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A member has unbonded from their pool.",
              "",
              "- `balance` is the corresponding balance of the number of points that has been",
              "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded",
              "  pool.",
              "- `points` is the number of points that are issued as a result of `balance` being",
              "dissolved into the corresponding unbonding pool.",
              "- `era` is the era in which the balance will be unbonded.",
              "In the absence of slashing, these values will match. In the presence of slashing, the",
              "number of points that are issued in the unbonding pool will be less than the amount",
              "requested to be unbonded."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "member",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "points",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "A member has withdrawn from their pool.",
              "",
              "The given number of `points` have been dissolved in return of `balance`.",
              "",
              "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance",
              "will be 1."
            ]
          },
          {
            "Name": "Destroyed",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A pool has been destroyed."
            ]
          },
          {
            "Name": "StateChanged",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "new_state",
                "TypeName": "PoolState",
                "TypeId": 251
              }
            ],
            "Index": 6,
            "Docs": [
              "The state of a pool has changed"
            ]
          },
          {
            "Name": "MemberRemoved",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "member",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "A member has been removed from a pool.",
              "",
              "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."
            ]
          },
          {
            "Name": "RolesUpdated",
            "TypeFields": [
              {
                "Name": "root",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 273
              },
              {
                "Name": "bouncer",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 273
              },
              {
                "Name": "nominator",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 273
              }
            ],
            "Index": 8,
            "Docs": [
              "The roles of a pool have been updated to the given new roles. Note that the depositor",
              "can never change."
            ]
          },
          {
            "Name": "PoolSlashed",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "The active balance of pool `pool_id` has been slashed to `balance`."
            ]
          },
          {
            "Name": "UnbondingPoolSlashed",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "era",
                "TypeName": "EraIndex",
                "TypeId": 4
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."
            ]
          },
          {
            "Name": "PoolCommissionUpdated",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "current",
                "TypeName": "Option<(Perbill, T::AccountId)>",
                "TypeId": 257
              }
            ],
            "Index": 11,
            "Docs": [
              "A pool's commission setting has been changed."
            ]
          },
          {
            "Name": "PoolMaxCommissionUpdated",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "max_commission",
                "TypeName": "Perbill",
                "TypeId": 51
              }
            ],
            "Index": 12,
            "Docs": [
              "A pool's maximum commission setting has been changed."
            ]
          },
          {
            "Name": "PoolCommissionChangeRateUpdated",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "change_rate",
                "TypeName": "CommissionChangeRate<BlockNumberFor<T>>",
                "TypeId": 259
              }
            ],
            "Index": 13,
            "Docs": [
              "A pool's commission `change_rate` has been changed."
            ]
          },
          {
            "Name": "PoolCommissionClaimed",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "commission",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 14,
            "Docs": [
              "Pool commission has been claimed."
            ]
          },
          {
            "Name": "MinBalanceDeficitAdjusted",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 15,
            "Docs": [
              "Topped up deficit in frozen ED of the reward pool."
            ]
          },
          {
            "Name": "MinBalanceExcessAdjusted",
            "TypeFields": [
              {
                "Name": "pool_id",
                "TypeName": "PoolId",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Claimed excess frozen ED of af the reward pool."
            ]
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events of this pallet."
        ]
      },
      "303": {
        "Variants": [
          {
            "Name": "MessageQueued",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "MessageId",
                "TypeId": 263,
                "Docs": [
                  "Generated id of the message."
                ]
              },
              {
                "Name": "source",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "Account id of the source of the message."
                ]
              },
              {
                "Name": "destination",
                "TypeName": "ProgramId",
                "TypeId": 262,
                "Docs": [
                  "Program id, who is the message's destination."
                ]
              },
              {
                "Name": "entry",
                "TypeName": "MessageEntry",
                "TypeId": 304,
                "Docs": [
                  "Entry point for processing of the message.",
                  "On the sending stage, the processing function",
                  "of the program is always known."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "User sends message to program, which was successfully",
              "added to the Gear message queue."
            ]
          },
          {
            "Name": "UserMessageSent",
            "TypeFields": [
              {
                "Name": "message",
                "TypeName": "UserMessage",
                "TypeId": 305,
                "Docs": [
                  "Message sent."
                ]
              },
              {
                "Name": "expiration",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 117,
                "Docs": [
                  "Block number of expiration from `Mailbox`.",
                  "",
                  "Equals `Some(_)` with block number when message",
                  "will be removed from `Mailbox` due to some",
                  "reasons (see #642, #646 and #1010).",
                  "",
                  "Equals `None` if message wasn't inserted to",
                  "`Mailbox` and appears as only `Event`."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "Somebody sent a message to the user."
            ]
          },
          {
            "Name": "UserMessageRead",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "MessageId",
                "TypeId": 263,
                "Docs": [
                  "Id of the message read."
                ]
              },
              {
                "Name": "reason",
                "TypeName": "UserMessageReadReason",
                "TypeId": 315,
                "Docs": [
                  "The reason for the reading (removal from `Mailbox`).",
                  "",
                  "NOTE: See more docs about reasons at `gear_common::event`."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Message marked as \"read\" and removes it from `Mailbox`.",
              "This event only affects messages that were",
              "already inserted in `Mailbox`."
            ]
          },
          {
            "Name": "MessagesDispatched",
            "TypeFields": [
              {
                "Name": "total",
                "TypeName": "MessengerCapacityOf<T>",
                "TypeId": 4,
                "Docs": [
                  "Total amount of messages removed from message queue."
                ]
              },
              {
                "Name": "statuses",
                "TypeName": "BTreeMap<MessageId, DispatchStatus>",
                "TypeId": 318,
                "Docs": [
                  "Execution statuses of the messages, which were already known",
                  "by `Event::MessageQueued` (sent from user to program)."
                ]
              },
              {
                "Name": "state_changes",
                "TypeName": "BTreeSet<ProgramId>",
                "TypeId": 269,
                "Docs": [
                  "Ids of programs, which state changed during queue processing."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "The result of processing the messages within the block."
            ]
          },
          {
            "Name": "MessageWaited",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "MessageId",
                "TypeId": 263,
                "Docs": [
                  "Id of the message waited."
                ]
              },
              {
                "Name": "origin",
                "TypeName": "Option<GasNodeId<MessageId, ReservationId>>",
                "TypeId": 322,
                "Docs": [
                  "Origin message id, which started messaging chain with programs,",
                  "where currently waited message was created.",
                  "",
                  "Used to identify by the user that this message associated",
                  "with him and the concrete initial message."
                ]
              },
              {
                "Name": "reason",
                "TypeName": "MessageWaitedReason",
                "TypeId": 325,
                "Docs": [
                  "The reason of the waiting (addition to `Waitlist`).",
                  "",
                  "NOTE: See more docs about reasons at `gear_common::event`."
                ]
              },
              {
                "Name": "expiration",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "Block number of expiration from `Waitlist`.",
                  "",
                  "Equals block number when message will be removed from `Waitlist`",
                  "due to some reasons (see #642, #646 and #1010)."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "Messages execution delayed (waited) and successfully",
              "added to gear waitlist."
            ]
          },
          {
            "Name": "MessageWoken",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "MessageId",
                "TypeId": 263,
                "Docs": [
                  "Id of the message woken."
                ]
              },
              {
                "Name": "reason",
                "TypeName": "MessageWokenReason",
                "TypeId": 328,
                "Docs": [
                  "The reason of the waking (removal from `Waitlist`).",
                  "",
                  "NOTE: See more docs about reasons at `gear_common::event`."
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "Message is ready to continue its execution",
              "and was removed from `Waitlist`."
            ]
          },
          {
            "Name": "CodeChanged",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "CodeId",
                "TypeId": 261,
                "Docs": [
                  "Id of the code affected."
                ]
              },
              {
                "Name": "change",
                "TypeName": "CodeChangeKind<BlockNumberFor<T>>",
                "TypeId": 331,
                "Docs": [
                  "Change applied on code with current id.",
                  "",
                  "NOTE: See more docs about change kinds at `gear_common::event`."
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "Any data related to program codes changed."
            ]
          },
          {
            "Name": "ProgramChanged",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ProgramId",
                "TypeId": 262,
                "Docs": [
                  "Id of the program affected."
                ]
              },
              {
                "Name": "change",
                "TypeName": "ProgramChangeKind<BlockNumberFor<T>>",
                "TypeId": 332,
                "Docs": [
                  "Change applied on program with current id.",
                  "",
                  "NOTE: See more docs about change kinds at `gear_common::event`."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "Any data related to programs changed."
            ]
          },
          {
            "Name": "QueueNotProcessed",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The pseudo-inherent extrinsic that runs queue processing rolled back or not executed."
            ]
          }
        ],
        "Path": [
          "pallet_gear",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "304": {
        "Variants": [
          {
            "Name": "Init",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Handle",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Reply",
            "TypeFields": [
              {
                "TypeName": "MessageId",
                "TypeId": 263
              }
            ],
            "Index": 2
          },
          {
            "Name": "Signal",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "MessageEntry"
        ],
        "TypeDef": "Variant"
      },
      "305": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "MessageId",
            "TypeId": 263
          },
          {
            "Name": "source",
            "TypeName": "ProgramId",
            "TypeId": 262
          },
          {
            "Name": "destination",
            "TypeName": "ProgramId",
            "TypeId": 262
          },
          {
            "Name": "payload",
            "TypeName": "Payload",
            "TypeId": 306
          },
          {
            "Name": "value",
            "TypeName": "Value",
            "TypeId": 46
          },
          {
            "Name": "details",
            "TypeName": "Option<ReplyDetails>",
            "TypeId": 308
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "user",
          "UserMessage"
        ],
        "TypeDef": "Composite"
      },
      "306": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "gear_core",
          "buffer",
          "LimitedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "E",
            "TypeId": 307
          }
        ],
        "TypeDef": "Composite"
      },
      "307": {
        "Path": [
          "gear_core",
          "message",
          "PayloadSizeError"
        ],
        "TypeDef": "Composite"
      },
      "308": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 309
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 309
          }
        ],
        "TypeDef": "Variant"
      },
      "309": {
        "TypeFields": [
          {
            "Name": "to",
            "TypeName": "MessageId",
            "TypeId": 263
          },
          {
            "Name": "code",
            "TypeName": "ReplyCode",
            "TypeId": 310
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "common",
          "ReplyDetails"
        ],
        "TypeDef": "Composite"
      },
      "310": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": [
              {
                "TypeName": "SuccessReplyReason",
                "TypeId": 311
              }
            ],
            "Index": 0
          },
          {
            "Name": "Error",
            "TypeFields": [
              {
                "TypeName": "ErrorReplyReason",
                "TypeId": 312
              }
            ],
            "Index": 1
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 255
          }
        ],
        "Path": [
          "gear_core_errors",
          "simple",
          "ReplyCode"
        ],
        "TypeDef": "Variant"
      },
      "311": {
        "Variants": [
          {
            "Name": "Auto",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Manual",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 255
          }
        ],
        "Path": [
          "gear_core_errors",
          "simple",
          "SuccessReplyReason"
        ],
        "TypeDef": "Variant"
      },
      "312": {
        "Variants": [
          {
            "Name": "Execution",
            "TypeFields": [
              {
                "TypeName": "SimpleExecutionError",
                "TypeId": 313
              }
            ],
            "Index": 0
          },
          {
            "Name": "FailedToCreateProgram",
            "TypeFields": [
              {
                "TypeName": "SimpleProgramCreationError",
                "TypeId": 314
              }
            ],
            "Index": 1
          },
          {
            "Name": "InactiveActor",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "RemovedFromWaitlist",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "ReinstrumentationFailure",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 255
          }
        ],
        "Path": [
          "gear_core_errors",
          "simple",
          "ErrorReplyReason"
        ],
        "TypeDef": "Variant"
      },
      "313": {
        "Variants": [
          {
            "Name": "RanOutOfGas",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MemoryOverflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BackendError",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "UserspacePanic",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnreachableInstruction",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "StackLimitExceeded",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 255
          }
        ],
        "Path": [
          "gear_core_errors",
          "simple",
          "SimpleExecutionError"
        ],
        "TypeDef": "Variant"
      },
      "314": {
        "Variants": [
          {
            "Name": "CodeNotExists",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 255
          }
        ],
        "Path": [
          "gear_core_errors",
          "simple",
          "SimpleProgramCreationError"
        ],
        "TypeDef": "Variant"
      },
      "315": {
        "Variants": [
          {
            "Name": "Runtime",
            "TypeFields": [
              {
                "TypeName": "R",
                "TypeId": 316
              }
            ],
            "Index": 0
          },
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "S",
                "TypeId": 317
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "Reason"
        ],
        "TypeParams": [
          {
            "Name": "R",
            "TypeId": 316
          },
          {
            "Name": "S",
            "TypeId": 317
          }
        ],
        "TypeDef": "Variant"
      },
      "316": {
        "Variants": [
          {
            "Name": "MessageReplied",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "MessageClaimed",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "UserMessageReadRuntimeReason"
        ],
        "TypeDef": "Variant"
      },
      "317": {
        "Variants": [
          {
            "Name": "OutOfRent",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "UserMessageReadSystemReason"
        ],
        "TypeDef": "Variant"
      },
      "318": {
        "TypeFields": [
          {
            "TypeId": 320
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 263
          },
          {
            "Name": "V",
            "TypeId": 319
          }
        ],
        "TypeDef": "Composite"
      },
      "319": {
        "Variants": [
          {
            "Name": "Success",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Failed",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotExecuted",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "DispatchStatus"
        ],
        "TypeDef": "Variant"
      },
      "320": {
        "TypeId": 321,
        "TypeDef": "Sequence"
      },
      "321": {
        "TypeIds": [
          263,
          319
        ],
        "TypeDef": "Tuple"
      },
      "322": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 323
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 323
          }
        ],
        "TypeDef": "Variant"
      },
      "323": {
        "Variants": [
          {
            "Name": "Node",
            "TypeFields": [
              {
                "TypeName": "T",
                "TypeId": 263
              }
            ],
            "Index": 0
          },
          {
            "Name": "Reservation",
            "TypeFields": [
              {
                "TypeName": "U",
                "TypeId": 324
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "gear_common",
          "gas_provider",
          "node",
          "GasNodeId"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 263
          },
          {
            "Name": "U",
            "TypeId": 324
          }
        ],
        "TypeDef": "Variant"
      },
      "324": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "gprimitives",
          "ReservationId"
        ],
        "TypeDef": "Composite"
      },
      "325": {
        "Variants": [
          {
            "Name": "Runtime",
            "TypeFields": [
              {
                "TypeName": "R",
                "TypeId": 326
              }
            ],
            "Index": 0
          },
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "S",
                "TypeId": 327
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "Reason"
        ],
        "TypeParams": [
          {
            "Name": "R",
            "TypeId": 326
          },
          {
            "Name": "S",
            "TypeId": 327
          }
        ],
        "TypeDef": "Variant"
      },
      "326": {
        "Variants": [
          {
            "Name": "WaitCalled",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "WaitForCalled",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "WaitUpToCalled",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "WaitUpToCalledFull",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "MessageWaitedRuntimeReason"
        ],
        "TypeDef": "Variant"
      },
      "327": {
        "Variants": null,
        "Path": [
          "gear_common",
          "event",
          "MessageWaitedSystemReason"
        ],
        "TypeDef": "Variant"
      },
      "328": {
        "Variants": [
          {
            "Name": "Runtime",
            "TypeFields": [
              {
                "TypeName": "R",
                "TypeId": 329
              }
            ],
            "Index": 0
          },
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "S",
                "TypeId": 330
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "Reason"
        ],
        "TypeParams": [
          {
            "Name": "R",
            "TypeId": 329
          },
          {
            "Name": "S",
            "TypeId": 330
          }
        ],
        "TypeDef": "Variant"
      },
      "329": {
        "Variants": [
          {
            "Name": "WakeCalled",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "MessageWokenRuntimeReason"
        ],
        "TypeDef": "Variant"
      },
      "330": {
        "Variants": [
          {
            "Name": "ProgramGotInitialized",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "TimeoutHasCome",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "OutOfRent",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "MessageWokenSystemReason"
        ],
        "TypeDef": "Variant"
      },
      "331": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": [
              {
                "Name": "expiration",
                "TypeName": "Option<BlockNumber>",
                "TypeId": 117
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inactive",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Reinstrumented",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "CodeChangeKind"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "332": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": [
              {
                "Name": "expiration",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inactive",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Paused",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Terminated",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "ExpirationChanged",
            "TypeFields": [
              {
                "Name": "expiration",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 4
          },
          {
            "Name": "ProgramSet",
            "TypeFields": [
              {
                "Name": "expiration",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "gear_common",
          "event",
          "ProgramChangeKind"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "333": {
        "Variants": [
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Deposited to the pool."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Transferred from the pool to an external account."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Burned from the pool."
            ]
          },
          {
            "Name": "Minted",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Minted to the pool."
            ]
          }
        ],
        "Path": [
          "pallet_gear_staking_rewards",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "334": {
        "Variants": [
          {
            "Name": "VoucherIssued",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "Account id of owner and manager of the voucher."
                ]
              },
              {
                "Name": "spender",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "Account id of user eligible to use the voucher."
                ]
              },
              {
                "Name": "voucher_id",
                "TypeName": "VoucherId",
                "TypeId": 271,
                "Docs": [
                  "Voucher identifier."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "Voucher has been issued."
            ]
          },
          {
            "Name": "VoucherRevoked",
            "TypeFields": [
              {
                "Name": "spender",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "Account id of the user whose voucher was revoked."
                ]
              },
              {
                "Name": "voucher_id",
                "TypeName": "VoucherId",
                "TypeId": 271,
                "Docs": [
                  "Voucher identifier."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "Voucher has been revoked by owner.",
              "",
              "NOTE: currently means only \"refunded\"."
            ]
          },
          {
            "Name": "VoucherUpdated",
            "TypeFields": [
              {
                "Name": "spender",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "Account id of user whose voucher was updated."
                ]
              },
              {
                "Name": "voucher_id",
                "TypeName": "VoucherId",
                "TypeId": 271,
                "Docs": [
                  "Voucher identifier."
                ]
              },
              {
                "Name": "new_owner",
                "TypeName": "Option<AccountIdOf<T>>",
                "TypeId": 273,
                "Docs": [
                  "Optional field defining was the owner changed during update."
                ]
              }
            ],
            "Index": 2,
            "Docs": [
              "Voucher has been updated."
            ]
          },
          {
            "Name": "VoucherDeclined",
            "TypeFields": [
              {
                "Name": "spender",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "Account id of user who declined its own voucher."
                ]
              },
              {
                "Name": "voucher_id",
                "TypeName": "VoucherId",
                "TypeId": 271,
                "Docs": [
                  "Voucher identifier."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "Voucher has been declined (set to expired state)."
            ]
          }
        ],
        "Path": [
          "pallet_gear_voucher",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Pallet Gear Voucher event."
        ]
      },
      "335": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "336": {
        "TypeId": 137,
        "TypeDef": "Sequence"
      },
      "337": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 74
          },
          {
            "Name": "spec_name",
            "TypeName": "sp_runtime::RuntimeString",
            "TypeId": 338
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "338": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "339": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 340
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "340": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 341
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 341
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 341
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 341
          }
        ],
        "TypeDef": "Composite"
      },
      "341": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 287
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 287
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 287
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "342": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 343
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "343": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "344": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "345": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "RuntimeString",
            "TypeId": 338
          },
          {
            "Name": "impl_name",
            "TypeName": "RuntimeString",
            "TypeId": 338
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 346
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "state_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "346": {
        "TypeFields": [
          {
            "TypeId": 347
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 347
          }
        ],
        "TypeDef": "Composite"
      },
      "347": {
        "TypeId": 348,
        "TypeDef": "Sequence"
      },
      "348": {
        "TypeIds": [
          152,
          4
        ],
        "TypeDef": "Tuple"
      },
      "349": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "350": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 351
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 115
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "351": {
        "TypeId": 115,
        "TypeDef": "Sequence"
      },
      "352": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 354
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 353
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "353": {
        "TypeIds": [
          75,
          11
        ],
        "TypeDef": "Tuple"
      },
      "354": {
        "TypeId": 353,
        "TypeDef": "Sequence"
      },
      "355": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 356
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "356": {
        "TypeId": 1,
        "TypeDef": "Sequence"
      },
      "357": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 358
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 358
          }
        ],
        "TypeDef": "Variant"
      },
      "358": {
        "Variants": [
          {
            "Name": "Primary",
            "TypeFields": [
              {
                "TypeName": "PrimaryPreDigest",
                "TypeId": 359
              }
            ],
            "Index": 1
          },
          {
            "Name": "SecondaryPlain",
            "TypeFields": [
              {
                "TypeName": "SecondaryPlainPreDigest",
                "TypeId": 361
              }
            ],
            "Index": 2
          },
          {
            "Name": "SecondaryVRF",
            "TypeFields": [
              {
                "TypeName": "SecondaryVRFPreDigest",
                "TypeId": 362
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "PreDigest"
        ],
        "TypeDef": "Variant"
      },
      "359": {
        "TypeFields": [
          {
            "Name": "authority_index",
            "TypeName": "super::AuthorityIndex",
            "TypeId": 4
          },
          {
            "Name": "slot",
            "TypeName": "Slot",
            "TypeId": 76
          },
          {
            "Name": "vrf_signature",
            "TypeName": "VrfSignature",
            "TypeId": 360
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "PrimaryPreDigest"
        ],
        "TypeDef": "Composite"
      },
      "360": {
        "TypeFields": [
          {
            "Name": "output",
            "TypeName": "VrfOutput",
            "TypeId": 1
          },
          {
            "Name": "proof",
            "TypeName": "VrfProof",
            "TypeId": 88
          }
        ],
        "Path": [
          "sp_core",
          "sr25519",
          "vrf",
          "VrfSignature"
        ],
        "TypeDef": "Composite"
      },
      "361": {
        "TypeFields": [
          {
            "Name": "authority_index",
            "TypeName": "super::AuthorityIndex",
            "TypeId": 4
          },
          {
            "Name": "slot",
            "TypeName": "Slot",
            "TypeId": 76
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "SecondaryPlainPreDigest"
        ],
        "TypeDef": "Composite"
      },
      "362": {
        "TypeFields": [
          {
            "Name": "authority_index",
            "TypeName": "super::AuthorityIndex",
            "TypeId": 4
          },
          {
            "Name": "slot",
            "TypeName": "Slot",
            "TypeId": 76
          },
          {
            "Name": "vrf_signature",
            "TypeName": "VrfSignature",
            "TypeId": 360
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "digests",
          "SecondaryVRFPreDigest"
        ],
        "TypeDef": "Composite"
      },
      "363": {
        "TypeFields": [
          {
            "Name": "c",
            "TypeName": "(u64, u64)",
            "TypeId": 79
          },
          {
            "Name": "allowed_slots",
            "TypeName": "AllowedSlots",
            "TypeId": 80
          }
        ],
        "Path": [
          "sp_consensus_babe",
          "BabeEpochConfiguration"
        ],
        "TypeDef": "Composite"
      },
      "364": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 366
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 365
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "365": {
        "TypeIds": [
          11,
          4
        ],
        "TypeDef": "Tuple"
      },
      "366": {
        "TypeId": 365,
        "TypeDef": "Sequence"
      },
      "367": {
        "Variants": [
          {
            "Name": "InvalidEquivocationProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "An equivocation proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "InvalidKeyOwnershipProof",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "A key ownership proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "DuplicateOffenceReport",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "A given equivocation report is valid but already previously reported."
            ]
          },
          {
            "Name": "InvalidConfiguration",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Submitted configuration is invalid."
            ]
          }
        ],
        "Path": [
          "pallet_babe",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "368": {
        "Variants": [
          {
            "Name": "Live",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "PendingPause",
            "TypeFields": [
              {
                "Name": "scheduled_at",
                "TypeName": "N",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "N",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Paused",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "PendingResume",
            "TypeFields": [
              {
                "Name": "scheduled_at",
                "TypeName": "N",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "N",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "pallet_grandpa",
          "StoredState"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "369": {
        "TypeFields": [
          {
            "Name": "scheduled_at",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "delay",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "next_authorities",
            "TypeName": "BoundedAuthorityList<Limit>",
            "TypeId": 370
          },
          {
            "Name": "forced",
            "TypeName": "Option<N>",
            "TypeId": 117
          }
        ],
        "Path": [
          "pallet_grandpa",
          "StoredPendingChange"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          },
          {
            "Name": "Limit"
          }
        ],
        "TypeDef": "Composite"
      },
      "370": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 31
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 32
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "371": {
        "Variants": [
          {
            "Name": "PauseFailed",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to signal GRANDPA pause when the authority set isn't live",
              "(either paused or already pending pause)."
            ]
          },
          {
            "Name": "ResumeFailed",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Attempt to signal GRANDPA resume when the authority set isn't paused",
              "(either live or already pending resume)."
            ]
          },
          {
            "Name": "ChangePending",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Attempt to signal GRANDPA change with one already pending."
            ]
          },
          {
            "Name": "TooSoon",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Cannot signal forced change so soon after last."
            ]
          },
          {
            "Name": "InvalidKeyOwnershipProof",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A key ownership proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "InvalidEquivocationProof",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "An equivocation proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "DuplicateOffenceReport",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "A given equivocation report is valid but already previously reported."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "372": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 375
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 373
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "373": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 152
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 374
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "374": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "375": {
        "TypeId": 373,
        "TypeDef": "Sequence"
      },
      "376": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 378
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 377
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "377": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 152
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 152
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "378": {
        "TypeId": 377,
        "TypeDef": "Sequence"
      },
      "379": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 383
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 380
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "380": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "Id",
            "TypeId": 381
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "IdAmount"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 381
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "381": {
        "Variants": [
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::HoldReason",
                "TypeId": 382
              }
            ],
            "Index": 23
          }
        ],
        "Path": [
          "vara_runtime",
          "RuntimeHoldReason"
        ],
        "TypeDef": "Variant"
      },
      "382": {
        "Variants": [
          {
            "Name": "Preimage",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "HoldReason"
        ],
        "TypeDef": "Variant"
      },
      "383": {
        "TypeId": 380,
        "TypeDef": "Sequence"
      },
      "384": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 388
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 385
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "385": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "Id",
            "TypeId": 386
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "IdAmount"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 386
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "386": {
        "Variants": [
          {
            "Name": "NominationPools",
            "TypeFields": [
              {
                "TypeName": "pallet_nomination_pools::FreezeReason",
                "TypeId": 387
              }
            ],
            "Index": 31
          }
        ],
        "Path": [
          "vara_runtime",
          "RuntimeFreezeReason"
        ],
        "TypeDef": "Variant"
      },
      "387": {
        "Variants": [
          {
            "Name": "PoolMinBalance",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "pallet",
          "FreezeReason"
        ],
        "TypeDef": "Variant"
      },
      "388": {
        "TypeId": 385,
        "TypeDef": "Sequence"
      },
      "389": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value."
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit."
            ]
          },
          {
            "Name": "Expendability",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account."
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account."
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist."
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed `MaxReserves`."
            ]
          },
          {
            "Name": "TooManyHolds",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Number of holds exceed `MaxHolds`."
            ]
          },
          {
            "Name": "TooManyFreezes",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Number of freezes exceed `MaxFreezes`."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "390": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 391
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 99
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "391": {
        "TypeId": 99,
        "TypeDef": "Sequence"
      },
      "392": {
        "Variants": [
          {
            "Name": "V0",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V1",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_vesting",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "393": {
        "Variants": [
          {
            "Name": "NotVesting",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The account given is not vesting."
            ]
          },
          {
            "Name": "AtMaxVestingSchedules",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account already has `MaxVestingSchedules` count of schedules and thus",
              "cannot add another one. Consider merging existing schedules in order to add another."
            ]
          },
          {
            "Name": "AmountLow",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Amount being transferred is too low to create a vesting schedule."
            ]
          },
          {
            "Name": "ScheduleIndexOutOfBounds",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "An index was out of bounds of the vesting schedules."
            ]
          },
          {
            "Name": "InvalidScheduleParams",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Failed to create a new schedule because some parameter was invalid."
            ]
          }
        ],
        "Path": [
          "pallet_vesting",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the vesting pallet."
        ]
      },
      "394": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "395": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "396": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "T::AccountId",
            "TypeId": 0
          },
          {
            "Name": "prev",
            "TypeName": "Option<T::AccountId>",
            "TypeId": 273
          },
          {
            "Name": "next",
            "TypeName": "Option<T::AccountId>",
            "TypeId": 273
          },
          {
            "Name": "bag_upper",
            "TypeName": "T::Score",
            "TypeId": 11
          },
          {
            "Name": "score",
            "TypeName": "T::Score",
            "TypeId": 11
          }
        ],
        "Path": [
          "pallet_bags_list",
          "list",
          "Node"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Composite"
      },
      "397": {
        "TypeFields": [
          {
            "Name": "head",
            "TypeName": "Option<T::AccountId>",
            "TypeId": 273
          },
          {
            "Name": "tail",
            "TypeName": "Option<T::AccountId>",
            "TypeId": 273
          }
        ],
        "Path": [
          "pallet_bags_list",
          "list",
          "Bag"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Composite"
      },
      "398": {
        "TypeId": 11,
        "TypeDef": "Sequence"
      },
      "399": {
        "Variants": [
          {
            "Name": "List",
            "TypeFields": [
              {
                "TypeName": "ListError",
                "TypeId": 400
              }
            ],
            "Index": 0,
            "Docs": [
              "A error in the list interface implementation."
            ]
          }
        ],
        "Path": [
          "pallet_bags_list",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "400": {
        "Variants": [
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NotHeavier",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotInSameBag",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "NodeNotFound",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "pallet_bags_list",
          "list",
          "ListError"
        ],
        "TypeDef": "Variant"
      },
      "401": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 402
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 41
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "402": {
        "TypeId": 41,
        "TypeDef": "Sequence"
      },
      "403": {
        "TypeIds": [
          4,
          0
        ],
        "TypeDef": "Tuple"
      },
      "404": {
        "Variants": [
          {
            "Name": "InvalidKey",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Non existent public key."
            ]
          },
          {
            "Name": "DuplicatedHeartbeat",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicated heartbeat."
            ]
          }
        ],
        "Path": [
          "pallet_im_online",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "405": {
        "TypeFields": [
          {
            "Name": "stash",
            "TypeName": "T::AccountId",
            "TypeId": 0
          },
          {
            "Name": "total",
            "TypeName": "BalanceOf<T>",
            "TypeId": 46
          },
          {
            "Name": "active",
            "TypeName": "BalanceOf<T>",
            "TypeId": 46
          },
          {
            "Name": "unlocking",
            "TypeName": "BoundedVec<UnlockChunk<BalanceOf<T>>, T::MaxUnlockingChunks>",
            "TypeId": 406
          },
          {
            "Name": "legacy_claimed_rewards",
            "TypeName": "BoundedVec<EraIndex, T::HistoryDepth>",
            "TypeId": 409
          }
        ],
        "Path": [
          "pallet_staking",
          "StakingLedger"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "406": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 408
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 407
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "407": {
        "TypeFields": [
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 46
          },
          {
            "Name": "era",
            "TypeName": "EraIndex",
            "TypeId": 74
          }
        ],
        "Path": [
          "pallet_staking",
          "UnlockChunk"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "408": {
        "TypeId": 407,
        "TypeDef": "Sequence"
      },
      "409": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 108
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "410": {
        "TypeFields": [
          {
            "Name": "targets",
            "TypeName": "BoundedVec<T::AccountId, MaxNominationsOf<T>>",
            "TypeId": 411
          },
          {
            "Name": "submitted_in",
            "TypeName": "EraIndex",
            "TypeId": 4
          },
          {
            "Name": "suppressed",
            "TypeName": "bool",
            "TypeId": 54
          }
        ],
        "Path": [
          "pallet_staking",
          "Nominations"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "411": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 97
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "412": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "EraIndex",
            "TypeId": 4
          },
          {
            "Name": "start",
            "TypeName": "Option<u64>",
            "TypeId": 264
          }
        ],
        "Path": [
          "pallet_staking",
          "ActiveEraInfo"
        ],
        "TypeDef": "Composite"
      },
      "413": {
        "TypeFields": [
          {
            "Name": "total",
            "TypeName": "Balance",
            "TypeId": 46
          },
          {
            "Name": "own",
            "TypeName": "Balance",
            "TypeId": 46
          },
          {
            "Name": "nominator_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "page_count",
            "TypeName": "Page",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_staking",
          "PagedExposureMetadata"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "414": {
        "TypeIds": [
          4,
          0,
          4
        ],
        "TypeDef": "Tuple"
      },
      "415": {
        "TypeFields": [
          {
            "Name": "page_total",
            "TypeName": "Balance",
            "TypeId": 46
          },
          {
            "Name": "others",
            "TypeName": "Vec<IndividualExposure<AccountId, Balance>>",
            "TypeId": 47
          }
        ],
        "Path": [
          "sp_staking",
          "ExposurePage"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "416": {
        "TypeFields": [
          {
            "Name": "total",
            "TypeName": "RewardPoint",
            "TypeId": 4
          },
          {
            "Name": "individual",
            "TypeName": "BTreeMap<AccountId, RewardPoint>",
            "TypeId": 417
          }
        ],
        "Path": [
          "pallet_staking",
          "EraRewardPoints"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "417": {
        "TypeFields": [
          {
            "TypeId": 418
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 0
          },
          {
            "Name": "V",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "418": {
        "TypeId": 419,
        "TypeDef": "Sequence"
      },
      "419": {
        "TypeIds": [
          0,
          4
        ],
        "TypeDef": "Tuple"
      },
      "420": {
        "TypeId": 421,
        "TypeDef": "Sequence"
      },
      "421": {
        "TypeFields": [
          {
            "Name": "validator",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "own",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "others",
            "TypeName": "Vec<(AccountId, Balance)>",
            "TypeId": 245
          },
          {
            "Name": "reporters",
            "TypeName": "Vec<AccountId>",
            "TypeId": 97
          },
          {
            "Name": "payout",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_staking",
          "UnappliedSlash"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "422": {
        "TypeIds": [
          51,
          6
        ],
        "TypeDef": "Tuple"
      },
      "423": {
        "TypeFields": [
          {
            "Name": "span_index",
            "TypeName": "SpanIndex",
            "TypeId": 4
          },
          {
            "Name": "last_start",
            "TypeName": "EraIndex",
            "TypeId": 4
          },
          {
            "Name": "last_nonzero_slash",
            "TypeName": "EraIndex",
            "TypeId": 4
          },
          {
            "Name": "prior",
            "TypeName": "Vec<EraIndex>",
            "TypeId": 108
          }
        ],
        "Path": [
          "pallet_staking",
          "slashing",
          "SlashingSpans"
        ],
        "TypeDef": "Composite"
      },
      "424": {
        "TypeFields": [
          {
            "Name": "slashed",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "paid_out",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_staking",
          "slashing",
          "SpanRecord"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "425": {
        "TypeId": 426,
        "TypeDef": "Sequence"
      },
      "426": {
        "TypeIds": [
          4,
          54
        ],
        "TypeDef": "Tuple"
      },
      "427": {
        "Variants": [
          {
            "Name": "NotController",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Not a controller account."
            ]
          },
          {
            "Name": "NotStash",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not a stash account."
            ]
          },
          {
            "Name": "AlreadyBonded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Stash is already bonded."
            ]
          },
          {
            "Name": "AlreadyPaired",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Controller is already paired."
            ]
          },
          {
            "Name": "EmptyTargets",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Targets cannot be empty."
            ]
          },
          {
            "Name": "DuplicateIndex",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Duplicate index."
            ]
          },
          {
            "Name": "InvalidSlashIndex",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Slash record index out of bounds."
            ]
          },
          {
            "Name": "InsufficientBond",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot have a validator or nominator role, with value less than the minimum defined by",
              "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
              "intention, `chill` first to remove one's role as validator/nominator."
            ]
          },
          {
            "Name": "NoMoreChunks",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Can not schedule more unlock chunks."
            ]
          },
          {
            "Name": "NoUnlockChunk",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Can not rebond without unlocking chunks."
            ]
          },
          {
            "Name": "FundedTarget",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Attempting to target a stash that still has funds."
            ]
          },
          {
            "Name": "InvalidEraToReward",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Invalid era to reward."
            ]
          },
          {
            "Name": "InvalidNumberOfNominations",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Invalid number of nominations."
            ]
          },
          {
            "Name": "NotSortedAndUnique",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Items are not sorted and unique."
            ]
          },
          {
            "Name": "AlreadyClaimed",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Rewards for this era have already been claimed for this validator."
            ]
          },
          {
            "Name": "InvalidPage",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "No nominators exist on this page."
            ]
          },
          {
            "Name": "IncorrectHistoryDepth",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Incorrect previous history depth input provided."
            ]
          },
          {
            "Name": "IncorrectSlashingSpans",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Incorrect number of slashing spans provided."
            ]
          },
          {
            "Name": "BadState",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Internal state has become somehow corrupted and the operation cannot continue."
            ]
          },
          {
            "Name": "TooManyTargets",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Too many nomination targets supplied."
            ]
          },
          {
            "Name": "BadTarget",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "A nomination target was supplied that was blocked or otherwise not a validator."
            ]
          },
          {
            "Name": "CannotChillOther",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The user has enough bond and thus cannot be chilled forcefully by an external person."
            ]
          },
          {
            "Name": "TooManyNominators",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "There are too many nominators in the system. Governance needs to adjust the staking",
              "settings to keep things safe for the runtime."
            ]
          },
          {
            "Name": "TooManyValidators",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "There are too many validator candidates in the system. Governance needs to adjust the",
              "staking settings to keep things safe for the runtime."
            ]
          },
          {
            "Name": "CommissionTooLow",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Commission is too low. Must be at least `MinCommission`."
            ]
          },
          {
            "Name": "BoundNotMet",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "Some bound is not met."
            ]
          }
        ],
        "Path": [
          "pallet_staking",
          "pallet",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "428": {
        "TypeId": 429,
        "TypeDef": "Sequence"
      },
      "429": {
        "TypeIds": [
          0,
          114
        ],
        "TypeDef": "Tuple"
      },
      "430": {
        "TypeIds": [
          431,
          13
        ],
        "TypeDef": "Tuple"
      },
      "431": {
        "TypeFields": [
          {
            "TypeName": "[u8; 4]",
            "TypeId": 17
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "KeyTypeId"
        ],
        "TypeDef": "Composite"
      },
      "432": {
        "Variants": [
          {
            "Name": "InvalidProof",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Invalid ownership proof."
            ]
          },
          {
            "Name": "NoAssociatedValidatorId",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No associated validator ID for account."
            ]
          },
          {
            "Name": "DuplicatedKey",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Registered duplicate key."
            ]
          },
          {
            "Name": "NoKeys",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "No keys are associated with this account."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Key setting account is not live, so it's impossible to associate keys."
            ]
          }
        ],
        "Path": [
          "pallet_session",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the session pallet."
        ]
      },
      "433": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_treasury",
          "Proposal"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "434": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 108
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "435": {
        "TypeFields": [
          {
            "Name": "asset_kind",
            "TypeName": "AssetKind",
            "TypeId": 58
          },
          {
            "Name": "amount",
            "TypeName": "AssetBalance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "Beneficiary",
            "TypeId": 0
          },
          {
            "Name": "valid_from",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "expire_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "status",
            "TypeName": "PaymentState<PaymentId>",
            "TypeId": 436
          }
        ],
        "Path": [
          "pallet_treasury",
          "SpendStatus"
        ],
        "TypeParams": [
          {
            "Name": "AssetKind",
            "TypeId": 58
          },
          {
            "Name": "AssetBalance",
            "TypeId": 6
          },
          {
            "Name": "Beneficiary",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PaymentId",
            "TypeId": 58
          }
        ],
        "TypeDef": "Composite"
      },
      "436": {
        "Variants": [
          {
            "Name": "Pending",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "Id",
                "TypeId": 58
              }
            ],
            "Index": 1
          },
          {
            "Name": "Failed",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_treasury",
          "PaymentState"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 58
          }
        ],
        "TypeDef": "Variant"
      },
      "437": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Permill"
        ],
        "TypeDef": "Composite"
      },
      "438": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 152
          }
        ],
        "Path": [
          "frame_support",
          "PalletId"
        ],
        "TypeDef": "Composite"
      },
      "439": {
        "Variants": [
          {
            "Name": "InsufficientProposersBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Proposer's balance is too low."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No proposal, bounty or spend at that index."
            ]
          },
          {
            "Name": "TooManyApprovals",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Too many approvals in the queue."
            ]
          },
          {
            "Name": "InsufficientPermission",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "Name": "ProposalNotApproved",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal has not been approved."
            ]
          },
          {
            "Name": "FailedToConvertBalance",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The balance of the asset kind is not convertible to the balance of the native asset."
            ]
          },
          {
            "Name": "SpendExpired",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The spend has expired and cannot be claimed."
            ]
          },
          {
            "Name": "EarlyPayout",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The spend is not yet eligible for payout."
            ]
          },
          {
            "Name": "AlreadyAttempted",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The payment has already been attempted."
            ]
          },
          {
            "Name": "PayoutError",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "There was some issue with the mechanism of payment."
            ]
          },
          {
            "Name": "NotAttempted",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The payout was not yet attempted/claimed."
            ]
          },
          {
            "Name": "Inconclusive",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The payment has neither failed nor succeeded yet."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the treasury pallet."
        ]
      },
      "440": {
        "TypeIds": [
          12,
          4
        ],
        "TypeDef": "Tuple"
      },
      "441": {
        "Variants": [
          {
            "Name": "TooManyCalls",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many calls batched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "442": {
        "TypeIds": [
          0,
          63
        ],
        "TypeDef": "Tuple"
      },
      "443": {
        "Variants": [
          {
            "Name": "Casting",
            "TypeFields": [
              {
                "TypeName": "Casting<Balance, BlockNumber, PollIndex, MaxVotes>",
                "TypeId": 444
              }
            ],
            "Index": 0
          },
          {
            "Name": "Delegating",
            "TypeFields": [
              {
                "TypeName": "Delegating<Balance, AccountId, BlockNumber>",
                "TypeId": 450
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "Voting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PollIndex",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Variant"
      },
      "444": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>",
            "TypeId": 445
          },
          {
            "Name": "delegations",
            "TypeName": "Delegations<Balance>",
            "TypeId": 448
          },
          {
            "Name": "prior",
            "TypeName": "PriorLock<BlockNumber, Balance>",
            "TypeId": 449
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "Casting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PollIndex",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Composite"
      },
      "445": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 447
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 446
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "446": {
        "TypeIds": [
          4,
          125
        ],
        "TypeDef": "Tuple"
      },
      "447": {
        "TypeId": 446,
        "TypeDef": "Sequence"
      },
      "448": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "capital",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "types",
          "Delegations"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "449": {
        "TypeFields": [
          {
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "PriorLock"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "450": {
        "TypeFields": [
          {
            "Name": "balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "target",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "conviction",
            "TypeName": "Conviction",
            "TypeId": 127
          },
          {
            "Name": "delegations",
            "TypeName": "Delegations<Balance>",
            "TypeId": 448
          },
          {
            "Name": "prior",
            "TypeName": "PriorLock<BlockNumber, Balance>",
            "TypeId": 449
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "vote",
          "Delegating"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "451": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 453
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 452
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "452": {
        "TypeIds": [
          63,
          6
        ],
        "TypeDef": "Tuple"
      },
      "453": {
        "TypeId": 452,
        "TypeDef": "Sequence"
      },
      "454": {
        "Variants": [
          {
            "Name": "NotOngoing",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Poll is not ongoing."
            ]
          },
          {
            "Name": "NotVoter",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The given account did not vote on the poll."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "Name": "NoPermissionYet",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The actor has no permission to conduct the action right now but will do in the future."
            ]
          },
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The account is already delegating."
            ]
          },
          {
            "Name": "AlreadyVoting",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "Name": "NotDelegating",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The account is not currently delegating."
            ]
          },
          {
            "Name": "Nonsense",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Maximum number of votes reached."
            ]
          },
          {
            "Name": "ClassNeeded",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The class must be supplied since it is not easily determinable from the state."
            ]
          },
          {
            "Name": "BadClass",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The class ID supplied is invalid."
            ]
          }
        ],
        "Path": [
          "pallet_conviction_voting",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "455": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>",
                "TypeId": 456
              }
            ],
            "Index": 0
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              }
            ],
            "Index": 1
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              }
            ],
            "Index": 2
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              }
            ],
            "Index": 3
          },
          {
            "Name": "TimedOut",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              }
            ],
            "Index": 4
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "TrackId",
            "TypeId": 63
          },
          {
            "Name": "RuntimeOrigin",
            "TypeId": 120
          },
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Call",
            "TypeId": 64
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Tally",
            "TypeId": 279
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ScheduleAddress",
            "TypeId": 137
          }
        ],
        "TypeDef": "Variant"
      },
      "456": {
        "TypeFields": [
          {
            "Name": "track",
            "TypeName": "TrackId",
            "TypeId": 63
          },
          {
            "Name": "origin",
            "TypeName": "RuntimeOrigin",
            "TypeId": 120
          },
          {
            "Name": "proposal",
            "TypeName": "Call",
            "TypeId": 64
          },
          {
            "Name": "enactment",
            "TypeName": "DispatchTime<Moment>",
            "TypeId": 130
          },
          {
            "Name": "submitted",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "submission_deposit",
            "TypeName": "Deposit<AccountId, Balance>",
            "TypeId": 457
          },
          {
            "Name": "decision_deposit",
            "TypeName": "Option<Deposit<AccountId, Balance>>",
            "TypeId": 458
          },
          {
            "Name": "deciding",
            "TypeName": "Option<DecidingStatus<Moment>>",
            "TypeId": 459
          },
          {
            "Name": "tally",
            "TypeName": "Tally",
            "TypeId": 279
          },
          {
            "Name": "in_queue",
            "TypeName": "bool",
            "TypeId": 54
          },
          {
            "Name": "alarm",
            "TypeName": "Option<(Moment, ScheduleAddress)>",
            "TypeId": 461
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "TrackId",
            "TypeId": 63
          },
          {
            "Name": "RuntimeOrigin",
            "TypeId": 120
          },
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Call",
            "TypeId": 64
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Tally",
            "TypeId": 279
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ScheduleAddress",
            "TypeId": 137
          }
        ],
        "TypeDef": "Composite"
      },
      "457": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "Deposit"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "458": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 457
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 457
          }
        ],
        "TypeDef": "Variant"
      },
      "459": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 460
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 460
          }
        ],
        "TypeDef": "Variant"
      },
      "460": {
        "TypeFields": [
          {
            "Name": "since",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "confirming",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 117
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "DecidingStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "461": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 462
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 462
          }
        ],
        "TypeDef": "Variant"
      },
      "462": {
        "TypeIds": [
          4,
          137
        ],
        "TypeDef": "Tuple"
      },
      "463": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 465
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 464
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "464": {
        "TypeIds": [
          4,
          6
        ],
        "TypeDef": "Tuple"
      },
      "465": {
        "TypeId": 464,
        "TypeDef": "Sequence"
      },
      "466": {
        "TypeId": 467,
        "TypeDef": "Sequence"
      },
      "467": {
        "TypeIds": [
          63,
          468
        ],
        "TypeDef": "Tuple"
      },
      "468": {
        "TypeFields": [
          {
            "Name": "name",
            "TypeName": "&'static str",
            "TypeId": 338
          },
          {
            "Name": "max_deciding",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "decision_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "prepare_period",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "decision_period",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "confirm_period",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "min_enactment_period",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "min_approval",
            "TypeName": "Curve",
            "TypeId": 469
          },
          {
            "Name": "min_support",
            "TypeName": "Curve",
            "TypeId": 469
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "TrackInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Moment",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "469": {
        "Variants": [
          {
            "Name": "LinearDecreasing",
            "TypeFields": [
              {
                "Name": "length",
                "TypeName": "Perbill",
                "TypeId": 51
              },
              {
                "Name": "floor",
                "TypeName": "Perbill",
                "TypeId": 51
              },
              {
                "Name": "ceil",
                "TypeName": "Perbill",
                "TypeId": 51
              }
            ],
            "Index": 0
          },
          {
            "Name": "SteppedDecreasing",
            "TypeFields": [
              {
                "Name": "begin",
                "TypeName": "Perbill",
                "TypeId": 51
              },
              {
                "Name": "end",
                "TypeName": "Perbill",
                "TypeId": 51
              },
              {
                "Name": "step",
                "TypeName": "Perbill",
                "TypeId": 51
              },
              {
                "Name": "period",
                "TypeName": "Perbill",
                "TypeId": 51
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reciprocal",
            "TypeFields": [
              {
                "Name": "factor",
                "TypeName": "FixedI64",
                "TypeId": 470
              },
              {
                "Name": "x_offset",
                "TypeName": "FixedI64",
                "TypeId": 470
              },
              {
                "Name": "y_offset",
                "TypeName": "FixedI64",
                "TypeId": 470
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "Curve"
        ],
        "TypeDef": "Variant"
      },
      "470": {
        "TypeFields": [
          {
            "TypeName": "i64",
            "TypeId": 471
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedI64"
        ],
        "TypeDef": "Composite"
      },
      "471": {
        "Primitive": "I64",
        "TypeDef": "Primitive"
      },
      "472": {
        "Variants": [
          {
            "Name": "NotOngoing",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Referendum is not ongoing."
            ]
          },
          {
            "Name": "HasDeposit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Referendum's decision deposit is already paid."
            ]
          },
          {
            "Name": "BadTrack",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The track identifier given was invalid."
            ]
          },
          {
            "Name": "Full",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are already a full complement of referenda in progress for this track."
            ]
          },
          {
            "Name": "QueueEmpty",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The queue of the track is empty."
            ]
          },
          {
            "Name": "BadReferendum",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The referendum index provided is invalid in this context."
            ]
          },
          {
            "Name": "NothingToDo",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "There was nothing to do in the advancement."
            ]
          },
          {
            "Name": "NoTrack",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No track exists for the proposal origin."
            ]
          },
          {
            "Name": "Unfinished",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Any deposit cannot be refunded until after the decision is over."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The deposit refunder is not the depositor."
            ]
          },
          {
            "Name": "NoDeposit",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The deposit cannot be refunded since none was made."
            ]
          },
          {
            "Name": "BadStatus",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referendum status is invalid for this operation."
            ]
          },
          {
            "Name": "PreimageNotExist",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The preimage does not exist."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "473": {
        "TypeFields": [
          {
            "Name": "rank",
            "TypeName": "Rank",
            "TypeId": 63
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "MemberRecord"
        ],
        "TypeDef": "Composite"
      },
      "474": {
        "TypeIds": [
          63,
          0
        ],
        "TypeDef": "Tuple"
      },
      "475": {
        "TypeIds": [
          63,
          4
        ],
        "TypeDef": "Tuple"
      },
      "476": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "477": {
        "Variants": [
          {
            "Name": "AlreadyMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is already a member."
            ]
          },
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account is not a member."
            ]
          },
          {
            "Name": "NotPolling",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The given poll index is unknown or has closed."
            ]
          },
          {
            "Name": "Ongoing",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The given poll is still ongoing."
            ]
          },
          {
            "Name": "NoneRemaining",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are no further records to be removed."
            ]
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Unexpected error in state."
            ]
          },
          {
            "Name": "RankTooLow",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The member's rank is too low to vote."
            ]
          },
          {
            "Name": "InvalidWitness",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The information provided is incorrect."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The origin is not sufficiently privileged to do the operation."
            ]
          }
        ],
        "Path": [
          "pallet_ranked_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "478": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>",
                "TypeId": 479
              }
            ],
            "Index": 0
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              }
            ],
            "Index": 1
          },
          {
            "Name": "Rejected",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              }
            ],
            "Index": 2
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              }
            ],
            "Index": 3
          },
          {
            "Name": "TimedOut",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              },
              {
                "TypeName": "Option<Deposit<AccountId, Balance>>",
                "TypeId": 458
              }
            ],
            "Index": 4
          },
          {
            "Name": "Killed",
            "TypeFields": [
              {
                "TypeName": "Moment",
                "TypeId": 4
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "TrackId",
            "TypeId": 63
          },
          {
            "Name": "RuntimeOrigin",
            "TypeId": 120
          },
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Call",
            "TypeId": 64
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Tally",
            "TypeId": 282
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ScheduleAddress",
            "TypeId": 137
          }
        ],
        "TypeDef": "Variant"
      },
      "479": {
        "TypeFields": [
          {
            "Name": "track",
            "TypeName": "TrackId",
            "TypeId": 63
          },
          {
            "Name": "origin",
            "TypeName": "RuntimeOrigin",
            "TypeId": 120
          },
          {
            "Name": "proposal",
            "TypeName": "Call",
            "TypeId": 64
          },
          {
            "Name": "enactment",
            "TypeName": "DispatchTime<Moment>",
            "TypeId": 130
          },
          {
            "Name": "submitted",
            "TypeName": "Moment",
            "TypeId": 4
          },
          {
            "Name": "submission_deposit",
            "TypeName": "Deposit<AccountId, Balance>",
            "TypeId": 457
          },
          {
            "Name": "decision_deposit",
            "TypeName": "Option<Deposit<AccountId, Balance>>",
            "TypeId": 458
          },
          {
            "Name": "deciding",
            "TypeName": "Option<DecidingStatus<Moment>>",
            "TypeId": 459
          },
          {
            "Name": "tally",
            "TypeName": "Tally",
            "TypeId": 282
          },
          {
            "Name": "in_queue",
            "TypeName": "bool",
            "TypeId": 54
          },
          {
            "Name": "alarm",
            "TypeName": "Option<(Moment, ScheduleAddress)>",
            "TypeId": 461
          }
        ],
        "Path": [
          "pallet_referenda",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "TrackId",
            "TypeId": 63
          },
          {
            "Name": "RuntimeOrigin",
            "TypeId": 120
          },
          {
            "Name": "Moment",
            "TypeId": 4
          },
          {
            "Name": "Call",
            "TypeId": 64
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Tally",
            "TypeId": 282
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ScheduleAddress",
            "TypeId": 137
          }
        ],
        "TypeDef": "Composite"
      },
      "480": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 336
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 137
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "481": {
        "Variants": [
          {
            "Name": "NotOngoing",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Referendum is not ongoing."
            ]
          },
          {
            "Name": "HasDeposit",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Referendum's decision deposit is already paid."
            ]
          },
          {
            "Name": "BadTrack",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The track identifier given was invalid."
            ]
          },
          {
            "Name": "Full",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are already a full complement of referenda in progress for this track."
            ]
          },
          {
            "Name": "QueueEmpty",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The queue of the track is empty."
            ]
          },
          {
            "Name": "BadReferendum",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The referendum index provided is invalid in this context."
            ]
          },
          {
            "Name": "NothingToDo",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "There was nothing to do in the advancement."
            ]
          },
          {
            "Name": "NoTrack",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No track exists for the proposal origin."
            ]
          },
          {
            "Name": "Unfinished",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Any deposit cannot be refunded until after the decision is over."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The deposit refunder is not the depositor."
            ]
          },
          {
            "Name": "NoDeposit",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The deposit cannot be refunded since none was made."
            ]
          },
          {
            "Name": "BadStatus",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The referendum status is invalid for this operation."
            ]
          },
          {
            "Name": "PreimageNotExist",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The preimage does not exist."
            ]
          }
        ],
        "Path": [
          "pallet_referenda",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "482": {
        "Variants": [
          {
            "Name": "UnavailablePreImage",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The preimage of the call hash could not be loaded."
            ]
          },
          {
            "Name": "UndecodableCall",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The call could not be decoded."
            ]
          },
          {
            "Name": "InvalidCallWeightWitness",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The weight of the decoded call was higher than the witness."
            ]
          },
          {
            "Name": "CallIsNotWhitelisted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The call was not whitelisted."
            ]
          },
          {
            "Name": "CallAlreadyWhitelisted",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The call was already whitelisted; No-Op."
            ]
          }
        ],
        "Path": [
          "pallet_whitelist",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "483": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 486
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 484
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "484": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 485
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 485
          }
        ],
        "TypeDef": "Variant"
      },
      "485": {
        "TypeFields": [
          {
            "Name": "maybe_id",
            "TypeName": "Option<Name>",
            "TypeId": 290
          },
          {
            "Name": "priority",
            "TypeName": "schedule::Priority",
            "TypeId": 2
          },
          {
            "Name": "call",
            "TypeName": "Call",
            "TypeId": 64
          },
          {
            "Name": "maybe_periodic",
            "TypeName": "Option<schedule::Period<BlockNumber>>",
            "TypeId": 136
          },
          {
            "Name": "origin",
            "TypeName": "PalletsOrigin",
            "TypeId": 120
          }
        ],
        "Path": [
          "pallet_scheduler",
          "Scheduled"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 1
          },
          {
            "Name": "Call",
            "TypeId": 64
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PalletsOrigin",
            "TypeId": 120
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "486": {
        "TypeId": 484,
        "TypeDef": "Sequence"
      },
      "487": {
        "Variants": [
          {
            "Name": "FailedToSchedule",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to schedule a call"
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot find the scheduled call."
            ]
          },
          {
            "Name": "TargetBlockNumberInPast",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Given target block number is in the past."
            ]
          },
          {
            "Name": "RescheduleNoChange",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Reschedule failed because it does not change scheduled time."
            ]
          },
          {
            "Name": "Named",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Attempt to use a non-named function on a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "488": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "(AccountId, Balance)",
                "TypeId": 246
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "Option<(AccountId, Balance)>",
                "TypeId": 489
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "len",
                "TypeName": "Option<u32>",
                "TypeId": 117
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "OldRequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "489": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 246
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 246
          }
        ],
        "TypeDef": "Variant"
      },
      "490": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "ticket",
                "TypeName": "(AccountId, Ticket)",
                "TypeId": 492
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "maybe_ticket",
                "TypeName": "Option<(AccountId, Ticket)>",
                "TypeId": 493
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "maybe_len",
                "TypeName": "Option<u32>",
                "TypeId": 117
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "RequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Ticket",
            "TypeId": 491
          }
        ],
        "TypeDef": "Variant"
      },
      "491": {
        "TypeFields": [
          {
            "TypeName": "F::Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "fungible",
          "HoldConsideration"
        ],
        "TypeParams": [
          {
            "Name": "A"
          },
          {
            "Name": "F"
          },
          {
            "Name": "R"
          },
          {
            "Name": "D"
          }
        ],
        "TypeDef": "Composite"
      },
      "492": {
        "TypeIds": [
          0,
          491
        ],
        "TypeDef": "Tuple"
      },
      "493": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 492
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 492
          }
        ],
        "TypeDef": "Variant"
      },
      "494": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "495": {
        "Variants": [
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Preimage is too large to store on-chain."
            ]
          },
          {
            "Name": "AlreadyNoted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Preimage has already been noted on-chain."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The user is not authorized to perform this action."
            ]
          },
          {
            "Name": "NotNoted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The preimage cannot be removed since it has not yet been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A preimage may not be removed when there are outstanding requests."
            ]
          },
          {
            "Name": "NotRequested",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The preimage request cannot be removed since no outstanding requests exist."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."
            ]
          },
          {
            "Name": "TooFew",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too few hashes were requested to be upgraded (i.e. zero)."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "496": {
        "TypeFields": [
          {
            "Name": "judgements",
            "TypeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
            "TypeId": 497
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "info",
            "TypeName": "IdentityInfo",
            "TypeId": 141
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Registration"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "MaxJudgements"
          },
          {
            "Name": "IdentityInfo",
            "TypeId": 141
          }
        ],
        "TypeDef": "Composite"
      },
      "497": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 499
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 498
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "498": {
        "TypeIds": [
          4,
          179
        ],
        "TypeDef": "Tuple"
      },
      "499": {
        "TypeId": 498,
        "TypeDef": "Sequence"
      },
      "500": {
        "TypeIds": [
          6,
          501
        ],
        "TypeDef": "Tuple"
      },
      "501": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 97
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "502": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 505
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 503
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "503": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 504
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 504
          }
        ],
        "TypeDef": "Variant"
      },
      "504": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fields",
            "TypeName": "IdField",
            "TypeId": 11
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "RegistrarInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "IdField",
            "TypeId": 11
          }
        ],
        "TypeDef": "Composite"
      },
      "505": {
        "TypeId": 503,
        "TypeDef": "Sequence"
      },
      "506": {
        "Variants": [
          {
            "Name": "TooManySubAccounts",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many subs-accounts."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account isn't found."
            ]
          },
          {
            "Name": "NotNamed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Account isn't named."
            ]
          },
          {
            "Name": "EmptyIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Empty index."
            ]
          },
          {
            "Name": "FeeChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Fee is changed."
            ]
          },
          {
            "Name": "NoIdentity",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No identity found."
            ]
          },
          {
            "Name": "StickyJudgement",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Sticky judgement."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Judgement given."
            ]
          },
          {
            "Name": "InvalidJudgement",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid judgement."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The index is invalid."
            ]
          },
          {
            "Name": "InvalidTarget",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The target is invalid."
            ]
          },
          {
            "Name": "TooManyRegistrars",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Maximum amount of registrars reached. Cannot add any more."
            ]
          },
          {
            "Name": "AlreadyClaimed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Account ID is already named."
            ]
          },
          {
            "Name": "NotSub",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Sender is not a sub-account."
            ]
          },
          {
            "Name": "NotOwned",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Sub-account isn't owned by sender."
            ]
          },
          {
            "Name": "JudgementForDifferentIdentity",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The provided judgement was for a different identity."
            ]
          },
          {
            "Name": "JudgementPaymentFailed",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Error that occurs when there is an issue paying for judgement."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "507": {
        "TypeIds": [
          508,
          6
        ],
        "TypeDef": "Tuple"
      },
      "508": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 510
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 509
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "509": {
        "TypeFields": [
          {
            "Name": "delegate",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "proxy_type",
            "TypeName": "ProxyType",
            "TypeId": 182
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "ProxyDefinition"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ProxyType",
            "TypeId": 182
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "510": {
        "TypeId": 509,
        "TypeDef": "Sequence"
      },
      "511": {
        "TypeIds": [
          512,
          6
        ],
        "TypeDef": "Tuple"
      },
      "512": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 514
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 513
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "513": {
        "TypeFields": [
          {
            "Name": "real",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "call_hash",
            "TypeName": "Hash",
            "TypeId": 12
          },
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "Announcement"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Hash",
            "TypeId": 12
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "514": {
        "TypeId": 513,
        "TypeDef": "Sequence"
      },
      "515": {
        "Variants": [
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There are too many proxies registered or too many announcements pending."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proxy registration not found."
            ]
          },
          {
            "Name": "NotProxy",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Sender is not a proxy of the account to be proxied."
            ]
          },
          {
            "Name": "Unproxyable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A call which is incompatible with the proxy type's filter was attempted."
            ]
          },
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Account is already a proxy."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Call may not be made by proxy because it may escalate its privileges."
            ]
          },
          {
            "Name": "Unannounced",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Announcement, if made at all, was made too recently."
            ]
          },
          {
            "Name": "NoSelfProxy",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot add self as proxy."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "516": {
        "TypeIds": [
          0,
          1
        ],
        "TypeDef": "Tuple"
      },
      "517": {
        "TypeFields": [
          {
            "Name": "when",
            "TypeName": "Timepoint<BlockNumber>",
            "TypeId": 185
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedVec<AccountId, MaxApprovals>",
            "TypeId": 518
          }
        ],
        "Path": [
          "pallet_multisig",
          "Multisig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "MaxApprovals"
          }
        ],
        "TypeDef": "Composite"
      },
      "518": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 97
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "519": {
        "Variants": [
          {
            "Name": "MinimumThreshold",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "Name": "AlreadyApproved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "Name": "NoApprovalsNeeded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "Name": "TooFewSignatories",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too few signatories in the list."
            ]
          },
          {
            "Name": "TooManySignatories",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many signatories in the list."
            ]
          },
          {
            "Name": "SignatoriesOutOfOrder",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "Name": "SenderInSignatories",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "Name": "NoTimepoint",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "Name": "WrongTimepoint",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "Name": "UnexpectedTimepoint",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "Name": "MaxWeightTooLow",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "Name": "AlreadyStored",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "520": {
        "TypeFields": [
          {
            "Name": "supports",
            "TypeName": "BoundedSupports<AccountId, MaxWinners>",
            "TypeId": 521
          },
          {
            "Name": "score",
            "TypeName": "ElectionScore",
            "TypeId": 239
          },
          {
            "Name": "compute",
            "TypeName": "ElectionCompute",
            "TypeId": 296
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "ReadySolution"
        ],
        "TypeParams": [
          {
            "Name": "AccountId"
          },
          {
            "Name": "MaxWinners"
          }
        ],
        "TypeDef": "Composite"
      },
      "521": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 242
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 243
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "522": {
        "TypeFields": [
          {
            "Name": "voters",
            "TypeName": "Vec<DataProvider>",
            "TypeId": 524
          },
          {
            "Name": "targets",
            "TypeName": "Vec<AccountId>",
            "TypeId": 97
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "RoundSnapshot"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "DataProvider",
            "TypeId": 523
          }
        ],
        "TypeDef": "Composite"
      },
      "523": {
        "TypeIds": [
          0,
          11,
          411
        ],
        "TypeDef": "Tuple"
      },
      "524": {
        "TypeId": 523,
        "TypeDef": "Sequence"
      },
      "525": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 527
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 526
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "526": {
        "TypeIds": [
          239,
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "527": {
        "TypeId": 526,
        "TypeDef": "Sequence"
      },
      "528": {
        "TypeFields": [
          {
            "Name": "who",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "raw_solution",
            "TypeName": "RawSolution<Solution>",
            "TypeId": 187
          },
          {
            "Name": "call_fee",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "signed",
          "SignedSubmission"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Solution",
            "TypeId": 188
          }
        ],
        "TypeDef": "Composite"
      },
      "529": {
        "Variants": [
          {
            "Name": "PreDispatchEarlySubmission",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Submission was too early."
            ]
          },
          {
            "Name": "PreDispatchWrongWinnerCount",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Wrong number of winners presented."
            ]
          },
          {
            "Name": "PreDispatchWeakSubmission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Submission was too weak, score-wise."
            ]
          },
          {
            "Name": "SignedQueueFull",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The queue was full, and the solution was not better than any of the existing ones."
            ]
          },
          {
            "Name": "SignedCannotPayDeposit",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The origin failed to pay the deposit."
            ]
          },
          {
            "Name": "SignedInvalidWitness",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Witness data to dispatchable is invalid."
            ]
          },
          {
            "Name": "SignedTooMuchWeight",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The signed submission consumes too much weight"
            ]
          },
          {
            "Name": "OcwCallWrongEra",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "OCW submitted solution for wrong round"
            ]
          },
          {
            "Name": "MissingSnapshotMetadata",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Snapshot metadata should exist but didn't."
            ]
          },
          {
            "Name": "InvalidSubmissionIndex",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "`Self::insert_submission` returned an invalid index."
            ]
          },
          {
            "Name": "CallNotAllowed",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The call is not allowed at this point."
            ]
          },
          {
            "Name": "FallbackFailed",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The fallback failed"
            ]
          },
          {
            "Name": "BoundNotMet",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Some bound not met"
            ]
          },
          {
            "Name": "TooManyWinners",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Submitted solution has too many winners"
            ]
          }
        ],
        "Path": [
          "pallet_election_provider_multi_phase",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error of the pallet that can be returned in response to dispatches."
        ]
      },
      "530": {
        "TypeFields": [
          {
            "Name": "offender",
            "TypeName": "Offender",
            "TypeId": 44
          },
          {
            "Name": "reporters",
            "TypeName": "Vec<Reporter>",
            "TypeId": 97
          }
        ],
        "Path": [
          "sp_staking",
          "offence",
          "OffenceDetails"
        ],
        "TypeParams": [
          {
            "Name": "Reporter",
            "TypeId": 0
          },
          {
            "Name": "Offender",
            "TypeId": 44
          }
        ],
        "TypeDef": "Composite"
      },
      "531": {
        "TypeIds": [
          160,
          13
        ],
        "TypeDef": "Tuple"
      },
      "532": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "curator_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "status",
            "TypeName": "BountyStatus<AccountId, BlockNumber>",
            "TypeId": 533
          }
        ],
        "Path": [
          "pallet_bounties",
          "Bounty"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "533": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Approved",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Funded",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CuratorProposed",
            "TypeFields": [
              {
                "Name": "curator",
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3
          },
          {
            "Name": "Active",
            "TypeFields": [
              {
                "Name": "curator",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "update_due",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 4
          },
          {
            "Name": "PendingPayout",
            "TypeFields": [
              {
                "Name": "curator",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "unlock_at",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 5
          }
        ],
        "Path": [
          "pallet_bounties",
          "BountyStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "534": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "535": {
        "Variants": [
          {
            "Name": "InsufficientProposersBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Proposer's balance is too low."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "No proposal or bounty at that index."
            ]
          },
          {
            "Name": "ReasonTooBig",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The reason given is just too big."
            ]
          },
          {
            "Name": "UnexpectedStatus",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The bounty status is unexpected."
            ]
          },
          {
            "Name": "RequireCurator",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Require bounty curator."
            ]
          },
          {
            "Name": "InvalidValue",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Invalid bounty value."
            ]
          },
          {
            "Name": "InvalidFee",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid bounty fee."
            ]
          },
          {
            "Name": "PendingPayout",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "A bounty payout is pending.",
              "To cancel the bounty, you must unassign and slash the curator."
            ]
          },
          {
            "Name": "Premature",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The bounties cannot be claimed/closed because it's still in the countdown period."
            ]
          },
          {
            "Name": "HasActiveChildBounty",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The bounty cannot be closed because it has active child bounties."
            ]
          },
          {
            "Name": "TooManyQueued",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Too many approvals are already queued."
            ]
          }
        ],
        "Path": [
          "pallet_bounties",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "536": {
        "TypeFields": [
          {
            "Name": "parent_bounty",
            "TypeName": "BountyIndex",
            "TypeId": 4
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "curator_deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "status",
            "TypeName": "ChildBountyStatus<AccountId, BlockNumber>",
            "TypeId": 537
          }
        ],
        "Path": [
          "pallet_child_bounties",
          "ChildBounty"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "537": {
        "Variants": [
          {
            "Name": "Added",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CuratorProposed",
            "TypeFields": [
              {
                "Name": "curator",
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "Active",
            "TypeFields": [
              {
                "Name": "curator",
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2
          },
          {
            "Name": "PendingPayout",
            "TypeFields": [
              {
                "Name": "curator",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "unlock_at",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "pallet_child_bounties",
          "ChildBountyStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "538": {
        "Variants": [
          {
            "Name": "ParentBountyNotActive",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The parent bounty is not in active state."
            ]
          },
          {
            "Name": "InsufficientBountyBalance",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The bounty balance is not enough to add new child-bounty."
            ]
          },
          {
            "Name": "TooManyChildBounties",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Number of child bounties exceeds limit `MaxActiveChildBountyCount`."
            ]
          }
        ],
        "Path": [
          "pallet_child_bounties",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "539": {
        "TypeFields": [
          {
            "Name": "pool_id",
            "TypeName": "PoolId",
            "TypeId": 4
          },
          {
            "Name": "points",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "last_recorded_reward_counter",
            "TypeName": "T::RewardCounter",
            "TypeId": 394
          },
          {
            "Name": "unbonding_eras",
            "TypeName": "BoundedBTreeMap<EraIndex, BalanceOf<T>, T::MaxUnbonding>",
            "TypeId": 540
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "PoolMember"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "540": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 541
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 6
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "541": {
        "TypeFields": [
          {
            "TypeId": 465
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "542": {
        "TypeFields": [
          {
            "Name": "commission",
            "TypeName": "Commission<T>",
            "TypeId": 543
          },
          {
            "Name": "member_counter",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "points",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "roles",
            "TypeName": "PoolRoles<T::AccountId>",
            "TypeId": 546
          },
          {
            "Name": "state",
            "TypeName": "PoolState",
            "TypeId": 251
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "BondedPoolInner"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "543": {
        "TypeFields": [
          {
            "Name": "current",
            "TypeName": "Option<(Perbill, T::AccountId)>",
            "TypeId": 257
          },
          {
            "Name": "max",
            "TypeName": "Option<Perbill>",
            "TypeId": 544
          },
          {
            "Name": "change_rate",
            "TypeName": "Option<CommissionChangeRate<BlockNumberFor<T>>>",
            "TypeId": 545
          },
          {
            "Name": "throttle_from",
            "TypeName": "Option<BlockNumberFor<T>>",
            "TypeId": 117
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "Commission"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "544": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 51
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 51
          }
        ],
        "TypeDef": "Variant"
      },
      "545": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 259
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 259
          }
        ],
        "TypeDef": "Variant"
      },
      "546": {
        "TypeFields": [
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "root",
            "TypeName": "Option<AccountId>",
            "TypeId": 273
          },
          {
            "Name": "nominator",
            "TypeName": "Option<AccountId>",
            "TypeId": 273
          },
          {
            "Name": "bouncer",
            "TypeName": "Option<AccountId>",
            "TypeId": 273
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "PoolRoles"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "547": {
        "TypeFields": [
          {
            "Name": "last_recorded_reward_counter",
            "TypeName": "T::RewardCounter",
            "TypeId": 394
          },
          {
            "Name": "last_recorded_total_payouts",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "total_rewards_claimed",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "total_commission_pending",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "total_commission_claimed",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "RewardPool"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "548": {
        "TypeFields": [
          {
            "Name": "no_era",
            "TypeName": "UnbondPool<T>",
            "TypeId": 549
          },
          {
            "Name": "with_era",
            "TypeName": "BoundedBTreeMap<EraIndex, UnbondPool<T>, TotalUnbondingPools<T>>",
            "TypeId": 550
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "SubPools"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "549": {
        "TypeFields": [
          {
            "Name": "points",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          },
          {
            "Name": "balance",
            "TypeName": "BalanceOf<T>",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "UnbondPool"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "550": {
        "TypeFields": [
          {
            "TypeName": "BTreeMap<K, V>",
            "TypeId": 551
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_btree_map",
          "BoundedBTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 549
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "551": {
        "TypeFields": [
          {
            "TypeId": 552
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 549
          }
        ],
        "TypeDef": "Composite"
      },
      "552": {
        "TypeId": 553,
        "TypeDef": "Sequence"
      },
      "553": {
        "TypeIds": [
          4,
          549
        ],
        "TypeDef": "Tuple"
      },
      "554": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "555": {
        "Variants": [
          {
            "Name": "PoolNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "A (bonded) pool id does not exist."
            ]
          },
          {
            "Name": "PoolMemberNotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "An account is not a member."
            ]
          },
          {
            "Name": "RewardPoolNotFound",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "A reward pool does not exist. In all cases this is a system logic error."
            ]
          },
          {
            "Name": "SubPoolsNotFound",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A sub pool does not exist."
            ]
          },
          {
            "Name": "AccountBelongsToOtherPool",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "An account is already delegating in another pool. An account may only belong to one",
              "pool at a time."
            ]
          },
          {
            "Name": "FullyUnbonding",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The member is fully unbonded (and thus cannot access the bonded and reward pool",
              "anymore to, for example, collect rewards)."
            ]
          },
          {
            "Name": "MaxUnbondingLimit",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The member cannot unbond further chunks due to reaching the limit."
            ]
          },
          {
            "Name": "CannotWithdrawAny",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "None of the funds can be withdrawn yet because the bonding duration has not passed."
            ]
          },
          {
            "Name": "MinimumBondNotMet",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The amount does not meet the minimum bond to either join or create a pool.",
              "",
              "The depositor can never unbond to a value less than `Pallet::depositor_min_bond`. The",
              "caller does not have nominating permissions for the pool. Members can never unbond to a",
              "value below `MinJoinBond`."
            ]
          },
          {
            "Name": "OverflowRisk",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The transaction could not be executed due to overflow risk for the pool."
            ]
          },
          {
            "Name": "NotDestroying",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for",
              "other members to be permissionlessly unbonded."
            ]
          },
          {
            "Name": "NotNominator",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The caller does not have nominating permissions for the pool."
            ]
          },
          {
            "Name": "NotKickerOrDestroying",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Either a) the caller cannot make a valid kick or b) the pool is not destroying."
            ]
          },
          {
            "Name": "NotOpen",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The pool is not open to join"
            ]
          },
          {
            "Name": "MaxPools",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The system is maxed out on pools."
            ]
          },
          {
            "Name": "MaxPoolMembers",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Too many members in the pool or system."
            ]
          },
          {
            "Name": "CanNotChangeState",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The pools state cannot be changed."
            ]
          },
          {
            "Name": "DoesNotHavePermission",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The caller does not have adequate permissions."
            ]
          },
          {
            "Name": "MetadataExceedsMaxLen",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Metadata exceeds [`Config::MaxMetadataLen`]"
            ]
          },
          {
            "Name": "Defensive",
            "TypeFields": [
              {
                "TypeName": "DefensiveError",
                "TypeId": 556
              }
            ],
            "Index": 19,
            "Docs": [
              "Some error occurred that should never happen. This should be reported to the",
              "maintainers."
            ]
          },
          {
            "Name": "PartialUnbondNotAllowedPermissionlessly",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Partial unbonding now allowed permissionlessly."
            ]
          },
          {
            "Name": "MaxCommissionRestricted",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The pool's max commission cannot be set higher than the existing value."
            ]
          },
          {
            "Name": "CommissionExceedsMaximum",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The supplied commission exceeds the max allowed commission."
            ]
          },
          {
            "Name": "CommissionExceedsGlobalMaximum",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The supplied commission exceeds global maximum commission."
            ]
          },
          {
            "Name": "CommissionChangeThrottled",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "Not enough blocks have surpassed since the last commission update."
            ]
          },
          {
            "Name": "CommissionChangeRateNotAllowed",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The submitted changes to commission change rate are not allowed."
            ]
          },
          {
            "Name": "NoPendingCommission",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "There is no pending commission to claim."
            ]
          },
          {
            "Name": "NoCommissionCurrentSet",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "No commission current has been set."
            ]
          },
          {
            "Name": "PoolIdInUse",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "Pool id currently in use."
            ]
          },
          {
            "Name": "InvalidPoolId",
            "TypeFields": null,
            "Index": 29,
            "Docs": [
              "Pool id provided is not correct/usable."
            ]
          },
          {
            "Name": "BondExtraRestricted",
            "TypeFields": null,
            "Index": 30,
            "Docs": [
              "Bonding extra is restricted to the exact pending reward amount."
            ]
          },
          {
            "Name": "NothingToAdjust",
            "TypeFields": null,
            "Index": 31,
            "Docs": [
              "No imbalance in the ED deposit for the pool."
            ]
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "556": {
        "Variants": [
          {
            "Name": "NotEnoughSpaceInUnbondPool",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "PoolNotFound",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "RewardPoolNotFound",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "SubPoolsNotFound",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "BondedStashKilledPrematurely",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "pallet_nomination_pools",
          "pallet",
          "DefensiveError"
        ],
        "TypeDef": "Variant"
      },
      "557": {
        "TypeFields": [
          {
            "Name": "code",
            "TypeName": "Vec<u8>",
            "TypeId": 13
          },
          {
            "Name": "original_code_len",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "exports",
            "TypeName": "BTreeSet<DispatchKind>",
            "TypeId": 558
          },
          {
            "Name": "static_pages",
            "TypeName": "WasmPagesAmount",
            "TypeId": 561
          },
          {
            "Name": "stack_end",
            "TypeName": "Option<WasmPage>",
            "TypeId": 562
          },
          {
            "Name": "instantiated_section_sizes",
            "TypeName": "InstantiatedSectionSizes",
            "TypeId": 564
          },
          {
            "Name": "version",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_core",
          "code",
          "instrumented",
          "InstrumentedCode"
        ],
        "TypeDef": "Composite"
      },
      "558": {
        "TypeFields": [
          {
            "TypeId": 560
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 559
          }
        ],
        "TypeDef": "Composite"
      },
      "559": {
        "Variants": [
          {
            "Name": "Init",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Handle",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Reply",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Signal",
            "TypeFields": null,
            "Index": 3
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "DispatchKind"
        ],
        "TypeDef": "Variant"
      },
      "560": {
        "TypeId": 559,
        "TypeDef": "Sequence"
      },
      "561": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_core",
          "pages",
          "PagesAmount"
        ],
        "TypeDef": "Composite"
      },
      "562": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 563
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 563
          }
        ],
        "TypeDef": "Variant"
      },
      "563": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_core",
          "pages",
          "Page"
        ],
        "TypeDef": "Composite"
      },
      "564": {
        "TypeFields": [
          {
            "Name": "code_section",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "data_section",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "global_section",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "table_section",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "element_section",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "type_section",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_core",
          "code",
          "instrumented",
          "InstantiatedSectionSizes"
        ],
        "TypeDef": "Composite"
      },
      "565": {
        "TypeFields": [
          {
            "Name": "author",
            "TypeName": "H256",
            "TypeId": 12
          },
          {
            "Name": "block_number",
            "TypeName": "u32",
            "TypeId": 74
          }
        ],
        "Path": [
          "gear_common",
          "CodeMetadata"
        ],
        "TypeDef": "Composite"
      },
      "566": {
        "TypeFields": [
          {
            "Name": "inner",
            "TypeName": "BTreeMap<T, T>",
            "TypeId": 567
          }
        ],
        "Path": [
          "numerated",
          "tree",
          "IntervalsTree"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 563
          }
        ],
        "TypeDef": "Composite"
      },
      "567": {
        "TypeFields": [
          {
            "TypeId": 568
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 563
          },
          {
            "Name": "V",
            "TypeId": 563
          }
        ],
        "TypeDef": "Composite"
      },
      "568": {
        "TypeId": 569,
        "TypeDef": "Sequence"
      },
      "569": {
        "TypeIds": [
          563,
          563
        ],
        "TypeDef": "Tuple"
      },
      "570": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": [
              {
                "TypeName": "ActiveProgram<BlockNumber>",
                "TypeId": 571
              }
            ],
            "Index": 0
          },
          {
            "Name": "Exited",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 262
              }
            ],
            "Index": 1
          },
          {
            "Name": "Terminated",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 262
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "gear_core",
          "program",
          "Program"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "571": {
        "TypeFields": [
          {
            "Name": "allocations_tree_len",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "memory_infix",
            "TypeName": "MemoryInfix",
            "TypeId": 572
          },
          {
            "Name": "gas_reservation_map",
            "TypeName": "GasReservationMap",
            "TypeId": 573
          },
          {
            "Name": "code_hash",
            "TypeName": "H256",
            "TypeId": 12
          },
          {
            "Name": "code_exports",
            "TypeName": "BTreeSet<DispatchKind>",
            "TypeId": 558
          },
          {
            "Name": "static_pages",
            "TypeName": "WasmPagesAmount",
            "TypeId": 561
          },
          {
            "Name": "state",
            "TypeName": "ProgramState",
            "TypeId": 577
          },
          {
            "Name": "expiration_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_core",
          "program",
          "ActiveProgram"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "572": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_core",
          "program",
          "MemoryInfix"
        ],
        "TypeDef": "Composite"
      },
      "573": {
        "TypeFields": [
          {
            "TypeId": 575
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 324
          },
          {
            "Name": "V",
            "TypeId": 574
          }
        ],
        "TypeDef": "Composite"
      },
      "574": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "start",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "finish",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_core",
          "reservation",
          "GasReservationSlot"
        ],
        "TypeDef": "Composite"
      },
      "575": {
        "TypeId": 576,
        "TypeDef": "Sequence"
      },
      "576": {
        "TypeIds": [
          324,
          574
        ],
        "TypeDef": "Tuple"
      },
      "577": {
        "Variants": [
          {
            "Name": "Uninitialized",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 263
              }
            ],
            "Index": 0
          },
          {
            "Name": "Initialized",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "gear_core",
          "program",
          "ProgramState"
        ],
        "TypeDef": "Variant"
      },
      "578": {
        "TypeIds": [
          262,
          572,
          579
        ],
        "TypeDef": "Tuple"
      },
      "579": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_core",
          "pages",
          "Page"
        ],
        "TypeDef": "Composite"
      },
      "580": {
        "TypeFields": [
          {
            "TypeName": "PageBufInner",
            "TypeId": 581
          }
        ],
        "Path": [
          "gear_core",
          "memory",
          "PageBuf"
        ],
        "TypeDef": "Composite"
      },
      "581": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 13
          }
        ],
        "Path": [
          "gear_core",
          "buffer",
          "LimitedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "E",
            "TypeId": 582
          }
        ],
        "TypeDef": "Composite"
      },
      "582": {
        "Path": [
          "gear_core",
          "memory",
          "IntoPageBufError"
        ],
        "TypeDef": "Composite"
      },
      "583": {
        "Variants": [
          {
            "Name": "DuplicateItem",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ProgramNotFound",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "NotActiveProgram",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotFindDataForPage",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "ProgramCodeNotFound",
            "TypeFields": null,
            "Index": 4
          }
        ],
        "Path": [
          "pallet_gear_program",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "584": {
        "TypeFields": [
          {
            "Name": "next",
            "TypeName": "Option<K>",
            "TypeId": 598
          },
          {
            "Name": "value",
            "TypeName": "V",
            "TypeId": 585
          }
        ],
        "Path": [
          "gear_common",
          "storage",
          "complicated",
          "dequeue",
          "LinkedNode"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 263
          },
          {
            "Name": "V",
            "TypeId": 585
          }
        ],
        "TypeDef": "Composite"
      },
      "585": {
        "TypeFields": [
          {
            "Name": "kind",
            "TypeName": "DispatchKind",
            "TypeId": 559
          },
          {
            "Name": "message",
            "TypeName": "StoredMessage",
            "TypeId": 586
          },
          {
            "Name": "context",
            "TypeName": "Option<ContextStore>",
            "TypeId": 591
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "stored",
          "StoredDispatch"
        ],
        "TypeDef": "Composite"
      },
      "586": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "MessageId",
            "TypeId": 263
          },
          {
            "Name": "source",
            "TypeName": "ProgramId",
            "TypeId": 262
          },
          {
            "Name": "destination",
            "TypeName": "ProgramId",
            "TypeId": 262
          },
          {
            "Name": "payload",
            "TypeName": "Payload",
            "TypeId": 306
          },
          {
            "Name": "value",
            "TypeName": "Value",
            "TypeId": 46
          },
          {
            "Name": "details",
            "TypeName": "Option<MessageDetails>",
            "TypeId": 587
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "stored",
          "StoredMessage"
        ],
        "TypeDef": "Composite"
      },
      "587": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 588
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 588
          }
        ],
        "TypeDef": "Variant"
      },
      "588": {
        "Variants": [
          {
            "Name": "Reply",
            "TypeFields": [
              {
                "TypeName": "ReplyDetails",
                "TypeId": 309
              }
            ],
            "Index": 0
          },
          {
            "Name": "Signal",
            "TypeFields": [
              {
                "TypeName": "SignalDetails",
                "TypeId": 589
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "common",
          "MessageDetails"
        ],
        "TypeDef": "Variant"
      },
      "589": {
        "TypeFields": [
          {
            "Name": "to",
            "TypeName": "MessageId",
            "TypeId": 263
          },
          {
            "Name": "code",
            "TypeName": "SignalCode",
            "TypeId": 590
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "common",
          "SignalDetails"
        ],
        "TypeDef": "Composite"
      },
      "590": {
        "Variants": [
          {
            "Name": "Execution",
            "TypeFields": [
              {
                "TypeName": "SimpleExecutionError",
                "TypeId": 313
              }
            ],
            "Index": 0
          },
          {
            "Name": "RemovedFromWaitlist",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "gear_core_errors",
          "simple",
          "SignalCode"
        ],
        "TypeDef": "Variant"
      },
      "591": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 592
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 592
          }
        ],
        "TypeDef": "Variant"
      },
      "592": {
        "TypeFields": [
          {
            "Name": "outgoing",
            "TypeName": "BTreeMap<u32, Option<Payload>>",
            "TypeId": 593
          },
          {
            "Name": "reply",
            "TypeName": "Option<Payload>",
            "TypeId": 594
          },
          {
            "Name": "initialized",
            "TypeName": "BTreeSet<ProgramId>",
            "TypeId": 269
          },
          {
            "Name": "reservation_nonce",
            "TypeName": "ReservationNonce",
            "TypeId": 597
          },
          {
            "Name": "system_reservation",
            "TypeName": "Option<u64>",
            "TypeId": 264
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "context",
          "ContextStore"
        ],
        "TypeDef": "Composite"
      },
      "593": {
        "TypeFields": [
          {
            "TypeId": 595
          }
        ],
        "Path": [
          "BTreeMap"
        ],
        "TypeParams": [
          {
            "Name": "K",
            "TypeId": 4
          },
          {
            "Name": "V",
            "TypeId": 594
          }
        ],
        "TypeDef": "Composite"
      },
      "594": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 306
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 306
          }
        ],
        "TypeDef": "Variant"
      },
      "595": {
        "TypeId": 596,
        "TypeDef": "Sequence"
      },
      "596": {
        "TypeIds": [
          4,
          594
        ],
        "TypeDef": "Tuple"
      },
      "597": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "gear_core",
          "reservation",
          "ReservationNonce"
        ],
        "TypeDef": "Composite"
      },
      "598": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 263
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 263
          }
        ],
        "TypeDef": "Variant"
      },
      "599": {
        "TypeIds": [
          0,
          263
        ],
        "TypeDef": "Tuple"
      },
      "600": {
        "TypeIds": [
          601,
          602
        ],
        "TypeDef": "Tuple"
      },
      "601": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "MessageId",
            "TypeId": 263
          },
          {
            "Name": "source",
            "TypeName": "ProgramId",
            "TypeId": 262
          },
          {
            "Name": "destination",
            "TypeName": "ProgramId",
            "TypeId": 262
          },
          {
            "Name": "payload",
            "TypeName": "Payload",
            "TypeId": 306
          },
          {
            "Name": "value",
            "TypeName": "Value",
            "TypeId": 46
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "user",
          "UserStoredMessage"
        ],
        "TypeDef": "Composite"
      },
      "602": {
        "TypeFields": [
          {
            "Name": "start",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "finish",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_common",
          "storage",
          "primitives",
          "Interval"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "603": {
        "TypeIds": [
          262,
          263
        ],
        "TypeDef": "Tuple"
      },
      "604": {
        "TypeIds": [
          585,
          602
        ],
        "TypeDef": "Tuple"
      },
      "605": {
        "TypeIds": [
          606,
          602
        ],
        "TypeDef": "Tuple"
      },
      "606": {
        "TypeFields": [
          {
            "Name": "kind",
            "TypeName": "DispatchKind",
            "TypeId": 559
          },
          {
            "Name": "message",
            "TypeName": "StoredMessage",
            "TypeId": 586
          }
        ],
        "Path": [
          "gear_core",
          "message",
          "stored",
          "StoredDelayedDispatch"
        ],
        "TypeDef": "Composite"
      },
      "607": {
        "Variants": [
          {
            "Name": "QueueDuplicateKey",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Occurs when given key already exists in queue."
            ]
          },
          {
            "Name": "QueueElementNotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Occurs when queue's element wasn't found in storage."
            ]
          },
          {
            "Name": "QueueHeadShouldBeSet",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Occurs when queue's head should contain value,",
              "but it's empty for some reason."
            ]
          },
          {
            "Name": "QueueHeadShouldNotBeSet",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Occurs when queue's head should be empty,",
              "but it contains value for some reason."
            ]
          },
          {
            "Name": "QueueTailHasNextKey",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Occurs when queue's tail element contains link",
              "to the next element."
            ]
          },
          {
            "Name": "QueueTailParentNotFound",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Occurs when while searching queue's pre-tail,",
              "element wasn't found."
            ]
          },
          {
            "Name": "QueueTailShouldBeSet",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Occurs when queue's tail should contain value,",
              "but it's empty for some reason."
            ]
          },
          {
            "Name": "QueueTailShouldNotBeSet",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Occurs when queue's tail should be empty,",
              "but it contains value for some reason."
            ]
          },
          {
            "Name": "MailboxDuplicateKey",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Occurs when given value already exists in mailbox."
            ]
          },
          {
            "Name": "MailboxElementNotFound",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Occurs when mailbox's element wasn't found in storage."
            ]
          },
          {
            "Name": "WaitlistDuplicateKey",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Occurs when given value already exists in waitlist."
            ]
          },
          {
            "Name": "WaitlistElementNotFound",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Occurs when waitlist's element wasn't found in storage."
            ]
          }
        ],
        "Path": [
          "pallet_gear_messenger",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "608": {
        "TypeIds": [
          4,
          609
        ],
        "TypeDef": "Tuple"
      },
      "609": {
        "Variants": [
          {
            "Name": "PauseProgram",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 262
              }
            ],
            "Index": 0
          },
          {
            "Name": "RemoveCode",
            "TypeFields": [
              {
                "TypeName": "CodeId",
                "TypeId": 261
              }
            ],
            "Index": 1
          },
          {
            "Name": "RemoveFromMailbox",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "MessageId",
                "TypeId": 263
              }
            ],
            "Index": 2
          },
          {
            "Name": "RemoveFromWaitlist",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 262
              },
              {
                "TypeName": "MessageId",
                "TypeId": 263
              }
            ],
            "Index": 3
          },
          {
            "Name": "RemovePausedProgram",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 262
              }
            ],
            "Index": 4
          },
          {
            "Name": "WakeMessage",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 262
              },
              {
                "TypeName": "MessageId",
                "TypeId": 263
              }
            ],
            "Index": 5
          },
          {
            "Name": "SendDispatch",
            "TypeFields": [
              {
                "TypeName": "MessageId",
                "TypeId": 263
              }
            ],
            "Index": 6
          },
          {
            "Name": "SendUserMessage",
            "TypeFields": [
              {
                "Name": "message_id",
                "TypeName": "MessageId",
                "TypeId": 263
              },
              {
                "Name": "to_mailbox",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 7
          },
          {
            "Name": "RemoveGasReservation",
            "TypeFields": [
              {
                "TypeName": "ProgramId",
                "TypeId": 262
              },
              {
                "TypeName": "ReservationId",
                "TypeId": 324
              }
            ],
            "Index": 8
          },
          {
            "Name": "RemoveResumeSession",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 9
          }
        ],
        "Path": [
          "gear_core",
          "tasks",
          "ScheduledTask"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "610": {
        "Variants": [
          {
            "Name": "DuplicateTask",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Occurs when given task already exists in task pool."
            ]
          },
          {
            "Name": "TaskNotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Occurs when task wasn't found in storage."
            ]
          }
        ],
        "Path": [
          "pallet_gear_scheduler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "611": {
        "Variants": [
          {
            "Name": "External",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ExternalId",
                "TypeId": 0
              },
              {
                "Name": "multiplier",
                "TypeName": "GasMultiplier<Funds, Balance>",
                "TypeId": 612
              },
              {
                "Name": "value",
                "TypeName": "Balance",
                "TypeId": 11
              },
              {
                "Name": "lock",
                "TypeName": "NodeLock<Balance>",
                "TypeId": 613
              },
              {
                "Name": "system_reserve",
                "TypeName": "Balance",
                "TypeId": 11
              },
              {
                "Name": "refs",
                "TypeName": "ChildrenRefs",
                "TypeId": 615
              },
              {
                "Name": "consumed",
                "TypeName": "bool",
                "TypeId": 54
              },
              {
                "Name": "deposit",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 0
          },
          {
            "Name": "Cut",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ExternalId",
                "TypeId": 0
              },
              {
                "Name": "multiplier",
                "TypeName": "GasMultiplier<Funds, Balance>",
                "TypeId": 612
              },
              {
                "Name": "value",
                "TypeName": "Balance",
                "TypeId": 11
              },
              {
                "Name": "lock",
                "TypeName": "NodeLock<Balance>",
                "TypeId": 613
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "ExternalId",
                "TypeId": 0
              },
              {
                "Name": "multiplier",
                "TypeName": "GasMultiplier<Funds, Balance>",
                "TypeId": 612
              },
              {
                "Name": "value",
                "TypeName": "Balance",
                "TypeId": 11
              },
              {
                "Name": "lock",
                "TypeName": "NodeLock<Balance>",
                "TypeId": 613
              },
              {
                "Name": "refs",
                "TypeName": "ChildrenRefs",
                "TypeId": 615
              },
              {
                "Name": "consumed",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 2
          },
          {
            "Name": "SpecifiedLocal",
            "TypeFields": [
              {
                "Name": "parent",
                "TypeName": "Id",
                "TypeId": 323
              },
              {
                "Name": "root",
                "TypeName": "Id",
                "TypeId": 323
              },
              {
                "Name": "value",
                "TypeName": "Balance",
                "TypeId": 11
              },
              {
                "Name": "lock",
                "TypeName": "NodeLock<Balance>",
                "TypeId": 613
              },
              {
                "Name": "system_reserve",
                "TypeName": "Balance",
                "TypeId": 11
              },
              {
                "Name": "refs",
                "TypeName": "ChildrenRefs",
                "TypeId": 615
              },
              {
                "Name": "consumed",
                "TypeName": "bool",
                "TypeId": 54
              }
            ],
            "Index": 3
          },
          {
            "Name": "UnspecifiedLocal",
            "TypeFields": [
              {
                "Name": "parent",
                "TypeName": "Id",
                "TypeId": 323
              },
              {
                "Name": "root",
                "TypeName": "Id",
                "TypeId": 323
              },
              {
                "Name": "lock",
                "TypeName": "NodeLock<Balance>",
                "TypeId": 613
              },
              {
                "Name": "system_reserve",
                "TypeName": "Balance",
                "TypeId": 11
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "gear_common",
          "gas_provider",
          "node",
          "GasNode"
        ],
        "TypeParams": [
          {
            "Name": "ExternalId",
            "TypeId": 0
          },
          {
            "Name": "Id",
            "TypeId": 323
          },
          {
            "Name": "Balance",
            "TypeId": 11
          },
          {
            "Name": "Funds",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "612": {
        "Variants": [
          {
            "Name": "ValuePerGas",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "GasPerValue",
            "TypeFields": [
              {
                "TypeName": "Gas",
                "TypeId": 11
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "gear_common",
          "GasMultiplier"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Gas",
            "TypeId": 11
          }
        ],
        "TypeDef": "Variant"
      },
      "613": {
        "TypeFields": [
          {
            "TypeName": "[Balance; cardinality::<LockId>()]",
            "TypeId": 614
          }
        ],
        "Path": [
          "gear_common",
          "gas_provider",
          "node",
          "NodeLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 11
          }
        ],
        "TypeDef": "Composite"
      },
      "614": {
        "Length": 4,
        "TypeId": 11,
        "TypeDef": "Array"
      },
      "615": {
        "TypeFields": [
          {
            "Name": "spec_refs",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "unspec_refs",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_common",
          "gas_provider",
          "node",
          "ChildrenRefs"
        ],
        "TypeDef": "Composite"
      },
      "616": {
        "Variants": [
          {
            "Name": "Forbidden",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NodeAlreadyExists",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "NodeNotFound",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "NodeWasConsumed",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "ParentIsLost",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Errors stating that gas tree has been invalidated"
            ]
          },
          {
            "Name": "ParentHasNoChildren",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "UnexpectedConsumeOutput",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Output of `Tree::consume` procedure that wasn't expected.",
              "",
              "Outputs of consumption procedure are determined. The error is returned",
              "when unexpected one occurred. That signals, that algorithm works wrong",
              "and expected invariants are not correct."
            ]
          },
          {
            "Name": "UnexpectedNodeType",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Node type that can't occur if algorithm work well"
            ]
          },
          {
            "Name": "ValueIsNotCaught",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Value must have been caught, but was missed or blocked (for more info see `ValueNode::catch_value`)."
            ]
          },
          {
            "Name": "ValueIsBlocked",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Value must have been caught or moved upstream, but was blocked (for more info see `ValueNode::catch_value`)."
            ]
          },
          {
            "Name": "ValueIsNotBlocked",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Value must have been blocked, but was either moved or caught (for more info see `ValueNode::catch_value`)."
            ]
          },
          {
            "Name": "ConsumedWithLock",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "`GasTree::consume` called on node, which has some balance locked."
            ]
          },
          {
            "Name": "ConsumedWithSystemReservation",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "`GasTree::consume` called on node, which has some system reservation."
            ]
          },
          {
            "Name": "TotalValueIsOverflowed",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "`GasTree::create` called with some value amount leading to",
              "the total value overflow."
            ]
          },
          {
            "Name": "TotalValueIsUnderflowed",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Either `GasTree::consume` or `GasTree::spent` called on a node creating",
              "negative imbalance which leads to the total value drop below 0."
            ]
          }
        ],
        "Path": [
          "pallet_gear_gas",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "617": {
        "TypeFields": [
          {
            "Name": "limits",
            "TypeName": "Limits",
            "TypeId": 618
          },
          {
            "Name": "instruction_weights",
            "TypeName": "InstructionWeights<T>",
            "TypeId": 619
          },
          {
            "Name": "syscall_weights",
            "TypeName": "SyscallWeights<T>",
            "TypeId": 620
          },
          {
            "Name": "memory_weights",
            "TypeName": "MemoryWeights<T>",
            "TypeId": 621
          },
          {
            "Name": "rent_weights",
            "TypeName": "RentWeights<T>",
            "TypeId": 622
          },
          {
            "Name": "db_weights",
            "TypeName": "DbWeights<T>",
            "TypeId": 623
          },
          {
            "Name": "task_weights",
            "TypeName": "TaskWeights<T>",
            "TypeId": 624
          },
          {
            "Name": "instantiation_weights",
            "TypeName": "InstantiationWeights<T>",
            "TypeId": 625
          },
          {
            "Name": "code_instrumentation_cost",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "code_instrumentation_byte_cost",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "load_allocations_weight",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "Schedule"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "618": {
        "TypeFields": [
          {
            "Name": "stack_height",
            "TypeName": "Option<u32>",
            "TypeId": 117
          },
          {
            "Name": "globals",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "locals",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "parameters",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "memory_pages",
            "TypeName": "u16",
            "TypeId": 63
          },
          {
            "Name": "table_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "table_number",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br_table_size",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "subject_len",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call_depth",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "payload_len",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "code_len",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "data_segments_amount",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "Limits"
        ],
        "TypeDef": "Composite"
      },
      "619": {
        "TypeFields": [
          {
            "Name": "version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64const",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64load",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32load",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64store",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32store",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "select",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "r#if",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br_if",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br_table",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "br_table_per_entry",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call_indirect",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call_indirect_per_param",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "call_per_local",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "local_get",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "local_set",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "local_tee",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "global_get",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "global_set",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "memory_current",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64clz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32clz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64ctz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32ctz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64popcnt",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32popcnt",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64eqz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32eqz",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32extend8s",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32extend16s",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64extend8s",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64extend16s",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64extend32s",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64extendsi32",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64extendui32",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32wrapi64",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64eq",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32eq",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64ne",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32ne",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64lts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32lts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64ltu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32ltu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64gts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32gts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64gtu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32gtu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64les",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32les",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64leu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32leu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64ges",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32ges",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64geu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32geu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64add",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32add",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64sub",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32sub",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64mul",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32mul",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64divs",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32divs",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64divu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32divu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64rems",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32rems",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64remu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32remu",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64and",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32and",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64or",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32or",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64xor",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32xor",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64shl",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32shl",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64shrs",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32shrs",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64shru",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32shru",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64rotl",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32rotl",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i64rotr",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "i32rotr",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "InstructionWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "620": {
        "TypeFields": [
          {
            "Name": "alloc",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "free",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "free_range",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "free_range_per_page",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reserve_gas",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_unreserve_gas",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_system_reserve_gas",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_gas_available",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_message_id",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_program_id",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_source",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_value",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_value_available",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_size",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_read",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_read_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_env_vars",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_block_height",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_block_timestamp",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_random",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_deposit",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_send",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_send_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_send_wgas",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_send_wgas_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_send_init",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_send_push",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_send_push_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_send_commit",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_send_commit_wgas",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reservation_send",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reservation_send_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reservation_send_commit",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_commit",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_commit_wgas",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reservation_reply",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reservation_reply_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reservation_reply_commit",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_push",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_wgas",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_wgas_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_push_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_to",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_signal_code",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_signal_from",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_input",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_input_wgas",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_push_input",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_push_input_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_send_input",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_send_input_wgas",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_send_push_input",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_send_push_input_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_debug",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_debug_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_reply_code",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_exit",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_leave",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_wait",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_wait_for",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_wait_up_to",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_wake",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_create_program",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_create_program_payload_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_create_program_salt_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_create_program_wgas",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_create_program_wgas_payload_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "gr_create_program_wgas_salt_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "SyscallWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "621": {
        "TypeFields": [
          {
            "Name": "lazy_pages_signal_read",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "lazy_pages_signal_write",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "lazy_pages_signal_write_after_read",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "lazy_pages_host_func_read",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "lazy_pages_host_func_write",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "lazy_pages_host_func_write_after_read",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "load_page_data",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "upload_page_data",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "mem_grow",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "mem_grow_per_page",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "parachain_read_heuristic",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "MemoryWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "622": {
        "TypeFields": [
          {
            "Name": "waitlist",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "dispatch_stash",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "reservation",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "mailbox",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "mailbox_threshold",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "RentWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "623": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "read_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "write",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "write_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "DbWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "624": {
        "TypeFields": [
          {
            "Name": "remove_gas_reservation",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "send_user_message_to_mailbox",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "send_user_message",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "send_dispatch",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "wake_message",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "wake_message_no_wake",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "remove_from_waitlist",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "remove_from_mailbox",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "TaskWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "625": {
        "TypeFields": [
          {
            "Name": "code_section_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "data_section_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "global_section_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "table_section_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "element_section_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          },
          {
            "Name": "type_section_per_byte",
            "TypeName": "Weight",
            "TypeId": 9
          }
        ],
        "Path": [
          "pallet_gear",
          "schedule",
          "InstantiationWeights"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "626": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "gear_core",
          "percent",
          "Percent"
        ],
        "TypeDef": "Composite"
      },
      "627": {
        "Variants": [
          {
            "Name": "MessageNotFound",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Message wasn't found in the mailbox."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Not enough balance to execute an action.",
              "",
              "Usually occurs when the gas_limit specified is such that the origin account can't afford the message."
            ]
          },
          {
            "Name": "GasLimitTooHigh",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Gas limit too high.",
              "",
              "Occurs when an extrinsic's declared `gas_limit` is greater than a block's maximum gas limit."
            ]
          },
          {
            "Name": "ProgramAlreadyExists",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Program already exists.",
              "",
              "Occurs if a program with some specific program id already exists in program storage."
            ]
          },
          {
            "Name": "InactiveProgram",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Program is terminated.",
              "",
              "Program init failed, so such message destination is no longer unavailable."
            ]
          },
          {
            "Name": "NoMessageTree",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Message gas tree is not found.",
              "",
              "When a message claimed from the mailbox has a corrupted or non-extant gas tree associated."
            ]
          },
          {
            "Name": "CodeAlreadyExists",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Code already exists.",
              "",
              "Occurs when trying to save to storage a program code that has been saved there."
            ]
          },
          {
            "Name": "CodeDoesntExist",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Code does not exist.",
              "",
              "Occurs when trying to get a program code from storage, that doesn't exist."
            ]
          },
          {
            "Name": "CodeTooLarge",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The code supplied to `upload_code` or `upload_program` exceeds the limit specified in the",
              "current schedule."
            ]
          },
          {
            "Name": "ProgramConstructionFailed",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Failed to create a program."
            ]
          },
          {
            "Name": "MessageQueueProcessingDisabled",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Message queue processing is disabled."
            ]
          },
          {
            "Name": "ResumePeriodLessThanMinimal",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Block count doesn't cover MinimalResumePeriod."
            ]
          },
          {
            "Name": "ProgramNotFound",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Program with the specified id is not found."
            ]
          },
          {
            "Name": "GearRunAlreadyInBlock",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Gear::run() already included in current block."
            ]
          },
          {
            "Name": "ProgramRentDisabled",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The program rent logic is disabled."
            ]
          },
          {
            "Name": "ActiveProgram",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "Program is active."
            ]
          }
        ],
        "Path": [
          "pallet_gear",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "628": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Perquintill"
        ],
        "TypeDef": "Composite"
      },
      "629": {
        "TypeFields": [
          {
            "TypeId": 97
          }
        ],
        "Path": [
          "BTreeSet"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "630": {
        "Variants": [
          {
            "Name": "FailureToRefillPool",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Pool not replenished due to error."
            ]
          },
          {
            "Name": "FailureToWithdrawFromPool",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Failure to withdraw funds from the rewards pool."
            ]
          }
        ],
        "Path": [
          "pallet_gear_staking_rewards",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the staking rewards pallet."
        ]
      },
      "631": {
        "TypeIds": [
          0,
          271
        ],
        "TypeDef": "Tuple"
      },
      "632": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "programs",
            "TypeName": "Option<BTreeSet<ProgramId>>",
            "TypeId": 268
          },
          {
            "Name": "code_uploading",
            "TypeName": "bool",
            "TypeId": 54
          },
          {
            "Name": "expiry",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_gear_voucher",
          "internal",
          "VoucherInfo"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "633": {
        "Variants": [
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The origin is not eligible to execute call."
            ]
          },
          {
            "Name": "BalanceTransfer",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Error trying transfer balance to/from voucher account."
            ]
          },
          {
            "Name": "InappropriateDestination",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Destination program is not in whitelisted set for voucher."
            ]
          },
          {
            "Name": "InexistentVoucher",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Voucher with given identifier doesn't exist for given spender id."
            ]
          },
          {
            "Name": "IrrevocableYet",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Voucher still valid and couldn't be revoked."
            ]
          },
          {
            "Name": "MaxProgramsLimitExceeded",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Try to whitelist more programs than allowed."
            ]
          },
          {
            "Name": "UnknownDestination",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Failed to query destination of the prepaid call."
            ]
          },
          {
            "Name": "VoucherExpired",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Voucher has expired and couldn't be used."
            ]
          },
          {
            "Name": "DurationOutOfBounds",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Voucher issue/prolongation duration out of [min; max] constants."
            ]
          },
          {
            "Name": "CodeUploadingEnabled",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Voucher update function tries to cut voucher ability of code upload."
            ]
          },
          {
            "Name": "CodeUploadingDisabled",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Voucher is disabled for code uploading, but requested."
            ]
          }
        ],
        "Path": [
          "pallet_gear_voucher",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "634": {
        "TypeFields": [
          {
            "Name": "gas",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_gear_bank",
          "pallet",
          "BankAccount"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "635": {
        "Variants": [
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Insufficient user balance."
            ]
          },
          {
            "Name": "InsufficientGasBalance",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Insufficient user's bank account gas balance."
            ]
          },
          {
            "Name": "InsufficientValueBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Insufficient user's bank account gas balance."
            ]
          },
          {
            "Name": "InsufficientBankBalance",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Insufficient bank account balance.",
              "**Must be unreachable in Gear main protocol.**"
            ]
          },
          {
            "Name": "InsufficientDeposit",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Deposit of funds that will not keep bank account alive.",
              "**Must be unreachable in Gear main protocol.**"
            ]
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Overflow during funds transfer.",
              "**Must be unreachable in Gear main protocol.**"
            ]
          }
        ],
        "Path": [
          "pallet_gear_bank",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "636": {
        "TypeFields": [
          {
            "TypeId": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 94
          },
          {
            "Name": "Call",
            "TypeId": 65
          },
          {
            "Name": "Signature",
            "TypeId": 637
          },
          {
            "Name": "Extra",
            "TypeId": 640
          }
        ],
        "TypeDef": "Composite"
      },
      "637": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 87
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 104
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 638
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSignature"
        ],
        "TypeDef": "Variant"
      },
      "638": {
        "TypeFields": [
          {
            "TypeName": "[u8; SIGNATURE_SERIALIZED_SIZE]",
            "TypeId": 639
          }
        ],
        "Path": [
          "sp_core",
          "ecdsa",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "639": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "640": {
        "TypeIds": [
          641,
          642,
          643,
          644,
          645,
          646,
          648,
          649,
          650
        ],
        "TypeDef": "Tuple"
      },
      "641": {
        "Path": [
          "pallet_gear_staking_rewards",
          "extension",
          "StakingBlackList"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "642": {
        "Path": [
          "frame_system",
          "extensions",
          "check_non_zero_sender",
          "CheckNonZeroSender"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "643": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "644": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "645": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "646": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 647
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "647": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "648": {
        "TypeFields": [
          {
            "TypeName": "T::Nonce",
            "TypeId": 74
          }
        ],
        "Path": [
          "vara_runtime",
          "CustomCheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "649": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "650": {
        "TypeFields": [
          {
            "TypeName": "ChargeTransactionPayment<T>",
            "TypeId": 652
          }
        ],
        "Path": [
          "pallet_gear_payment",
          "CustomChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 651
          }
        ],
        "TypeDef": "Composite"
      },
      "651": {
        "Path": [
          "vara_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      },
      "652": {
        "TypeFields": [
          {
            "TypeName": "BalanceOf<T>",
            "TypeId": 46
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "ChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "0": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA=",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 12
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 14,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 18,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 12,
                  "Value": 336
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 337,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 54,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 54,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 335,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 66
        },
        "Events": {
          "TypeId": 21
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 339,
            "Value": "AlsfXQAHABCl1OgT///////////CoKkdAAEH0C+bMTMT7FG4HoXrUTgBBwBEKTU6EwAAAAAAAABAAQAAwqCpHQABB9D7FtHhE+tRuB6F61H4AQcAEKXU6BP//////////wEHAMx7n64T/////////7/CoKkdAAAAAA==",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 342,
            "Value": "AAAoAAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "YAkAAA==",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 344,
            "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 345,
            "Value": "EHZhcmEQdmFyYQEAAABUBgAAAQAAAEjLyiXjnxQjhwIAAADz/xTVq1JwWQMAAAAXprwNAGKuswEAAAAY71ijtnuncAEAAAApyjNHb0EIqgEAAAD3V/cEyOoU/gEAAAD+G7xD3nS67AEAAAD7xXe510fv1gEAAADfastomQdgmwQAAAA345f8fJH15AIAAABA/jrUAfiVmgYAAADSvJiX7tCPFQMAAAD3iyeL5T9FTAIAAACrPAVyKR/riwEAAADtmcWssl7t9QMAAAC8nYmQT1uSPwEAAAA3yLsTUKmiqAQAAAD/jciAN/JiIwIAAAABAAAAAQ==",
            "Docs": [
              " Get the chain's current version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 63,
            "Value": "iQA=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 349
        },
        "Index": 0
      },
      "1": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 54,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether the timestamp has been updated in this block.",
                "",
                " This value is updated to `true` upon successful submission of a timestamp by a node.",
                " It is then checked at the end of each block execution in the `on_finalize` hook."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 70
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 11,
            "Value": "3AUAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks.",
              "",
              " Be aware that this is different to the *expected* period that the block production",
              " apparatus provides. Your chosen consensus system will generally work with this to",
              " determine a sensible block time. For example, in the Aura pallet it will be double this",
              " period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 1
      },
      "2": {
        "Name": "Authorship",
        "Storage": {
          "Prefix": "Authorship",
          "Entries": [
            {
              "Name": "Author",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Author of current block."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 2
      },
      "9": {
        "Name": "AuthorityDiscovery",
        "Storage": {
          "Prefix": "AuthorityDiscovery",
          "Entries": [
            {
              "Name": "Keys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 350,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Keys of the current authority set."
              ]
            },
            {
              "Name": "NextKeys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 350,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Keys of the next authority set."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 9
      },
      "3": {
        "Name": "Babe",
        "Storage": {
          "Prefix": "Babe",
          "Entries": [
            {
              "Name": "EpochIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current epoch index."
              ]
            },
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 352,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current epoch authorities."
              ]
            },
            {
              "Name": "GenesisSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 76,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The slot at which the first epoch actually started. This is 0",
                " until the first block of the chain."
              ]
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 76,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Current slot number."
              ]
            },
            {
              "Name": "Randomness",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 1,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The epoch randomness for the *current* epoch.",
                "",
                " # Security",
                "",
                " This MUST NOT be used for gambling, as it can be influenced by a",
                " malicious validator in the short term. It MAY be used in many",
                " cryptographic protocols, however, so long as one remembers that this",
                " (like everything else on-chain) it is public. For example, it can be",
                " used where a number is needed that cannot have been chosen by an",
                " adversary, for purposes such as public-coin zero-knowledge proofs."
              ]
            },
            {
              "Name": "PendingEpochConfigChange",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 78,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Pending epoch configuration change that will be applied when the next epoch is enacted."
              ]
            },
            {
              "Name": "NextRandomness",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 1,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Next epoch randomness."
              ]
            },
            {
              "Name": "NextAuthorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 352,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Next epoch authorities."
              ]
            },
            {
              "Name": "SegmentIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Randomness under construction.",
                "",
                " We make a trade-off between storage accesses and list length.",
                " We store the under-construction randomness in segments of up to",
                " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                "",
                " Once a segment reaches this length, we begin the next one.",
                " We reset all segments and return to `0` at the beginning of every",
                " epoch."
              ]
            },
            {
              "Name": "UnderConstruction",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 355
                }
              },
              "Default": "AA==",
              "Docs": [
                " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
              ]
            },
            {
              "Name": "Initialized",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 357,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Temporary value (cleared at block finalization) which is `Some`",
                " if per-block initialization has already been called for current block."
              ]
            },
            {
              "Name": "AuthorVrfRandomness",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 290,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " This field should always be populated during block processing unless",
                " secondary plain slots are enabled (which don't contain a VRF output).",
                "",
                " It is set in `on_finalize`, before it will contain the value from the last block."
              ]
            },
            {
              "Name": "EpochStart",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 137,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The block numbers when the last and current epoch have started, respectively `N-1` and",
                " `N`.",
                " NOTE: We track this is in order to annotate the block number when a given pool of",
                " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                " slots, which may be skipped, the block numbers may not line up with the slot numbers."
              ]
            },
            {
              "Name": "Lateness",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " How late the current block is compared to its parent.",
                "",
                " This entry is populated as part of block execution and is cleaned up",
                " on block finalization. Querying this storage entry outside of block",
                " execution context should always yield zero."
              ]
            },
            {
              "Name": "EpochConfig",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 363,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The configuration for the current epoch. Should never be `None` as it is initialized in",
                " genesis."
              ]
            },
            {
              "Name": "NextEpochConfig",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 363,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The configuration for the next epoch, `None` if the config will not change",
                " (you can fallback to `EpochConfig` instead in that case)."
              ]
            },
            {
              "Name": "SkippedEpochs",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 364,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A list of the last 100 skipped epochs and the corresponding session index",
                " when the epoch was skipped.",
                "",
                " This is only used for validating equivocation proofs. An equivocation proof",
                " must contains a key-ownership proof for a given session, therefore we need a",
                " way to tie together sessions and epoch indices, i.e. we need to validate that",
                " a validator was the owner of a given key on a given session, and what the",
                " active epoch index was during that session."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 71
        },
        "Events": null,
        "Constants": [
          {
            "Name": "EpochDuration",
            "TypeId": 11,
            "Value": "YAkAAAAAAAA=",
            "Docs": [
              " The amount of time, in slots, that each epoch should last.",
              " NOTE: Currently it is not possible to change the epoch duration after",
              " the chain has started. Attempting to do so will brick block production."
            ]
          },
          {
            "Name": "ExpectedBlockTime",
            "TypeId": 11,
            "Value": "uAsAAAAAAAA=",
            "Docs": [
              " The expected average block time at which BABE should be creating",
              " blocks. Since BABE is probabilistic it is not trivial to figure out",
              " what the expected average block time should be based on the slot",
              " duration and the security parameter `c` (where `1 - c` represents",
              " the probability of a slot being empty)."
            ]
          },
          {
            "Name": "MaxAuthorities",
            "TypeId": 4,
            "Value": "oIYBAA==",
            "Docs": [
              " Max number of authorities allowed"
            ]
          },
          {
            "Name": "MaxNominators",
            "TypeId": 4,
            "Value": "AAIAAA==",
            "Docs": [
              " The maximum number of nominators for each validator."
            ]
          }
        ],
        "Errors": {
          "TypeId": 367
        },
        "Index": 3
      },
      "4": {
        "Name": "Grandpa",
        "Storage": {
          "Prefix": "Grandpa",
          "Entries": [
            {
              "Name": "State",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 368,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " State of the current authority set."
              ]
            },
            {
              "Name": "PendingChange",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 369,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Pending change: (signaled at, scheduled change)."
              ]
            },
            {
              "Name": "NextForced",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " next block number where we can force a change."
              ]
            },
            {
              "Name": "Stalled",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 137,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " `true` if we are currently stalled."
              ]
            },
            {
              "Name": "CurrentSetId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The number of changes (both in terms of keys and underlying economic responsibilities)",
                " in the \"set\" of Grandpa validators from genesis."
              ]
            },
            {
              "Name": "SetIdSession",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 11,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                " members were responsible.",
                "",
                " This is only used for validating equivocation proofs. An equivocation proof must",
                " contains a key-ownership proof for a given session, therefore we need a way to tie",
                " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                " was the owner of a given key on a given session, and what the active set ID was",
                " during that session.",
                "",
                " TWOX-NOTE: `SetId` is not under user control."
              ]
            },
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 370,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current list of authorities."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 81
        },
        "Events": {
          "TypeId": 30
        },
        "Constants": [
          {
            "Name": "MaxAuthorities",
            "TypeId": 4,
            "Value": "oIYBAA==",
            "Docs": [
              " Max Authorities in use"
            ]
          },
          {
            "Name": "MaxNominators",
            "TypeId": 4,
            "Value": "AAIAAA==",
            "Docs": [
              " The maximum number of nominators for each validator."
            ]
          },
          {
            "Name": "MaxSetIdSessionEntries",
            "TypeId": 11,
            "Value": "VAAAAAAAAAA=",
            "Docs": [
              " The maximum number of entries to keep in the set id to session index mapping.",
              "",
              " Since the `SetIdSession` map is only used for validating equivocations this",
              " value should relate to the bonding duration of whatever staking system is",
              " being used (if any). If equivocation handling is not enabled then this value",
              " can be zero."
            ]
          }
        ],
        "Errors": {
          "TypeId": 371
        },
        "Index": 4
      },
      "5": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 372
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock."
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 376
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances."
              ]
            },
            {
              "Name": "Holds",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 379
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds on account balances."
              ]
            },
            {
              "Name": "Freezes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 384
                }
              },
              "Default": "AA==",
              "Docs": [
                " Freeze locks on account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 93
        },
        "Events": {
          "TypeId": 35
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
              "",
              " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
              " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
              " In case you have multiple sources of provider references, you may also get unexpected",
              " behaviour if you set this to zero.",
              "",
              " Bottom line: Do yourself a favour and make it at least one!"
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation."
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account."
            ]
          },
          {
            "Name": "MaxHolds",
            "TypeId": 4,
            "Value": "AgAAAA==",
            "Docs": [
              " The maximum number of holds that can exist on an account at any time."
            ]
          },
          {
            "Name": "MaxFreezes",
            "TypeId": 4,
            "Value": "CAAAAA==",
            "Docs": [
              " The maximum number of individual freeze locks that can exist on an account at any time."
            ]
          }
        ],
        "Errors": {
          "TypeId": 389
        },
        "Index": 5
      },
      "10": {
        "Name": "Vesting",
        "Storage": {
          "Prefix": "Vesting",
          "Entries": [
            {
              "Name": "Vesting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 390
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information regarding the vesting of a given account."
              ]
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 392,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Storage version of the pallet.",
                "",
                " New networks start with latest version, as determined by the genesis build."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 98
        },
        "Events": {
          "TypeId": 37
        },
        "Constants": [
          {
            "Name": "MinVestedTransfer",
            "TypeId": 6,
            "Value": "AKByThgJAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          },
          {
            "Name": "MaxVestingSchedules",
            "TypeId": 4,
            "Value": "HAAAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 393
        },
        "Index": 10
      },
      "6": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 394,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 395,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 38
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": [
              " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 6
      },
      "11": {
        "Name": "BagsList",
        "Storage": {
          "Prefix": "BagsList",
          "Entries": [
            {
              "Name": "ListNodes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 396
                }
              },
              "Default": "AA==",
              "Docs": [
                " A single node, within some bag.",
                "",
                " Nodes store links forward and back within their respective bags."
              ]
            },
            {
              "Name": "CounterForListNodes",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "ListBags",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 11,
                  "Value": 397
                }
              },
              "Default": "AA==",
              "Docs": [
                " A bag stored in storage.",
                "",
                " Stores a `Bag` struct, which stores head and tail pointers to itself."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 100
        },
        "Events": {
          "TypeId": 39
        },
        "Constants": [
          {
            "Name": "BagThresholds",
            "TypeId": 398,
            "Value": "IQMAoHJOGAkAAAeh3GHHCQAAcAVzn4MKAAAN8KAETgsAAIzE36EnDAAA0/glnBENAACHe3EuDQ4AALbCb6sbDwAAf71Ffz4QAACUDnoxdxEAAIMjBGfHEgAAZ+6C5DAUAADvPJ6QtRUAAA/hlXZXFwAAYB0CyRgZAACBCcnk+xoAABfqTFQDHQAAx8TX0jEfAADaykhQiiEAAPmNCPUPJAAAq1FJJsYmAACzMpmKsCkAAK5LzA7TLAAAqHRF6zEwAADUuqSp0TMAAHc24yq3NwAAVXjkrec7AAA+ZobWaEAAAJQIObVARQAAmIEoz3VKAAAjLAQnD1AAAPeybkYUVgAAU9UjSI1cAAD7geHigmMAAP/4InX+agAAJb+9EQpzAAD2XXGNsHsAAEQyfI39hAAAcOpIl/2OAACZz0khvpkAACWLGKVNpQAA7s7ysruxAAAKHK4GGb8AACjdPp53zQAAdijx0ercAADNxHNuh+0AAKSB2NBj/wAAG5SvBJgSAQAtgWbkPScBAEcpFjxxPQEAYNDu7k9VAQCtg3Qf+m4BANkHwlqSigEAWY0Mxz2oAQCPyaZVJMgBAO3Ixvhw6gEAQd5W3VEPAgDxhB+p+DYCACTmnb2aYQIA4vvgf3GPAgBBEc6lusACABmlNIm49QIAFYchgbIuAwDwb+lB9WsDAIhgbETTrQMAVcwcNaX0AwDlB2BrykAEAEyx6GmpkgQAE963aLDqBACH2H7pVUkFAJIuKVcZrwUAutllsYMcBgA2bhZFKJIGAHucnHKlEAcANfwQg6WYBwCmKoKN3yoIANPbcG0YyAgA3LLUyyNxCQByqQ485SYKAGqiSG5R6goAvJveeG+8CwD694w6Wp4MAOevQNdBkQ0AfReKUW2WDgBzbtlCPK8PACbn1bQo3RAAjV9MHskhEgB08mKG0n4TADYM8tAa9hQA7BIbN5uJFgAHQXDvcjsYANVaQQnqDRoAuMHlfnQDHABfbyaDtR4eABD8OQ6DYiAAAmgar+nRIgDwY1imMHAlAOzE8k/eQCgAaC8j4rxHKwBWZYOH34guAM6cadunCDIAVn3ez8vLNQD4ix0FXNc5APKoKZvKMD4AyJqjhvLdQgA8V8FyH+VHAPi4AjsWTU0AOJgMCB4dUwCo4O4bCl1ZALhmBltEFWAAfCipn9hOZwDUp9zngBNvALCUe22ybXcAoJlruqtogAAAdNfLgxCKAMBbzlg6cpQAuAkyUsmbnwAgdYKzN5yrAEDi272tg7gAmHdjuIpjxgCI1GpTfE7VAMjVxs2XWOUAEMkz/nSX9gCw+CxlSyIJAYAfWm4REh0BoK2mC56BMgEgwkDXzI1JAUCkJO2kVWIB8OaBsIL6fAGQLTa1RKCZAfAG1Al8bbgBQDk4I6CL2QGQQ5OvRif9AWBcDpxfcCMCIOXZnXWaTAKgw4aV89x4AiCAFCpvc6gCADkkAPmd2wLg5E35cqESA+AktO/sx00D4AKuaghhjQPgIsHSY8LRA0DNPrUNSBsEQGOwsgBVagSA4Oq+qFO/BEC4LGZythoFQJAm2GT4fAXAK1CIx53mBcDlgkLUNFgGQEuXo3ZW0gYAWcr3GadVBwDeEJSG1+IHAJZW1M+leggA0w7/U94dCQAklGbPXM0JgMC7OoQNigqAh9uYeO5UC4B8c4bMEC8MgEbeoimaGQ2Angp/TsYVDoBYeK+36CQPAA251GhuSBAAE7wB2N+BEQB6cRX+4tISAGMOz449PRQALLmZW9fCFQDG5UXkvGUXADZ/JBkiKBkAUXY6UmUMGwB/yIp/EhUdAPbrwZbmRB8AFjHgQtOeIQBGgdnaAiYkANZqgKTc3SYAXB95aQnKKQAqeV9keO4sAH7ZwYxkTzAAilsSSVrxMwDwHDmOPdk3AJTyBXVQDDwAbJBeTjqQQABEybA/D2tFAOD953FYo0oAEBHq3RxAUAAMSXTC6khWALSLFNDhxVwAtI3wGL6/YwDEJhTT4z9rADRpG/1rUHMATNc99jH8ewDYtgcc4k6FANDMboEJVY8AqJFq1CYcmgDoMM+IvLKlALiI4GBkKLIAWCzpbeSNvwAwoxulRfXNAGhjJCfscd0AiDscW7EY7v//////////",
            "Docs": [
              " The list of thresholds separating the various bags.",
              "",
              " Ids are separated into unsorted bags according to their score. This specifies the",
              " thresholds separating the bags. An id's bag is the largest bag for which the id's score",
              " is less than or equal to its upper threshold.",
              "",
              " When ids are iterated, higher bags are iterated completely before lower bags. This means",
              " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
              " score, but peer ids within a particular bag are sorted in insertion order.",
              "",
              " # Expressing the constant",
              "",
              " This constant must be sorted in strictly increasing order. Duplicate items are not",
              " permitted.",
              "",
              " There is an implied upper limit of `Score::MAX`; that value does not need to be",
              " specified within the bag. For any two threshold lists, if one ends with",
              " `Score::MAX`, the other one does not, and they are otherwise equal, the two",
              " lists will behave identically.",
              "",
              " # Calculation",
              "",
              " It is recommended to generate the set of thresholds in a geometric series, such that",
              " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
              " constant_ratio).max(threshold[k] + 1)` for all `k`.",
              "",
              " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
              "",
              " # Examples",
              "",
              " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
              "   iteration is strictly in insertion order.",
              " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
              "   the procedure given above, then the constant ratio is equal to 2.",
              " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
              "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
              " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
              "   into bag 0, an id with score 2 will fall into bag 1, etc.",
              "",
              " # Migration",
              "",
              " In the event that this list ever changes, a copy of the old bags list must be retained.",
              " With that `List::migrate` can be called, which will perform the appropriate migration."
            ]
          }
        ],
        "Errors": {
          "TypeId": 399
        },
        "Index": 11
      },
      "12": {
        "Name": "ImOnline",
        "Storage": {
          "Prefix": "ImOnline",
          "Entries": [
            {
              "Name": "HeartbeatAfter",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The block number after which it's ok to send heartbeats in the current",
                " session.",
                "",
                " At the beginning of each session we set this to a value that should fall",
                " roughly in the middle of the session duration. The idea is to first wait for",
                " the validators to produce a block in the current session, so that the",
                " heartbeat later on will not be necessary.",
                "",
                " This value will only be used as a fallback if we fail to get a proper session",
                " progress estimate from `NextSessionRotation`, as those estimates should be",
                " more accurate then the value we calculate for `HeartbeatAfter`."
              ]
            },
            {
              "Name": "Keys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 401,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of keys that may issue a heartbeat."
              ]
            },
            {
              "Name": "ReceivedHeartbeats",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 137,
                  "Value": 54
                }
              },
              "Default": "AA==",
              "Docs": [
                " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex`."
              ]
            },
            {
              "Name": "AuthoredBlocks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 403,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                " number of blocks authored by the given authority."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 101
        },
        "Events": {
          "TypeId": 40
        },
        "Constants": [
          {
            "Name": "UnsignedPriority",
            "TypeId": 11,
            "Value": "//////////8=",
            "Docs": [
              " A configuration for base priority of unsigned transactions.",
              "",
              " This is exposed so that it can be tuned for particular runtime, when",
              " multiple pallets send unsigned transactions."
            ]
          }
        ],
        "Errors": {
          "TypeId": 404
        },
        "Index": 12
      },
      "13": {
        "Name": "Staking",
        "Storage": {
          "Prefix": "Staking",
          "Entries": [
            {
              "Name": "ValidatorCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The ideal number of active validators."
              ]
            },
            {
              "Name": "MinimumValidatorCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Minimum number of staking participants before emergency conditions are imposed."
              ]
            },
            {
              "Name": "Invulnerables",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 97,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                " easy to initialize and the performance hit is minimal (we expect no more than four",
                " invulnerables) and restricted to testnets."
              ]
            },
            {
              "Name": "Bonded",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " Map from all locked \"stash\" accounts to the controller account.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "MinNominatorBond",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The minimum active bond to become and maintain the role of a nominator."
              ]
            },
            {
              "Name": "MinValidatorBond",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The minimum active bond to become and maintain the role of a validator."
              ]
            },
            {
              "Name": "MinimumActiveStake",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The minimum active nominator stake of the last successful election."
              ]
            },
            {
              "Name": "MinCommission",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 51,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The minimum amount of commission that validators can set.",
                "",
                " If set to `0`, no limit exists."
              ]
            },
            {
              "Name": "Ledger",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 405
                }
              },
              "Default": "AA==",
              "Docs": [
                " Map from all (unlocked) \"controller\" accounts to the info regarding the staking.",
                "",
                " Note: All the reads and mutations to this storage *MUST* be done through the methods exposed",
                " by [`StakingLedger`] to ensure data and lock consistency."
              ]
            },
            {
              "Name": "Payee",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 50
                }
              },
              "Default": "AA==",
              "Docs": [
                " Where the reward payment should be made. Keyed by stash.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 52
                }
              },
              "Default": "AAA=",
              "Docs": [
                " The map from (wannabe) validator stash key to the preferences of that validator.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "CounterForValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "MaxValidatorsCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The maximum validator count before we stop allowing new validators to join.",
                "",
                " When this value is not set, no limits are enforced."
              ]
            },
            {
              "Name": "Nominators",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 410
                }
              },
              "Default": "AA==",
              "Docs": [
                " The map from nominator stash key to their nomination preferences, namely the validators that",
                " they wish to support.",
                "",
                " Note that the keys of this storage map might become non-decodable in case the",
                " account's [`NominationsQuota::MaxNominations`] configuration is decreased.",
                " In this rare case, these nominators",
                " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
                " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
                " nominators will effectively not-exist, until they re-submit their preferences such that it",
                " is within the bounds of the newly set `Config::MaxNominations`.",
                "",
                " This implies that `::iter_keys().count()` and `::iter().count()` might return different",
                " values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
                " number of keys that exist.",
                "",
                " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
                " [`Call::chill_other`] dispatchable by anyone.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "CounterForNominators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "MaxNominatorsCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The maximum nominator count before we stop allowing new validators to join.",
                "",
                " When this value is not set, no limits are enforced."
              ]
            },
            {
              "Name": "CurrentEra",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current era index.",
                "",
                " This is the latest planned era, depending on how the Session pallet queues the validator",
                " set, it might be active or not."
              ]
            },
            {
              "Name": "ActiveEra",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 412,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The active era information, it holds index and start.",
                "",
                " The active era is the era being currently rewarded. Validator set of this era must be",
                " equal to [`SessionInterface::validators`]."
              ]
            },
            {
              "Name": "ErasStartSessionIndex",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The session index at which the era start for the last [`Config::HistoryDepth`] eras.",
                "",
                " Note: This tracks the starting session (i.e. session index when era start being active)",
                " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
              ]
            },
            {
              "Name": "ErasStakers",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 403,
                  "Value": 45
                }
              },
              "Default": "AAAA",
              "Docs": [
                " Exposure of validator at era.",
                "",
                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                "",
                " Is it removed after [`Config::HistoryDepth`] eras.",
                " If stakers hasn't been set or has been removed then empty exposure is returned.",
                "",
                " Note: Deprecated since v14. Use `EraInfo` instead to work with exposures."
              ]
            },
            {
              "Name": "ErasStakersOverview",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 403,
                  "Value": 413
                }
              },
              "Default": "AA==",
              "Docs": [
                " Summary of validator exposure at a given era.",
                "",
                " This contains the total stake in support of the validator and their own stake. In addition,",
                " it can also be used to get the number of nominators backing this validator and the number of",
                " exposure pages they are divided into. The page count is useful to determine the number of",
                " pages of rewards that needs to be claimed.",
                "",
                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                " Should only be accessed through `EraInfo`.",
                "",
                " Is it removed after [`Config::HistoryDepth`] eras.",
                " If stakers hasn't been set or has been removed then empty overview is returned."
              ]
            },
            {
              "Name": "ErasStakersClipped",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 403,
                  "Value": 45
                }
              },
              "Default": "AAAA",
              "Docs": [
                " Clipped Exposure of validator at era.",
                "",
                " Note: This is deprecated, should be used as read-only and will be removed in the future.",
                " New `Exposure`s are stored in a paged manner in `ErasStakersPaged` instead.",
                "",
                " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                " `T::MaxExposurePageSize` biggest stakers.",
                " (Note: the field `total` and `own` of the exposure remains unchanged).",
                " This is used to limit the i/o cost for the nominator payout.",
                "",
                " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                "",
                " It is removed after [`Config::HistoryDepth`] eras.",
                " If stakers hasn't been set or has been removed then empty exposure is returned.",
                "",
                " Note: Deprecated since v14. Use `EraInfo` instead to work with exposures."
              ]
            },
            {
              "Name": "ErasStakersPaged",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 414,
                  "Value": 415
                }
              },
              "Default": "AA==",
              "Docs": [
                " Paginated exposure of a validator at given era.",
                "",
                " This is keyed first by the era index to allow bulk deletion, then stash account and finally",
                " the page. Should only be accessed through `EraInfo`.",
                "",
                " This is cleared after [`Config::HistoryDepth`] eras."
              ]
            },
            {
              "Name": "ClaimedRewards",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 403,
                  "Value": 108
                }
              },
              "Default": "AA==",
              "Docs": [
                " History of claimed paged rewards by era and validator.",
                "",
                " This is keyed by era and validator stash which maps to the set of page indexes which have",
                " been claimed.",
                "",
                " It is removed after [`Config::HistoryDepth`] eras."
              ]
            },
            {
              "Name": "ErasValidatorPrefs",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 403,
                  "Value": 52
                }
              },
              "Default": "AAA=",
              "Docs": [
                " Similar to `ErasStakers`, this holds the preferences of validators.",
                "",
                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                "",
                " Is it removed after [`Config::HistoryDepth`] eras."
              ]
            },
            {
              "Name": "ErasValidatorReward",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " The total validator era payout for the last [`Config::HistoryDepth`] eras.",
                "",
                " Eras that haven't finished yet or has been removed doesn't have reward."
              ]
            },
            {
              "Name": "ErasRewardPoints",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 416
                }
              },
              "Default": "AAAAAAA=",
              "Docs": [
                " Rewards for the last [`Config::HistoryDepth`] eras.",
                " If reward hasn't been set or has been removed then 0 reward is returned."
              ]
            },
            {
              "Name": "ErasTotalStake",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total amount staked for the last [`Config::HistoryDepth`] eras.",
                " If total hasn't been set or has been removed then 0 stake is returned."
              ]
            },
            {
              "Name": "ForceEra",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 55,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Mode of era forcing."
              ]
            },
            {
              "Name": "SlashRewardFraction",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 51,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The percentage of the slash that is distributed to reporters.",
                "",
                " The rest of the slashed value is handled by the `Slash`."
              ]
            },
            {
              "Name": "CanceledSlashPayout",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount of currency given to reporters of a slash event which was",
                " canceled by extraordinary circumstances (e.g. governance)."
              ]
            },
            {
              "Name": "UnappliedSlashes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 420
                }
              },
              "Default": "AA==",
              "Docs": [
                " All unapplied slashes that are queued for later."
              ]
            },
            {
              "Name": "BondedEras",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 336,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A mapping from still-bonded eras to the first session index of that era.",
                "",
                " Must contains information for eras for the range:",
                " `[active_era - bounding_duration; active_era]`"
              ]
            },
            {
              "Name": "ValidatorSlashInEra",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 403,
                  "Value": 422
                }
              },
              "Default": "AA==",
              "Docs": [
                " All slashing events on validators, mapped by era to the highest slash proportion",
                " and slash value of the era."
              ]
            },
            {
              "Name": "NominatorSlashInEra",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 403,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " All slashing events on nominators, mapped by era to the highest slash value of the era."
              ]
            },
            {
              "Name": "SlashingSpans",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 423
                }
              },
              "Default": "AA==",
              "Docs": [
                " Slashing spans for stash accounts."
              ]
            },
            {
              "Name": "SpanSlash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 419,
                  "Value": 424
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Records information about the maximum slash of a stash within a slashing span,",
                " as well as how much reward has been paid out."
              ]
            },
            {
              "Name": "CurrentPlannedSession",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The last planned session scheduled by the session pallet.",
                "",
                " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
              ]
            },
            {
              "Name": "OffendingValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 425,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Indices of validators that have offended in the active era and whether they are currently",
                " disabled.",
                "",
                " This value should be a superset of disabled validators since not all offences lead to the",
                " validator being disabled (if there was no slash). This is needed to track the percentage of",
                " validators that have offended in the current era, ensuring a new era is forced if",
                " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
                " whether a given validator has previously offended using binary search. It gets cleared when",
                " the era ends."
              ]
            },
            {
              "Name": "ChillThreshold",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 107,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The threshold for when users can start calling `chill_other` for other validators /",
                " nominators. The threshold is compared to the actual number of validators / nominators",
                " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 105
        },
        "Events": {
          "TypeId": 49
        },
        "Constants": [
          {
            "Name": "HistoryDepth",
            "TypeId": 4,
            "Value": "VAAAAA==",
            "Docs": [
              " Number of eras to keep in history.",
              "",
              " Following information is kept for eras in `[current_era -",
              " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,",
              " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,",
              " `ErasTotalStake`, `ErasStartSessionIndex`, `ClaimedRewards`, `ErasStakersPaged`,",
              " `ErasStakersOverview`.",
              "",
              " Must be more than the number of eras delayed by session.",
              " I.e. active era must always be in history. I.e. `active_era >",
              " current_era - history_depth` must be guaranteed.",
              "",
              " If migrating an existing pallet from storage value to config value,",
              " this should be set to same value or greater as in storage.",
              "",
              " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`",
              " item `StakingLedger.legacy_claimed_rewards`. Setting this value lower than",
              " the existing value can lead to inconsistencies in the",
              " `StakingLedger` and will need to be handled properly in a migration.",
              " The test `reducing_history_depth_abrupt` shows this effect."
            ]
          },
          {
            "Name": "SessionsPerEra",
            "TypeId": 4,
            "Value": "BgAAAA==",
            "Docs": [
              " Number of sessions per era."
            ]
          },
          {
            "Name": "BondingDuration",
            "TypeId": 4,
            "Value": "DgAAAA==",
            "Docs": [
              " Number of eras that staked funds must remain bonded for."
            ]
          },
          {
            "Name": "SlashDeferDuration",
            "TypeId": 4,
            "Value": "DQAAAA==",
            "Docs": [
              " Number of eras that slashes are deferred by, after computation.",
              "",
              " This should be less than the bonding duration. Set to 0 if slashes",
              " should be applied immediately, without opportunity for intervention."
            ]
          },
          {
            "Name": "MaxExposurePageSize",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " The maximum size of each `T::ExposurePage`.",
              "",
              " An `ExposurePage` is weakly bounded to a maximum of `MaxExposurePageSize`",
              " nominators.",
              "",
              " For older non-paged exposure, a reward payout was restricted to the top",
              " `MaxExposurePageSize` nominators. This is to limit the i/o cost for the",
              " nominator payout.",
              "",
              " Note: `MaxExposurePageSize` is used to bound `ClaimedRewards` and is unsafe to reduce",
              " without handling it in a migration."
            ]
          },
          {
            "Name": "MaxUnlockingChunks",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum number of `unlocking` chunks a [`StakingLedger`] can",
              " have. Effectively determines how many unique eras a staker may be",
              " unbonding in.",
              "",
              " Note: `MaxUnlockingChunks` is used as the upper bound for the",
              " `BoundedVec` item `StakingLedger.unlocking`. Setting this value",
              " lower than the existing value can lead to inconsistencies in the",
              " `StakingLedger` and will need to be handled properly in a runtime",
              " migration. The test `reducing_max_unlocking_chunks_abrupt` shows",
              " this effect."
            ]
          }
        ],
        "Errors": {
          "TypeId": 427
        },
        "Index": 13
      },
      "7": {
        "Name": "Session",
        "Storage": {
          "Prefix": "Session",
          "Entries": [
            {
              "Name": "Validators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 97,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current set of validators."
              ]
            },
            {
              "Name": "CurrentIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Current index of the session."
              ]
            },
            {
              "Name": "QueuedChanged",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 54,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the underlying economic identities or weighting behind the validators",
                " has changed in the queued validator set."
              ]
            },
            {
              "Name": "QueuedKeys",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 428,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The queued keys for the next session. When the next session begins, these keys",
                " will be used to determine the validator's session keys."
              ]
            },
            {
              "Name": "DisabledValidators",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 108,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Indices of disabled validators.",
                "",
                " The vec is always kept sorted so that we can find whether a given validator is",
                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                " a new set of identities."
              ]
            },
            {
              "Name": "NextKeys",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 114
                }
              },
              "Default": "AA==",
              "Docs": [
                " The next session keys for a validator."
              ]
            },
            {
              "Name": "KeyOwner",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 430,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 113
        },
        "Events": {
          "TypeId": 56
        },
        "Constants": [],
        "Errors": {
          "TypeId": 432
        },
        "Index": 7
      },
      "14": {
        "Name": "Treasury",
        "Storage": {
          "Prefix": "Treasury",
          "Entries": [
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of proposals that have been made."
              ]
            },
            {
              "Name": "Proposals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 433
                }
              },
              "Default": "AA==",
              "Docs": [
                " Proposals that have been made."
              ]
            },
            {
              "Name": "Deactivated",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount which has been reported as inactive to Currency."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 434,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Proposal indices that have been approved but not yet awarded."
              ]
            },
            {
              "Name": "SpendCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The count of spends that have been made."
              ]
            },
            {
              "Name": "Spends",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 435
                }
              },
              "Default": "AA==",
              "Docs": [
                " Spends that have been approved and being processed."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 116
        },
        "Events": {
          "TypeId": 57
        },
        "Constants": [
          {
            "Name": "ProposalBond",
            "TypeId": 437,
            "Value": "UMMAAA==",
            "Docs": [
              " Fraction of a proposal's value that should be bonded in order to place the proposal.",
              " An accepted proposal gets these back. A rejected proposal does not."
            ]
          },
          {
            "Name": "ProposalBondMinimum",
            "TypeId": 6,
            "Value": "AKByThgJAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "ProposalBondMaximum",
            "TypeId": 274,
            "Value": "AA==",
            "Docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "SpendPeriod",
            "TypeId": 4,
            "Value": "gHAAAA==",
            "Docs": [
              " Period between successive spends."
            ]
          },
          {
            "Name": "Burn",
            "TypeId": 437,
            "Value": "AAAAAA==",
            "Docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 438,
            "Value": "cHkvdHJzcnk=",
            "Docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxApprovals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          },
          {
            "Name": "PayoutPeriod",
            "TypeId": 4,
            "Value": "AC8NAA==",
            "Docs": [
              " The period during which an approved treasury spend has to be claimed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 439
        },
        "Index": 14
      },
      "15": {
        "Name": "Historical",
        "Storage": {
          "Prefix": "Historical",
          "Entries": [
            {
              "Name": "HistoricalSessions",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 440
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping from historical session indices to session-data root hash and validator count."
              ]
            },
            {
              "Name": "StoredRange",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 137,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The range of historical sessions we store. [first, last)"
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 15
      },
      "8": {
        "Name": "Utility",
        "Storage": null,
        "Calls": {
          "TypeId": 118
        },
        "Events": {
          "TypeId": 59
        },
        "Constants": [
          {
            "Name": "batched_calls_limit",
            "TypeId": 4,
            "Value": "qioAAA==",
            "Docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "Errors": {
          "TypeId": 441
        },
        "Index": 8
      },
      "16": {
        "Name": "ConvictionVoting",
        "Storage": {
          "Prefix": "ConvictionVoting",
          "Entries": [
            {
              "Name": "VotingFor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 442,
                  "Value": 443
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " All voting for a particular voter in a particular voting class. We store the balance for the",
                " number of votes that we have recorded."
              ]
            },
            {
              "Name": "ClassLocksFor",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 451
                }
              },
              "Default": "AA==",
              "Docs": [
                " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                " this list."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 124
        },
        "Events": {
          "TypeId": 61
        },
        "Constants": [
          {
            "Name": "MaxVotes",
            "TypeId": 4,
            "Value": "AAIAAA==",
            "Docs": [
              " The maximum number of concurrent votes an account may have.",
              "",
              " Also used to compute weight, an overly large value can lead to extrinsics with large",
              " weight estimation: see `delegate` for instance."
            ]
          },
          {
            "Name": "VoteLockingPeriod",
            "TypeId": 4,
            "Value": "gBMDAA==",
            "Docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          }
        ],
        "Errors": {
          "TypeId": 454
        },
        "Index": 16
      },
      "17": {
        "Name": "Referenda",
        "Storage": {
          "Prefix": "Referenda",
          "Entries": [
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "ReferendumInfoFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 455
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum."
              ]
            },
            {
              "Name": "TrackQueue",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 63,
                  "Value": 463
                }
              },
              "Default": "AA==",
              "Docs": [
                " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                " conviction-weighted approvals.",
                "",
                " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
              ]
            },
            {
              "Name": "DecidingCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 63,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of referenda being decided currently."
              ]
            },
            {
              "Name": "MetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " The metadata is a general information concerning the referendum.",
                " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 129
        },
        "Events": {
          "TypeId": 62
        },
        "Constants": [
          {
            "Name": "SubmissionDeposit",
            "TypeId": 6,
            "Value": "AEB6EPNaAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "MaxQueued",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum size of the referendum queue for a single track."
            ]
          },
          {
            "Name": "UndecidingTimeout",
            "TypeId": 4,
            "Value": "ACcGAA==",
            "Docs": [
              " The number of blocks after submission that a referendum must begin being decided by.",
              " Once this passes, then anyone may cancel the referendum."
            ]
          },
          {
            "Name": "AlarmInterval",
            "TypeId": 4,
            "Value": "AQAAAA==",
            "Docs": [
              " Quantization level for the referendum wakeup scheduler. A higher number will result in",
              " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
              " automatic referendum status changes. Explicit servicing instructions are unaffected."
            ]
          },
          {
            "Name": "Tracks",
            "TypeId": 466,
            "Value": "NAAAEHJvb3QBAAAAAABkp7O24A0AAAAAAAAAAGAJAAAAJwYAgHAAAIBwAAACkNc+DQAAAABXQ94TAAAAAFRD3hMAAAAAAADKmjsAAAAAAGXNHQEASHdoaXRlbGlzdGVkX2NhbGxlcmQAAAAAAIpdeEVjAQAAAAAAAAAAWAIAAAAnBgDIAAAAyAAAAALslyUQAAAAAHtXPBcAAAAAQjkvEgAAAAACDgCEAAAAAADW5h8BAAAAADlieQIAAAAACgA0c3Rha2luZ19hZG1pbgoAAAAAAMUuvKKxAAAAAAAAAAAAYAkAAAAnBgAQDgAAyAAAAADJQzAkAGXNHQDKmjsCXW94AAAAAADoLu0AAAAAAIxoif//////CwAkdHJlYXN1cmVyCgAAAAAAwW/yhiMAAAAAAAAAAABgCQAAACcGABAOAACAcAAAApDXPg0AAAAAV0PeEwAAAABUQ94TAAAAAAAAypo7AAAAAABlzR0MAEBmZWxsb3dzaGlwX2FkbWluCgAAAAAAxS68orEAAAAAAAAAAABgCQAAACcGABAOAADIAAAAAMlDMCQAZc0dAMqaOwJdb3gAAAAAAOgu7QAAAAAAjGiJ//////8NADRnZW5lcmFsX2FkbWluCgAAAAAAxS68orEAAAAAAAAAAABgCQAAACcGABAOAADIAAAAApDXPg0AAAAAV0PeEwAAAABUQ94TAAAAAAJZovQCAAAAAKMpawUAAAAALmtK/f////8UAFByZWZlcmVuZHVtX2NhbmNlbGxlcugDAAAAAIpdeEVjAQAAAAAAAAAAYAkAAIATAwAQDgAAyAAAAADJQzAkAGXNHQDKmjsCXW94AAAAAADoLu0AAAAAAIxoif//////FQBEcmVmZXJlbmR1bV9raWxsZXLoAwAAAACy01lb8AYAAAAAAAAAAGAJAAAAJwYAEA4AAMgAAAAAyUMwJABlzR0Aypo7Al1veAAAAAAA6C7tAAAAAACMaIn//////x4AMHNtYWxsX3RpcHBlcsgAAAAAoHJOGAkAAAAAAAAAAAAAFAAAAIATAwDIAAAAFAAAAABJkUkVAGXNHQDKmjsC+boYAAAAAAAqTTEAAAAAAGtZ5///////HwAoYmlnX3RpcHBlcmQAAAAAQHoQ81oAAAAAAAAAAAAAyAAAAIATAwCwBAAAyAAAAABJkUkVAGXNHQDKmjsCaU8/AAAAAAA1ln0AAAAAAOU0wf//////IAA0c21hbGxfc3BlbmRlcjIAAAAAgMakfo0DAAAAAAAAAAAAwBIAAAAnBgBAOAAAgHAAAADJQzAkAGXNHQDKmjsCXW94AAAAAADoLu0AAAAAAIxoif//////IQA4bWVkaXVtX3NwZW5kZXIyAAAAAACNSf0aBwAAAAAAAAAAAMASAAAAJwYAgHAAAIBwAAAAWwH2MABlzR0Aypo7AhFh2wAAAAAAv9GqAQAAAAAglyr//////yIALGJpZ19zcGVuZGVyMgAAAAAAGpP6NQ4AAAAAAAAAAADAEgAAACcGAADhAACAcAAAAADKmjsAZc0dAMqaOwJBPLABAAAAAHVdNAMAAAAARdFl/v////8=",
            "Docs": [
              " Information concerning the different referendum tracks."
            ]
          }
        ],
        "Errors": {
          "TypeId": 472
        },
        "Index": 17
      },
      "18": {
        "Name": "FellowshipCollective",
        "Storage": {
          "Prefix": "FellowshipCollective",
          "Entries": [
            {
              "Name": "MemberCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 63,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of members in the collective who have at least the rank according to the index",
                " of the vec."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 473
                }
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective."
              ]
            },
            {
              "Name": "IdToIndex",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 474,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " The index of each ranks's member into the group of members who have at least that rank."
              ]
            },
            {
              "Name": "IndexToId",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 475,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " The members in the collective by index. All indices in the range `0..MemberCount` will",
                " return `Some`, however a member's index is not guaranteed to remain unchanged over time."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "Twox64Concat"
                  ],
                  "Key": 403,
                  "Value": 281
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "VotingCleanup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 476
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 132
        },
        "Events": {
          "TypeId": 280
        },
        "Constants": [],
        "Errors": {
          "TypeId": 477
        },
        "Index": 18
      },
      "19": {
        "Name": "FellowshipReferenda",
        "Storage": {
          "Prefix": "FellowshipReferenda",
          "Entries": [
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "ReferendumInfoFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 478
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum."
              ]
            },
            {
              "Name": "TrackQueue",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 63,
                  "Value": 480
                }
              },
              "Default": "AA==",
              "Docs": [
                " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                " conviction-weighted approvals.",
                "",
                " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
              ]
            },
            {
              "Name": "DecidingCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 63,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of referenda being decided currently."
              ]
            },
            {
              "Name": "MetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 12
                }
              },
              "Default": "AA==",
              "Docs": [
                " The metadata is a general information concerning the referendum.",
                " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 133
        },
        "Events": {
          "TypeId": 283
        },
        "Constants": [
          {
            "Name": "SubmissionDeposit",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "MaxQueued",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Maximum size of the referendum queue for a single track."
            ]
          },
          {
            "Name": "UndecidingTimeout",
            "TypeId": 4,
            "Value": "gBMDAA==",
            "Docs": [
              " The number of blocks after submission that a referendum must begin being decided by.",
              " Once this passes, then anyone may cancel the referendum."
            ]
          },
          {
            "Name": "AlarmInterval",
            "TypeId": 4,
            "Value": "AQAAAA==",
            "Docs": [
              " Quantization level for the referendum wakeup scheduler. A higher number will result in",
              " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
              " automatic referendum status changes. Explicit servicing instructions are unaffected."
            ]
          },
          {
            "Name": "Tracks",
            "TypeId": 466,
            "Value": "KAAAKGNhbmRpZGF0ZXMKAAAAAIDGpH6NAwAAAAAAAAAAAFgCAACAEwMAWAIAABQAAAAAAMqaOwBlzR0Aypo7AADKmjsAAAAAAGXNHQEAHG1lbWJlcnMKAAAAAEB6EPNaAAAAAAAAAAAAAFgCAACAEwMAWAIAABQAAAAAAMqaOwBlzR0Aypo7AADKmjsAAAAAAGXNHQIALHByb2ZpY2llbnRzCgAAAABAehDzWgAAAAAAAAAAAABYAgAAgBMDAFgCAAAUAAAAAADKmjsAZc0dAMqaOwAAypo7AAAAAABlzR0DABxmZWxsb3dzCgAAAABAehDzWgAAAAAAAAAAAABYAgAAgBMDAFgCAAAUAAAAAADKmjsAZc0dAMqaOwAAypo7AAAAAABlzR0EADhzZW5pb3IgZmVsbG93cwoAAAAAQHoQ81oAAAAAAAAAAAAAWAIAAIATAwBYAgAAFAAAAAAAypo7AGXNHQDKmjsAAMqaOwAAAAAAZc0dBQAcZXhwZXJ0cwoAAAAAoHJOGAkAAAAAAAAAAAAAWAIAAIATAwBYAgAAFAAAAAAAypo7AGXNHQDKmjsAAMqaOwAAAAAAZc0dBgA4c2VuaW9yIGV4cGVydHMKAAAAAKByThgJAAAAAAAAAAAAAFgCAACAEwMAWAIAABQAAAAAAMqaOwBlzR0Aypo7AADKmjsAAAAAAGXNHQcAHG1hc3RlcnMKAAAAAKByThgJAAAAAAAAAAAAAFgCAACAEwMAWAIAABQAAAAAAMqaOwBlzR0Aypo7AADKmjsAAAAAAGXNHQgAOHNlbmlvciBtYXN0ZXJzCgAAAACgck4YCQAAAAAAAAAAAABYAgAAgBMDAFgCAAAUAAAAAADKmjsAZc0dAMqaOwAAypo7AAAAAABlzR0JADRncmFuZCBtYXN0ZXJzCgAAAACgck4YCQAAAAAAAAAAAABYAgAAgBMDAFgCAAAUAAAAAADKmjsAZc0dAMqaOwAAypo7AAAAAABlzR0=",
            "Docs": [
              " Information concerning the different referendum tracks."
            ]
          }
        ],
        "Errors": {
          "TypeId": 481
        },
        "Index": 19
      },
      "20": {
        "Name": "Origins",
        "Storage": null,
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 20
      },
      "21": {
        "Name": "Whitelist",
        "Storage": {
          "Prefix": "Whitelist",
          "Entries": [
            {
              "Name": "WhitelistedCall",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 12,
                  "Value": 58
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 134
        },
        "Events": {
          "TypeId": 284
        },
        "Constants": [],
        "Errors": {
          "TypeId": 482
        },
        "Index": 21
      },
      "22": {
        "Name": "Scheduler",
        "Storage": {
          "Prefix": "Scheduler",
          "Entries": [
            {
              "Name": "IncompleteSince",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Agenda",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 483
                }
              },
              "Default": "AA==",
              "Docs": [
                " Items to be executed, indexed by the block number that they should be executed on."
              ]
            },
            {
              "Name": "Lookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 1,
                  "Value": 137
                }
              },
              "Default": "AA==",
              "Docs": [
                " Lookup from a name to the block number and index of the task.",
                "",
                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                " identities."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 135
        },
        "Events": {
          "TypeId": 289
        },
        "Constants": [
          {
            "Name": "MaximumWeight",
            "TypeId": 9,
            "Value": "BwBAt0O6E8zMzMzMzMzM",
            "Docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "Name": "MaxScheduledPerBlock",
            "TypeId": 4,
            "Value": "AAIAAA==",
            "Docs": [
              " The maximum number of scheduled calls in the queue for a single block.",
              "",
              " NOTE:",
              " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
              " higher limit under `runtime-benchmarks` feature."
            ]
          }
        ],
        "Errors": {
          "TypeId": 487
        },
        "Index": 22
      },
      "23": {
        "Name": "Preimage",
        "Storage": {
          "Prefix": "Preimage",
          "Entries": [
            {
              "Name": "StatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 488
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "RequestStatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 12,
                  "Value": 490
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "PreimageFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 440,
                  "Value": 494
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 138
        },
        "Events": {
          "TypeId": 291
        },
        "Constants": [],
        "Errors": {
          "TypeId": 495
        },
        "Index": 23
      },
      "24": {
        "Name": "Identity",
        "Storage": {
          "Prefix": "Identity",
          "Entries": [
            {
              "Name": "IdentityOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 496
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information that is pertinent to identify the entity behind an account.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "SuperOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 178
                }
              },
              "Default": "AA==",
              "Docs": [
                " The super-identity of an alternative \"sub\" identity together with its name, within that",
                " context. If the account is not some other account's sub-identity, then just `None`."
              ]
            },
            {
              "Name": "SubsOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 500
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Alternative \"sub\" identities of this account.",
                "",
                " The first item is the deposit, the second is a vector of the accounts.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "Registrars",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 502,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The set of registrars. Not expected to get very big as can only be added through a",
                " special origin (likely a council motion).",
                "",
                " The index into this can be cast to `RegistrarIndex` to get a valid value."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 140
        },
        "Events": {
          "TypeId": 292
        },
        "Constants": [
          {
            "Name": "BasicDeposit",
            "TypeId": 6,
            "Value": "AEB6EPNaAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered identity"
            ]
          },
          {
            "Name": "ByteDeposit",
            "TypeId": 6,
            "Value": "AHDJsosAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit per encoded byte for a registered identity."
            ]
          },
          {
            "Name": "SubAccountDeposit",
            "TypeId": 6,
            "Value": "AEDlnDASAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered subaccount. This should account for the fact",
              " that one storage item's value will increase by the size of an account ID, and there will",
              " be another trie item whose value is the size of an account ID plus 32 bytes."
            ]
          },
          {
            "Name": "MaxSubAccounts",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of sub-accounts allowed per identified account."
            ]
          },
          {
            "Name": "MaxRegistrars",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
              " of, e.g., updating judgements."
            ]
          }
        ],
        "Errors": {
          "TypeId": 506
        },
        "Index": 24
      },
      "25": {
        "Name": "Proxy",
        "Storage": {
          "Prefix": "Proxy",
          "Entries": [
            {
              "Name": "Proxies",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 507
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The set of account proxies. Maps the account which has delegated to the accounts",
                " which are being delegated to, together with the amount held on deposit."
              ]
            },
            {
              "Name": "Announcements",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 511
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The announcements made by the proxy (key)."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 180
        },
        "Events": {
          "TypeId": 293
        },
        "Constants": [
          {
            "Name": "ProxyDepositBase",
            "TypeId": 6,
            "Value": "ABhD1boFAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "ProxyDepositFactor",
            "TypeId": 6,
            "Value": "AHD3CwISAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "Name": "MaxProxies",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "Name": "MaxPending",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "Name": "AnnouncementDepositBase",
            "TypeId": 6,
            "Value": "ABhD1boFAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "Name": "AnnouncementDepositFactor",
            "TypeId": 6,
            "Value": "AODuFwQkAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 515
        },
        "Index": 25
      },
      "26": {
        "Name": "Multisig",
        "Storage": {
          "Prefix": "Multisig",
          "Entries": [
            {
              "Name": "Multisigs",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 516,
                  "Value": 517
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 183
        },
        "Events": {
          "TypeId": 294
        },
        "Constants": [
          {
            "Name": "DepositBase",
            "TypeId": 6,
            "Value": "ABg2tGIxAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "DepositFactor",
            "TypeId": 6,
            "Value": "AAAuWXYRAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "Name": "MaxSignatories",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "Errors": {
          "TypeId": 519
        },
        "Index": 26
      },
      "27": {
        "Name": "ElectionProviderMultiPhase",
        "Storage": {
          "Prefix": "ElectionProviderMultiPhase",
          "Entries": [
            {
              "Name": "Round",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AQAAAA==",
              "Docs": [
                " Internal counter for the number of rounds.",
                "",
                " This is useful for de-duplication of transactions submitted to the pool, and general",
                " diagnostics of the pallet.",
                "",
                " This is merely incremented once per every time that an upstream `elect` is called."
              ]
            },
            {
              "Name": "CurrentPhase",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 297,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current phase."
              ]
            },
            {
              "Name": "QueuedSolution",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 520,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Current best solution, signed or unsigned, queued to be returned upon `elect`.",
                "",
                " Always sorted by score."
              ]
            },
            {
              "Name": "Snapshot",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 522,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Snapshot data of the round.",
                "",
                " This is created at the beginning of the signed phase and cleared upon calling `elect`."
              ]
            },
            {
              "Name": "DesiredTargets",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Desired number of targets to elect for this round.",
                "",
                " Only exists when [`Snapshot`] is present."
              ]
            },
            {
              "Name": "SnapshotMetadata",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 240,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The metadata of the [`RoundSnapshot`]",
                "",
                " Only exists when [`Snapshot`] is present."
              ]
            },
            {
              "Name": "SignedSubmissionNextIndex",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next index to be assigned to an incoming signed submission.",
                "",
                " Every accepted submission is assigned a unique index; that index is bound to that particular",
                " submission for the duration of the election. On election finalization, the next index is",
                " reset to 0.",
                "",
                " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                " because iteration is slow. Instead, we store the value here."
              ]
            },
            {
              "Name": "SignedSubmissionIndices",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 525,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a",
                " value in `SignedSubmissions`.",
                "",
                " We never need to process more than a single signed submission at a time. Signed submissions",
                " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                " them one at a time instead of reading and decoding all of them at once."
              ]
            },
            {
              "Name": "SignedSubmissionsMap",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 528
                }
              },
              "Default": "AA==",
              "Docs": [
                " Unchecked, signed solutions.",
                "",
                " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                " allowing us to keep only a single one in memory at a time.",
                "",
                " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                " affect; we shouldn't need a cryptographically secure hasher."
              ]
            },
            {
              "Name": "MinimumUntrustedScore",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 239,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The minimum score that each 'untrusted' solution must attain in order to be considered",
                " feasible.",
                "",
                " Can be set via `set_minimum_untrusted_score`."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 186
        },
        "Events": {
          "TypeId": 295
        },
        "Constants": [
          {
            "Name": "UnsignedPhase",
            "TypeId": 4,
            "Value": "WAIAAA==",
            "Docs": [
              " Duration of the unsigned phase."
            ]
          },
          {
            "Name": "SignedPhase",
            "TypeId": 4,
            "Value": "WAIAAA==",
            "Docs": [
              " Duration of the signed phase."
            ]
          },
          {
            "Name": "BetterSignedThreshold",
            "TypeId": 51,
            "Value": "AAAAAA==",
            "Docs": [
              " The minimum amount of improvement to the solution score that defines a solution as",
              " \"better\" in the Signed phase."
            ]
          },
          {
            "Name": "BetterUnsignedThreshold",
            "TypeId": 51,
            "Value": "oIYBAA==",
            "Docs": [
              " The minimum amount of improvement to the solution score that defines a solution as",
              " \"better\" in the Unsigned phase."
            ]
          },
          {
            "Name": "OffchainRepeat",
            "TypeId": 4,
            "Value": "JQAAAA==",
            "Docs": [
              " The repeat threshold of the offchain worker.",
              "",
              " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
              " to submit the worker's solution."
            ]
          },
          {
            "Name": "MinerTxPriority",
            "TypeId": 11,
            "Value": "/v///////38=",
            "Docs": [
              " The priority of the unsigned transaction submitted in the unsigned-phase"
            ]
          },
          {
            "Name": "SignedMaxSubmissions",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " Maximum number of signed submissions that can be queued.",
              "",
              " It is best to avoid adjusting this during an election, as it impacts downstream data",
              " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
              " update this value during an election, you _must_ ensure that",
              " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
              " attempts to submit new solutions may cause a runtime panic."
            ]
          },
          {
            "Name": "SignedMaxWeight",
            "TypeId": 9,
            "Value": "BxBZUxozE+xRuB6F61E4",
            "Docs": [
              " Maximum weight of a signed solution.",
              "",
              " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of",
              " this pallet), then [`MinerConfig::solution_weight`] is used to compare against",
              " this value."
            ]
          },
          {
            "Name": "SignedMaxRefunds",
            "TypeId": 4,
            "Value": "AwAAAA==",
            "Docs": [
              " The maximum amount of unchecked solutions to refund the call fee for."
            ]
          },
          {
            "Name": "SignedRewardBase",
            "TypeId": 6,
            "Value": "AKByThgJAAAAAAAAAAAAAA==",
            "Docs": [
              " Base reward for a signed solution"
            ]
          },
          {
            "Name": "SignedDepositByte",
            "TypeId": 6,
            "Value": "AOh2SBcAAAAAAAAAAAAAAA==",
            "Docs": [
              " Per-byte deposit for a signed solution."
            ]
          },
          {
            "Name": "SignedDepositWeight",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " Per-weight deposit for a signed solution."
            ]
          },
          {
            "Name": "MaxWinners",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " The maximum number of winners that can be elected by this `ElectionProvider`",
              " implementation.",
              "",
              " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."
            ]
          },
          {
            "Name": "MinerMaxLength",
            "TypeId": 4,
            "Value": "AAAkAA==",
            "Docs": []
          },
          {
            "Name": "MinerMaxWeight",
            "TypeId": 9,
            "Value": "BxBZUxozE+xRuB6F61E4",
            "Docs": []
          },
          {
            "Name": "MinerMaxVotesPerVoter",
            "TypeId": 4,
            "Value": "EAAAAA==",
            "Docs": []
          },
          {
            "Name": "MinerMaxWinners",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": []
          }
        ],
        "Errors": {
          "TypeId": 529
        },
        "Index": 27
      },
      "28": {
        "Name": "Offences",
        "Storage": {
          "Prefix": "Offences",
          "Entries": [
            {
              "Name": "Reports",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 12,
                  "Value": 530
                }
              },
              "Default": "AA==",
              "Docs": [
                " The primary structure that holds all offence records keyed by report identifiers."
              ]
            },
            {
              "Name": "ConcurrentReportsIndex",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 531,
                  "Value": 139
                }
              },
              "Default": "AA==",
              "Docs": [
                " A vector of reports of the same kind that happened at the same time slot."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 299
        },
        "Constants": [],
        "Errors": null,
        "Index": 28
      },
      "29": {
        "Name": "Bounties",
        "Storage": {
          "Prefix": "Bounties",
          "Entries": [
            {
              "Name": "BountyCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of bounty proposals that have been made."
              ]
            },
            {
              "Name": "Bounties",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 532
                }
              },
              "Default": "AA==",
              "Docs": [
                " Bounties that have been made."
              ]
            },
            {
              "Name": "BountyDescriptions",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 534
                }
              },
              "Default": "AA==",
              "Docs": [
                " The description of each bounty."
              ]
            },
            {
              "Name": "BountyApprovals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 434,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Bounty indices that have been approved but not yet funded."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 247
        },
        "Events": {
          "TypeId": 300
        },
        "Constants": [
          {
            "Name": "BountyDepositBase",
            "TypeId": 6,
            "Value": "AKByThgJAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for placing a bounty proposal."
            ]
          },
          {
            "Name": "BountyDepositPayoutDelay",
            "TypeId": 4,
            "Value": "gHAAAA==",
            "Docs": [
              " The delay period for which a bounty beneficiary need to wait before claim the payout."
            ]
          },
          {
            "Name": "BountyUpdatePeriod",
            "TypeId": 4,
            "Value": "ACcGAA==",
            "Docs": [
              " Bounty duration in blocks."
            ]
          },
          {
            "Name": "CuratorDepositMultiplier",
            "TypeId": 437,
            "Value": "IKEHAA==",
            "Docs": [
              " The curator deposit is calculated as a percentage of the curator fee.",
              "",
              " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
              " `CuratorDepositMin`."
            ]
          },
          {
            "Name": "CuratorDepositMax",
            "TypeId": 274,
            "Value": "AQCAxqR+jQMAAAAAAAAAAAA=",
            "Docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "CuratorDepositMin",
            "TypeId": 274,
            "Value": "AQCgck4YCQAAAAAAAAAAAAA=",
            "Docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "Name": "BountyValueMinimum",
            "TypeId": 6,
            "Value": "ACA9iHktAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum value for a bounty."
            ]
          },
          {
            "Name": "DataDepositPerByte",
            "TypeId": 6,
            "Value": "AOh2SBcAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit per byte within the tip report reason or bounty description."
            ]
          },
          {
            "Name": "MaximumReasonLength",
            "TypeId": 4,
            "Value": "LAEAAA==",
            "Docs": [
              " Maximum acceptable reason length.",
              "",
              " Benchmarks depend on this value, be sure to update weights file when changing this value"
            ]
          }
        ],
        "Errors": {
          "TypeId": 535
        },
        "Index": 29
      },
      "30": {
        "Name": "ChildBounties",
        "Storage": {
          "Prefix": "ChildBounties",
          "Entries": [
            {
              "Name": "ChildBountyCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of total child bounties."
              ]
            },
            {
              "Name": "ParentChildBounties",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of child bounties per parent bounty.",
                " Map of parent bounty index to number of child bounties."
              ]
            },
            {
              "Name": "ChildBounties",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "Key": 137,
                  "Value": 536
                }
              },
              "Default": "AA==",
              "Docs": [
                " Child bounties that have been added."
              ]
            },
            {
              "Name": "ChildBountyDescriptions",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 534
                }
              },
              "Default": "AA==",
              "Docs": [
                " The description of each child-bounty."
              ]
            },
            {
              "Name": "ChildrenCuratorFees",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 6
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The cumulative child-bounty curator fee for each parent bounty."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 248
        },
        "Events": {
          "TypeId": 301
        },
        "Constants": [
          {
            "Name": "MaxActiveChildBountyCount",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " Maximum number of child bounties that can be added to a parent bounty."
            ]
          },
          {
            "Name": "ChildBountyValueMinimum",
            "TypeId": 6,
            "Value": "AKByThgJAAAAAAAAAAAAAA==",
            "Docs": [
              " Minimum value for a child-bounty."
            ]
          }
        ],
        "Errors": {
          "TypeId": 538
        },
        "Index": 30
      },
      "31": {
        "Name": "NominationPools",
        "Storage": {
          "Prefix": "NominationPools",
          "Entries": [
            {
              "Name": "TotalValueLocked",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The sum of funds across all pools.",
                "",
                " This might be lower but never higher than the sum of `total_balance` of all [`PoolMembers`]",
                " because calling `pool_withdraw_unbonded` might decrease the total stake of the pool's",
                " `bonded_account` without adjusting the pallet-internal `UnbondingPool`'s."
              ]
            },
            {
              "Name": "MinJoinBond",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Minimum amount to bond to join a pool."
              ]
            },
            {
              "Name": "MinCreateBond",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " Minimum bond required to create a pool.",
                "",
                " This is the amount that the depositor must put as their initial stake in the pool, as an",
                " indication of \"skin in the game\".",
                "",
                " This is the value that will always exist in the staking ledger of the pool bonded account",
                " while all other accounts leave."
              ]
            },
            {
              "Name": "MaxPools",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Maximum number of nomination pools that can exist. If `None`, then an unbounded number of",
                " pools can exist."
              ]
            },
            {
              "Name": "MaxPoolMembers",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Maximum number of members that can exist in the system. If `None`, then the count",
                " members are not bound on a system wide basis."
              ]
            },
            {
              "Name": "MaxPoolMembersPerPool",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Maximum number of members that may belong to pool. If `None`, then the count of",
                " members is not bound on a per pool basis."
              ]
            },
            {
              "Name": "GlobalMaxCommission",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 51,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The maximum commission that can be charged by a pool. Used on commission payouts to bound",
                " pool commissions that are > `GlobalMaxCommission`, necessary if a future",
                " `GlobalMaxCommission` is lower than some current pool commissions."
              ]
            },
            {
              "Name": "PoolMembers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 539
                }
              },
              "Default": "AA==",
              "Docs": [
                " Active members.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "CounterForPoolMembers",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "BondedPools",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 542
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage for bonded pools."
              ]
            },
            {
              "Name": "CounterForBondedPools",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "RewardPools",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 547
                }
              },
              "Default": "AA==",
              "Docs": [
                " Reward pools. This is where there rewards for each pool accumulate. When a members payout is",
                " claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."
              ]
            },
            {
              "Name": "CounterForRewardPools",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "SubPoolsStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 548
                }
              },
              "Default": "AA==",
              "Docs": [
                " Groups of unbonding pools. Each group of unbonding pools belongs to a",
                " bonded pool, hence the name sub-pools. Keyed by the bonded pools account."
              ]
            },
            {
              "Name": "CounterForSubPoolsStorage",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "Metadata",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 554
                }
              },
              "Default": "AA==",
              "Docs": [
                " Metadata for the pool."
              ]
            },
            {
              "Name": "CounterForMetadata",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "LastPoolId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Ever increasing number of all pools created so far."
              ]
            },
            {
              "Name": "ReversePoolIdLookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " A reverse lookup from the pool's account id to its id.",
                "",
                " This is only used for slashing. In all other instances, the pool id is used, and the",
                " accounts are deterministically derived from it."
              ]
            },
            {
              "Name": "CounterForReversePoolIdLookup",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "ClaimPermissions",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 256
                }
              },
              "Default": "AA==",
              "Docs": [
                " Map from a pool member account to their opted claim permission."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 249
        },
        "Events": {
          "TypeId": 302
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 438,
            "Value": "cHkvbm9wbHM=",
            "Docs": [
              " The nomination pool's pallet id."
            ]
          },
          {
            "Name": "MaxPointsToBalance",
            "TypeId": 2,
            "Value": "Cg==",
            "Docs": [
              " The maximum pool points-to-balance ratio that an `open` pool can have.",
              "",
              " This is important in the event slashing takes place and the pool's points-to-balance",
              " ratio becomes disproportional.",
              "",
              " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations",
              " are a function of number of points, and by setting this value to e.g. 10, you ensure",
              " that the total number of points in the system are at most 10 times the total_issuance of",
              " the chain, in the absolute worse case.",
              "",
              " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.",
              " Such a scenario would also be the equivalent of the pool being 90% slashed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 555
        },
        "Index": 31
      },
      "100": {
        "Name": "GearProgram",
        "Storage": {
          "Prefix": "GearProgram",
          "Entries": [
            {
              "Name": "CodeStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 261,
                  "Value": 557
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "CodeLenStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 261,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "OriginalCodeStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 261,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "MetadataStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 261,
                  "Value": 565
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "AllocationsStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 262,
                  "Value": 566
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ProgramStorage",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 262,
                  "Value": 570
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "MemoryPages",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity",
                    "Identity"
                  ],
                  "Key": 578,
                  "Value": 580
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 583
        },
        "Index": 100
      },
      "101": {
        "Name": "GearMessenger",
        "Storage": {
          "Prefix": "GearMessenger",
          "Entries": [
            {
              "Name": "Dequeued",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Dispatches",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 263,
                  "Value": 584
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "CounterForDispatches",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "Name": "Head",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 263,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Mailbox",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 599,
                  "Value": 600
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "QueueProcessing",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 54,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Sent",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Tail",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 263,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Waitlist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 603,
                  "Value": 604
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "DispatchStash",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 263,
                  "Value": 605
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": {
          "TypeId": 607
        },
        "Index": 101
      },
      "102": {
        "Name": "GearScheduler",
        "Storage": {
          "Prefix": "GearScheduler",
          "Entries": [
            {
              "Name": "FirstIncompleteTasksBlock",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "TaskPool",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 608,
                  "Value": 58
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [
          {
            "Name": "ReserveThreshold",
            "TypeId": 4,
            "Value": "AQAAAA==",
            "Docs": [
              " Amount of blocks for extra delay used to secure from outdated tasks."
            ]
          },
          {
            "Name": "WaitlistCost",
            "TypeId": 11,
            "Value": "ZAAAAAAAAAA=",
            "Docs": [
              " Cost for storing in waitlist per block."
            ]
          },
          {
            "Name": "MailboxCost",
            "TypeId": 11,
            "Value": "ZAAAAAAAAAA=",
            "Docs": [
              " Cost for storing in mailbox per block."
            ]
          },
          {
            "Name": "ReservationCost",
            "TypeId": 11,
            "Value": "ZAAAAAAAAAA=",
            "Docs": [
              " Cost for reservation holding."
            ]
          },
          {
            "Name": "DispatchHoldCost",
            "TypeId": 11,
            "Value": "ZAAAAAAAAAA=",
            "Docs": [
              " Cost for reservation holding."
            ]
          }
        ],
        "Errors": {
          "TypeId": 610
        },
        "Index": 102
      },
      "103": {
        "Name": "GearGas",
        "Storage": {
          "Prefix": "GearGas",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "GasNodes",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 323,
                  "Value": 611
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Allowance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AMx7n64AAAA=",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [
          {
            "Name": "BlockGasLimit",
            "TypeId": 11,
            "Value": "AMx7n64AAAA=",
            "Docs": [
              " The maximum amount of gas that can be used within a single block."
            ]
          }
        ],
        "Errors": {
          "TypeId": 616
        },
        "Index": 103
      },
      "104": {
        "Name": "Gear",
        "Storage": {
          "Prefix": "Gear",
          "Entries": [
            {
              "Name": "ExecuteInherent",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 54,
                "Item2": null
              },
              "Default": "AQ==",
              "Docs": [
                " A flag indicating whether the message queue should be processed at the end of a block",
                "",
                " If not set, the inherent extrinsic that processes the queue will keep throwing an error",
                " thereby making the block builder exclude it from the block."
              ]
            },
            {
              "Name": "BlockNumber",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed.",
                "",
                " It shows block number in which queue is processed.",
                " May be less than system pallet block number if panic occurred previously."
              ]
            },
            {
              "Name": "GearRunInBlock",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 58,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " A guard to prohibit all but the first execution of `pallet_gear::run()` call in a block.",
                "",
                " Set to `Some(())` if the extrinsic is executed for the first time in a block.",
                " All subsequent attempts would fail with `Error::<T>::GearRunAlreadyInBlock` error.",
                " Set back to `None` in the `on_finalize()` hook at the end of the block."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 260
        },
        "Events": {
          "TypeId": 303
        },
        "Constants": [
          {
            "Name": "Schedule",
            "TypeId": 617,
            "Value": "AYePAAAAAQAAAAQAAIAAAAAAgAAQAABkAAAAAAEAACAAAAAgAAAAAACAAAAACAAABAAAVAYAAJ8AAADLGgAARhoAANomAADIKgAA7BcAADYSAADrDAAAzBQAAAwoAACIAAAAYxIAAGhVAADrBAAAAAAAAH0CAAAaBQAABgUAAFQCAABIBAAAwjAAAH4BAAD6AAAApgEAANsAAAB5AQAA8QAAAMMGAAAIBAAAxAAAANIAAABYAQAAagEAAFMBAACiAAAAtQAAALcAAABSBgAA7AMAAFkGAAB7AwAAUAYAAJUDAADfBgAAZQMAADUGAADFAwAApAcAANoDAACNBwAAugQAAOUGAADEAwAAzAYAAM0DAAAhBgAAgwMAAJQDAAC/AQAAWAMAALMBAACWBQAAJwMAAE4NAACzCQAAAA4AALQJAAApSgAAqjwAAPoOAAAACQAAugMAABMCAABTAwAAvwEAAGoDAADuAQAACgMAANcAAACTAgAA2gAAAMUCAAAYAQAA3wIAAN4AAADPAgAA+AAAAOYZXAAAHtc2AAA2BToAAIJNAgAALu2NAAA6Y5IAAG4fSwAAPnxAAACC60AAADoUQgAA0ppBAADe10IAAPKPQQAAsrtBAAA66HQAAB0DALr5SQAAoldBAADGcUEAAIo6fQAAri9CAQCmPLcAADkIAH5QugAALQgABg9IAACajIUAAC0IAEopmAAAlpydAAA6lNgAAC0IAGZyuwAAan+mAgDyVrwCAGq0CAIAHjEqAAC668kBAF6RcAAAIlfzAgChCgDq8eMCAKUKAKUKAF5wQgAAEo1BAACeckIAAJoQ9wQAMtskBwA2Ek8AALUBAIKfsQAADru0AABK/WEAAEECAOJdUAAAwQcADkVBAACqtTsEAJJlPAMAUiAPAwAKh4EDACpObgMAYoHJAADeruIAAA0CAEUWAALL5QAABQIAaRYAFrrFBgCyEFwIAIK/YwIA/nMaBwAWeeUIAKJg8gIAfiIlAgDCIqIYAFINMwAAAAAAAJEBAJEBAJEBAJEBAOEuAALh9QUAHQoAAoTXFwApAwDiFADY0WDiP5mljUMDEM2HVNFgYkwpwP1AYqzjyMlEYic1B2U3AxDvD27ldgNAnr9rqXI9IQAxBwC9HAARCgCZJwCx/QDKIFJIRTvGyiUAAJo/AQAA",
            "Docs": [
              " Cost schedule and limits."
            ]
          },
          {
            "Name": "OutgoingLimit",
            "TypeId": 4,
            "Value": "AAQAAA==",
            "Docs": [
              " The maximum amount of messages that can be produced in during all message executions."
            ]
          },
          {
            "Name": "OutgoingBytesLimit",
            "TypeId": 4,
            "Value": "AAAABA==",
            "Docs": [
              " The maximum amount of bytes in outgoing messages during message execution."
            ]
          },
          {
            "Name": "PerformanceMultiplier",
            "TypeId": 626,
            "Value": "ZAAAAA==",
            "Docs": [
              " Performance multiplier."
            ]
          },
          {
            "Name": "MailboxThreshold",
            "TypeId": 11,
            "Value": "uAsAAAAAAAA=",
            "Docs": [
              " The minimal gas amount for message to be inserted in mailbox.",
              "",
              " This gas will be consuming as rent for storing and message will be available",
              " for reply or claim, once gas ends, message removes.",
              "",
              " Messages with gas limit less than that minimum will not be added in mailbox,",
              " but will be seen in events."
            ]
          },
          {
            "Name": "ReservationsLimit",
            "TypeId": 11,
            "Value": "AAEAAAAAAAA=",
            "Docs": [
              " Amount of reservations can exist for 1 program."
            ]
          },
          {
            "Name": "ProgramRentFreePeriod",
            "TypeId": 4,
            "Value": "ANRJAA==",
            "Docs": [
              " The free of charge period of rent."
            ]
          },
          {
            "Name": "ProgramResumeMinimalRentPeriod",
            "TypeId": 4,
            "Value": "AE4MAA==",
            "Docs": [
              " The minimal amount of blocks to resume."
            ]
          },
          {
            "Name": "ProgramRentCostPerBlock",
            "TypeId": 6,
            "Value": "QFlzBwAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The program rent cost per block."
            ]
          },
          {
            "Name": "ProgramResumeSessionDuration",
            "TypeId": 4,
            "Value": "sAQAAA==",
            "Docs": [
              " The amount of blocks for processing resume session."
            ]
          },
          {
            "Name": "ProgramRentEnabled",
            "TypeId": 54,
            "Value": "AA==",
            "Docs": [
              " The flag determines if program rent mechanism enabled."
            ]
          },
          {
            "Name": "ProgramRentDisabledDelta",
            "TypeId": 4,
            "Value": "gBMDAA==",
            "Docs": [
              " The constant defines value that is added if the program",
              " rent is disabled."
            ]
          },
          {
            "Name": "RentPoolId",
            "TypeId": 273,
            "Value": "AeaDJaJvXo6lxsk7vc+llqw+yLaTAcDMVAKdx7yJG8UV",
            "Docs": [
              " The account id of the rent pool if any."
            ]
          }
        ],
        "Errors": {
          "TypeId": 627
        },
        "Index": 104
      },
      "105": {
        "Name": "GearPayment",
        "Storage": null,
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 105
      },
      "106": {
        "Name": "StakingRewards",
        "Storage": {
          "Prefix": "StakingRewards",
          "Entries": [
            {
              "Name": "TargetInflation",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 628,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Target inflation (at ideal stake)"
              ]
            },
            {
              "Name": "IdealStakingRatio",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 628,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " Ideal staking ratio"
              ]
            },
            {
              "Name": "NonStakeableShare",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 628,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current share of issued tokens that cannot be staked (e.g. being vested)",
                " This value is guaranteed to remain unchanged for the first year until vesting kicks in.",
                " Subsequently, the non-stakeable share should be calculated based on the vesting balances."
              ]
            },
            {
              "Name": "FilteredAccounts",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 629,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " List of accounts whose locked balance (due to incomplete vesting) should be excluded from",
                " the total stakeable quantity.",
                " During the 1st year the non-stakeable amount is accounted for as a fixed fraction of TTS."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 266
        },
        "Events": {
          "TypeId": 333
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 438,
            "Value": "cHkvc3Ryd2Q=",
            "Docs": [
              " The staking rewards' pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MillisecondsPerYear",
            "TypeId": 11,
            "Value": "AMP6WAcAAAA=",
            "Docs": [
              " Milliseconds per year to calculate inflation."
            ]
          },
          {
            "Name": "MinInflation",
            "TypeId": 628,
            "Value": "AADBb/KGIwA=",
            "Docs": [
              " Minimum annual inflation."
            ]
          },
          {
            "Name": "MaxROI",
            "TypeId": 628,
            "Value": "AACeGGnQKQQ=",
            "Docs": [
              " ROI cap."
            ]
          },
          {
            "Name": "Falloff",
            "TypeId": 628,
            "Value": "AACC3+QNRwA=",
            "Docs": [
              " Exponential decay (fall-off) parameter."
            ]
          }
        ],
        "Errors": {
          "TypeId": 630
        },
        "Index": 106
      },
      "107": {
        "Name": "GearVoucher",
        "Storage": {
          "Prefix": "GearVoucher",
          "Entries": [
            {
              "Name": "Issued",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 11,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Storage containing amount of the total vouchers issued.",
                "",
                " Used as nonce in voucher creation."
              ]
            },
            {
              "Name": "Vouchers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 631,
                  "Value": 632
                }
              },
              "Default": "AA==",
              "Docs": [
                " Double map storage containing data of the voucher,",
                " associated with some spender and voucher ids."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 267
        },
        "Events": {
          "TypeId": 334
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 438,
            "Value": "cHkvdm91Y2g=",
            "Docs": [
              " The pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxProgramsAmount",
            "TypeId": 2,
            "Value": "IA==",
            "Docs": [
              " Maximal amount of programs to be specified to interact with."
            ]
          },
          {
            "Name": "MinDuration",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " Minimal duration in blocks voucher could be issued/prolonged for."
            ]
          },
          {
            "Name": "MaxDuration",
            "TypeId": 4,
            "Value": "AOokAA==",
            "Docs": [
              " Maximal duration in blocks voucher could be issued/prolonged for."
            ]
          }
        ],
        "Errors": {
          "TypeId": 633
        },
        "Index": 107
      },
      "108": {
        "Name": "GearBank",
        "Storage": {
          "Prefix": "GearBank",
          "Entries": [
            {
              "Name": "Bank",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 0,
                  "Value": 634
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "UnusedValue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "OnFinalizeTransfers",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 0,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "OnFinalizeValue",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [
          {
            "Name": "BankAddress",
            "TypeId": 0,
            "Value": "Z2VhcmJhbmtnZWFyYmFua2dlYXJiYW5rZ2VhcmJhbms=",
            "Docs": [
              " Bank account address, that will keep all reserved funds."
            ]
          },
          {
            "Name": "GasMultiplier",
            "TypeId": 612,
            "Value": "AAYAAAAAAAAAAAAAAAAAAAA=",
            "Docs": [
              " Gas price converter."
            ]
          }
        ],
        "Errors": {
          "TypeId": 635
        },
        "Index": 108
      },
      "109": {
        "Name": "GearBuiltin",
        "Storage": null,
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 109
      }
    },
    "Extrinsic": {
      "TypeId": 636,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "StakingBlackList",
          "SignedExtType": 641,
          "AddSignedExtType": 58
        },
        {
          "SignedIdentifier": "CheckNonZeroSender",
          "SignedExtType": 642,
          "AddSignedExtType": 58
        },
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 643,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 644,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 645,
          "AddSignedExtType": 12
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 646,
          "AddSignedExtType": 12
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 648,
          "AddSignedExtType": 58
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 649,
          "AddSignedExtType": 58
        },
        {
          "SignedIdentifier": "ChargeTransactionPayment",
          "SignedExtType": 650,
          "AddSignedExtType": 58
        }
      ]
    },
    "TypeId": 651
  }
}
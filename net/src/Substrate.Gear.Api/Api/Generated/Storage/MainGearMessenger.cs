#nullable disable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Gear.Api.Generated.Storage
{
    
    
    /// <summary>
    /// >> GearMessengerStorage
    /// </summary>
    public sealed class GearMessengerStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> GearMessengerStorage Constructor
        /// </summary>
        public GearMessengerStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GearMessenger", "Dequeued"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GearMessenger", "Dispatches"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.Gear.Api.Generated.Model.gprimitives.MessageId), typeof(Substrate.Gear.Api.Generated.Model.gear_common.storage.complicated.dequeue.LinkedNode)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GearMessenger", "CounterForDispatches"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GearMessenger", "Head"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Gear.Api.Generated.Model.gprimitives.MessageId)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GearMessenger", "Mailbox"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32, Substrate.Gear.Api.Generated.Model.gprimitives.MessageId>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.gear_core.message.user.UserStoredMessage, Substrate.Gear.Api.Generated.Model.gear_common.storage.primitives.Interval>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GearMessenger", "QueueProcessing"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GearMessenger", "Sent"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GearMessenger", "Tail"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Gear.Api.Generated.Model.gprimitives.MessageId)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GearMessenger", "Waitlist"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.gprimitives.ActorId, Substrate.Gear.Api.Generated.Model.gprimitives.MessageId>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.gear_core.message.stored.StoredDispatch, Substrate.Gear.Api.Generated.Model.gear_common.storage.primitives.Interval>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GearMessenger", "DispatchStash"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.Gear.Api.Generated.Model.gprimitives.MessageId), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.gear_core.message.stored.StoredDelayedDispatch, Substrate.Gear.Api.Generated.Model.gear_common.storage.primitives.Interval>)));
        }
        
        /// <summary>
        /// >> DequeuedParams
        /// </summary>
        public static string DequeuedParams()
        {
            return RequestGenerator.GetStorage("GearMessenger", "Dequeued", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> DequeuedDefault
        /// Default value as hex string
        /// </summary>
        public static string DequeuedDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Dequeued
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> Dequeued(string blockhash, CancellationToken token)
        {
            string parameters = GearMessengerStorage.DequeuedParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DispatchesParams
        /// </summary>
        public static string DispatchesParams(Substrate.Gear.Api.Generated.Model.gprimitives.MessageId key)
        {
            return RequestGenerator.GetStorage("GearMessenger", "Dispatches", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DispatchesDefault
        /// Default value as hex string
        /// </summary>
        public static string DispatchesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Dispatches
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.gear_common.storage.complicated.dequeue.LinkedNode> Dispatches(Substrate.Gear.Api.Generated.Model.gprimitives.MessageId key, string blockhash, CancellationToken token)
        {
            string parameters = GearMessengerStorage.DispatchesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.gear_common.storage.complicated.dequeue.LinkedNode>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForDispatchesParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForDispatchesParams()
        {
            return RequestGenerator.GetStorage("GearMessenger", "CounterForDispatches", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForDispatchesDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForDispatchesDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForDispatches
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForDispatches(string blockhash, CancellationToken token)
        {
            string parameters = GearMessengerStorage.CounterForDispatchesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HeadParams
        /// </summary>
        public static string HeadParams()
        {
            return RequestGenerator.GetStorage("GearMessenger", "Head", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> HeadDefault
        /// Default value as hex string
        /// </summary>
        public static string HeadDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Head
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.gprimitives.MessageId> Head(string blockhash, CancellationToken token)
        {
            string parameters = GearMessengerStorage.HeadParams();
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.gprimitives.MessageId>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MailboxParams
        /// </summary>
        public static string MailboxParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32, Substrate.Gear.Api.Generated.Model.gprimitives.MessageId> key)
        {
            return RequestGenerator.GetStorage("GearMessenger", "Mailbox", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> MailboxDefault
        /// Default value as hex string
        /// </summary>
        public static string MailboxDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Mailbox
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.gear_core.message.user.UserStoredMessage, Substrate.Gear.Api.Generated.Model.gear_common.storage.primitives.Interval>> Mailbox(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32, Substrate.Gear.Api.Generated.Model.gprimitives.MessageId> key, string blockhash, CancellationToken token)
        {
            string parameters = GearMessengerStorage.MailboxParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.gear_core.message.user.UserStoredMessage, Substrate.Gear.Api.Generated.Model.gear_common.storage.primitives.Interval>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> QueueProcessingParams
        /// </summary>
        public static string QueueProcessingParams()
        {
            return RequestGenerator.GetStorage("GearMessenger", "QueueProcessing", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> QueueProcessingDefault
        /// Default value as hex string
        /// </summary>
        public static string QueueProcessingDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> QueueProcessing
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> QueueProcessing(string blockhash, CancellationToken token)
        {
            string parameters = GearMessengerStorage.QueueProcessingParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SentParams
        /// </summary>
        public static string SentParams()
        {
            return RequestGenerator.GetStorage("GearMessenger", "Sent", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SentDefault
        /// Default value as hex string
        /// </summary>
        public static string SentDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Sent
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> Sent(string blockhash, CancellationToken token)
        {
            string parameters = GearMessengerStorage.SentParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TailParams
        /// </summary>
        public static string TailParams()
        {
            return RequestGenerator.GetStorage("GearMessenger", "Tail", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TailDefault
        /// Default value as hex string
        /// </summary>
        public static string TailDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Tail
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.gprimitives.MessageId> Tail(string blockhash, CancellationToken token)
        {
            string parameters = GearMessengerStorage.TailParams();
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.gprimitives.MessageId>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> WaitlistParams
        /// </summary>
        public static string WaitlistParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.gprimitives.ActorId, Substrate.Gear.Api.Generated.Model.gprimitives.MessageId> key)
        {
            return RequestGenerator.GetStorage("GearMessenger", "Waitlist", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> WaitlistDefault
        /// Default value as hex string
        /// </summary>
        public static string WaitlistDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Waitlist
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.gear_core.message.stored.StoredDispatch, Substrate.Gear.Api.Generated.Model.gear_common.storage.primitives.Interval>> Waitlist(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.gprimitives.ActorId, Substrate.Gear.Api.Generated.Model.gprimitives.MessageId> key, string blockhash, CancellationToken token)
        {
            string parameters = GearMessengerStorage.WaitlistParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.gear_core.message.stored.StoredDispatch, Substrate.Gear.Api.Generated.Model.gear_common.storage.primitives.Interval>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DispatchStashParams
        /// </summary>
        public static string DispatchStashParams(Substrate.Gear.Api.Generated.Model.gprimitives.MessageId key)
        {
            return RequestGenerator.GetStorage("GearMessenger", "DispatchStash", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DispatchStashDefault
        /// Default value as hex string
        /// </summary>
        public static string DispatchStashDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> DispatchStash
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.gear_core.message.stored.StoredDelayedDispatch, Substrate.Gear.Api.Generated.Model.gear_common.storage.primitives.Interval>> DispatchStash(Substrate.Gear.Api.Generated.Model.gprimitives.MessageId key, string blockhash, CancellationToken token)
        {
            string parameters = GearMessengerStorage.DispatchStashParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.gear_core.message.stored.StoredDelayedDispatch, Substrate.Gear.Api.Generated.Model.gear_common.storage.primitives.Interval>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> GearMessengerCalls
    /// </summary>
    public sealed class GearMessengerCalls
    {
    }
    
    /// <summary>
    /// >> GearMessengerConstants
    /// </summary>
    public sealed class GearMessengerConstants
    {
    }
    
    /// <summary>
    /// >> GearMessengerErrors
    /// </summary>
    public enum GearMessengerErrors
    {
        
        /// <summary>
        /// >> QueueDuplicateKey
        /// Occurs when given key already exists in queue.
        /// </summary>
        QueueDuplicateKey,
        
        /// <summary>
        /// >> QueueElementNotFound
        /// Occurs when queue's element wasn't found in storage.
        /// </summary>
        QueueElementNotFound,
        
        /// <summary>
        /// >> QueueHeadShouldBeSet
        /// Occurs when queue's head should contain value,
        /// but it's empty for some reason.
        /// </summary>
        QueueHeadShouldBeSet,
        
        /// <summary>
        /// >> QueueHeadShouldNotBeSet
        /// Occurs when queue's head should be empty,
        /// but it contains value for some reason.
        /// </summary>
        QueueHeadShouldNotBeSet,
        
        /// <summary>
        /// >> QueueTailHasNextKey
        /// Occurs when queue's tail element contains link
        /// to the next element.
        /// </summary>
        QueueTailHasNextKey,
        
        /// <summary>
        /// >> QueueTailParentNotFound
        /// Occurs when while searching queue's pre-tail,
        /// element wasn't found.
        /// </summary>
        QueueTailParentNotFound,
        
        /// <summary>
        /// >> QueueTailShouldBeSet
        /// Occurs when queue's tail should contain value,
        /// but it's empty for some reason.
        /// </summary>
        QueueTailShouldBeSet,
        
        /// <summary>
        /// >> QueueTailShouldNotBeSet
        /// Occurs when queue's tail should be empty,
        /// but it contains value for some reason.
        /// </summary>
        QueueTailShouldNotBeSet,
        
        /// <summary>
        /// >> MailboxDuplicateKey
        /// Occurs when given value already exists in mailbox.
        /// </summary>
        MailboxDuplicateKey,
        
        /// <summary>
        /// >> MailboxElementNotFound
        /// Occurs when mailbox's element wasn't found in storage.
        /// </summary>
        MailboxElementNotFound,
        
        /// <summary>
        /// >> WaitlistDuplicateKey
        /// Occurs when given value already exists in waitlist.
        /// </summary>
        WaitlistDuplicateKey,
        
        /// <summary>
        /// >> WaitlistElementNotFound
        /// Occurs when waitlist's element wasn't found in storage.
        /// </summary>
        WaitlistElementNotFound,
    }
}

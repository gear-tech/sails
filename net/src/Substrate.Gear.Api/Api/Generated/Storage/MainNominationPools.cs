#nullable disable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Gear.Api.Generated.Storage
{
    
    
    /// <summary>
    /// >> NominationPoolsStorage
    /// </summary>
    public sealed class NominationPoolsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> NominationPoolsStorage Constructor
        /// </summary>
        public NominationPoolsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "TotalValueLocked"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "MinJoinBond"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "MinCreateBond"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "MaxPools"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "MaxPoolMembers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "MaxPoolMembersPerPool"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "GlobalMaxCommission"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Gear.Api.Generated.Model.sp_arithmetic.per_things.Perbill)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "PoolMembers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.PoolMember)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "CounterForPoolMembers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "BondedPools"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.BondedPoolInner)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "CounterForBondedPools"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "RewardPools"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.RewardPool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "CounterForRewardPools"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "SubPoolsStorage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.SubPools)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "CounterForSubPoolsStorage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "Metadata"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Gear.Api.Generated.Model.bounded_collections.bounded_vec.BoundedVecT32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "CounterForMetadata"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "LastPoolId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "ReversePoolIdLookup"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "CounterForReversePoolIdLookup"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NominationPools", "ClaimPermissions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumClaimPermission)));
        }
        
        /// <summary>
        /// >> TotalValueLockedParams
        ///  The sum of funds across all pools.
        /// 
        ///  This might be lower but never higher than the sum of `total_balance` of all [`PoolMembers`]
        ///  because calling `pool_withdraw_unbonded` might decrease the total stake of the pool's
        ///  `bonded_account` without adjusting the pallet-internal `UnbondingPool`'s.
        /// </summary>
        public static string TotalValueLockedParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "TotalValueLocked", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TotalValueLockedDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalValueLockedDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> TotalValueLocked
        ///  The sum of funds across all pools.
        /// 
        ///  This might be lower but never higher than the sum of `total_balance` of all [`PoolMembers`]
        ///  because calling `pool_withdraw_unbonded` might decrease the total stake of the pool's
        ///  `bonded_account` without adjusting the pallet-internal `UnbondingPool`'s.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> TotalValueLocked(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.TotalValueLockedParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MinJoinBondParams
        ///  Minimum amount to bond to join a pool.
        /// </summary>
        public static string MinJoinBondParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "MinJoinBond", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MinJoinBondDefault
        /// Default value as hex string
        /// </summary>
        public static string MinJoinBondDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MinJoinBond
        ///  Minimum amount to bond to join a pool.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinJoinBond(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.MinJoinBondParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MinCreateBondParams
        ///  Minimum bond required to create a pool.
        /// 
        ///  This is the amount that the depositor must put as their initial stake in the pool, as an
        ///  indication of "skin in the game".
        /// 
        ///  This is the value that will always exist in the staking ledger of the pool bonded account
        ///  while all other accounts leave.
        /// </summary>
        public static string MinCreateBondParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "MinCreateBond", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MinCreateBondDefault
        /// Default value as hex string
        /// </summary>
        public static string MinCreateBondDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> MinCreateBond
        ///  Minimum bond required to create a pool.
        /// 
        ///  This is the amount that the depositor must put as their initial stake in the pool, as an
        ///  indication of "skin in the game".
        /// 
        ///  This is the value that will always exist in the staking ledger of the pool bonded account
        ///  while all other accounts leave.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MinCreateBond(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.MinCreateBondParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MaxPoolsParams
        ///  Maximum number of nomination pools that can exist. If `None`, then an unbounded number of
        ///  pools can exist.
        /// </summary>
        public static string MaxPoolsParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "MaxPools", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MaxPoolsDefault
        /// Default value as hex string
        /// </summary>
        public static string MaxPoolsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MaxPools
        ///  Maximum number of nomination pools that can exist. If `None`, then an unbounded number of
        ///  pools can exist.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> MaxPools(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.MaxPoolsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MaxPoolMembersParams
        ///  Maximum number of members that can exist in the system. If `None`, then the count
        ///  members are not bound on a system wide basis.
        /// </summary>
        public static string MaxPoolMembersParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "MaxPoolMembers", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MaxPoolMembersDefault
        /// Default value as hex string
        /// </summary>
        public static string MaxPoolMembersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MaxPoolMembers
        ///  Maximum number of members that can exist in the system. If `None`, then the count
        ///  members are not bound on a system wide basis.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> MaxPoolMembers(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.MaxPoolMembersParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MaxPoolMembersPerPoolParams
        ///  Maximum number of members that may belong to pool. If `None`, then the count of
        ///  members is not bound on a per pool basis.
        /// </summary>
        public static string MaxPoolMembersPerPoolParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "MaxPoolMembersPerPool", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MaxPoolMembersPerPoolDefault
        /// Default value as hex string
        /// </summary>
        public static string MaxPoolMembersPerPoolDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MaxPoolMembersPerPool
        ///  Maximum number of members that may belong to pool. If `None`, then the count of
        ///  members is not bound on a per pool basis.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> MaxPoolMembersPerPool(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.MaxPoolMembersPerPoolParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GlobalMaxCommissionParams
        ///  The maximum commission that can be charged by a pool. Used on commission payouts to bound
        ///  pool commissions that are > `GlobalMaxCommission`, necessary if a future
        ///  `GlobalMaxCommission` is lower than some current pool commissions.
        /// </summary>
        public static string GlobalMaxCommissionParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "GlobalMaxCommission", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> GlobalMaxCommissionDefault
        /// Default value as hex string
        /// </summary>
        public static string GlobalMaxCommissionDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GlobalMaxCommission
        ///  The maximum commission that can be charged by a pool. Used on commission payouts to bound
        ///  pool commissions that are > `GlobalMaxCommission`, necessary if a future
        ///  `GlobalMaxCommission` is lower than some current pool commissions.
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.sp_arithmetic.per_things.Perbill> GlobalMaxCommission(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.GlobalMaxCommissionParams();
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.sp_arithmetic.per_things.Perbill>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PoolMembersParams
        ///  Active members.
        /// 
        ///  TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        /// </summary>
        public static string PoolMembersParams(Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("NominationPools", "PoolMembers", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PoolMembersDefault
        /// Default value as hex string
        /// </summary>
        public static string PoolMembersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PoolMembers
        ///  Active members.
        /// 
        ///  TWOX-NOTE: SAFE since `AccountId` is a secure hash.
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.PoolMember> PoolMembers(Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.PoolMembersParams(key);
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.PoolMember>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForPoolMembersParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForPoolMembersParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "CounterForPoolMembers", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForPoolMembersDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForPoolMembersDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForPoolMembers
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForPoolMembers(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.CounterForPoolMembersParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BondedPoolsParams
        ///  Storage for bonded pools.
        /// </summary>
        public static string BondedPoolsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NominationPools", "BondedPools", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BondedPoolsDefault
        /// Default value as hex string
        /// </summary>
        public static string BondedPoolsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BondedPools
        ///  Storage for bonded pools.
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.BondedPoolInner> BondedPools(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.BondedPoolsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.BondedPoolInner>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForBondedPoolsParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForBondedPoolsParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "CounterForBondedPools", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForBondedPoolsDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForBondedPoolsDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForBondedPools
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForBondedPools(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.CounterForBondedPoolsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RewardPoolsParams
        ///  Reward pools. This is where there rewards for each pool accumulate. When a members payout is
        ///  claimed, the balance comes out of the reward pool. Keyed by the bonded pools account.
        /// </summary>
        public static string RewardPoolsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NominationPools", "RewardPools", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RewardPoolsDefault
        /// Default value as hex string
        /// </summary>
        public static string RewardPoolsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RewardPools
        ///  Reward pools. This is where there rewards for each pool accumulate. When a members payout is
        ///  claimed, the balance comes out of the reward pool. Keyed by the bonded pools account.
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.RewardPool> RewardPools(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.RewardPoolsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.RewardPool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForRewardPoolsParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForRewardPoolsParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "CounterForRewardPools", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForRewardPoolsDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForRewardPoolsDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForRewardPools
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForRewardPools(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.CounterForRewardPoolsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SubPoolsStorageParams
        ///  Groups of unbonding pools. Each group of unbonding pools belongs to a
        ///  bonded pool, hence the name sub-pools. Keyed by the bonded pools account.
        /// </summary>
        public static string SubPoolsStorageParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NominationPools", "SubPoolsStorage", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SubPoolsStorageDefault
        /// Default value as hex string
        /// </summary>
        public static string SubPoolsStorageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SubPoolsStorage
        ///  Groups of unbonding pools. Each group of unbonding pools belongs to a
        ///  bonded pool, hence the name sub-pools. Keyed by the bonded pools account.
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.SubPools> SubPoolsStorage(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.SubPoolsStorageParams(key);
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.SubPools>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForSubPoolsStorageParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForSubPoolsStorageParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "CounterForSubPoolsStorage", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForSubPoolsStorageDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForSubPoolsStorageDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForSubPoolsStorage
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForSubPoolsStorage(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.CounterForSubPoolsStorageParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MetadataParams
        ///  Metadata for the pool.
        /// </summary>
        public static string MetadataParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("NominationPools", "Metadata", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MetadataDefault
        /// Default value as hex string
        /// </summary>
        public static string MetadataDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Metadata
        ///  Metadata for the pool.
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.bounded_collections.bounded_vec.BoundedVecT32> Metadata(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.MetadataParams(key);
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.bounded_collections.bounded_vec.BoundedVecT32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForMetadataParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForMetadataParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "CounterForMetadata", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForMetadataDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForMetadataDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForMetadata
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForMetadata(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.CounterForMetadataParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LastPoolIdParams
        ///  Ever increasing number of all pools created so far.
        /// </summary>
        public static string LastPoolIdParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "LastPoolId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LastPoolIdDefault
        /// Default value as hex string
        /// </summary>
        public static string LastPoolIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> LastPoolId
        ///  Ever increasing number of all pools created so far.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> LastPoolId(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.LastPoolIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ReversePoolIdLookupParams
        ///  A reverse lookup from the pool's account id to its id.
        /// 
        ///  This is only used for slashing and on automatic withdraw update. In all other instances, the
        ///  pool id is used, and the accounts are deterministically derived from it.
        /// </summary>
        public static string ReversePoolIdLookupParams(Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("NominationPools", "ReversePoolIdLookup", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReversePoolIdLookupDefault
        /// Default value as hex string
        /// </summary>
        public static string ReversePoolIdLookupDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ReversePoolIdLookup
        ///  A reverse lookup from the pool's account id to its id.
        /// 
        ///  This is only used for slashing and on automatic withdraw update. In all other instances, the
        ///  pool id is used, and the accounts are deterministically derived from it.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ReversePoolIdLookup(Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.ReversePoolIdLookupParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForReversePoolIdLookupParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForReversePoolIdLookupParams()
        {
            return RequestGenerator.GetStorage("NominationPools", "CounterForReversePoolIdLookup", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForReversePoolIdLookupDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForReversePoolIdLookupDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForReversePoolIdLookup
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForReversePoolIdLookup(string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.CounterForReversePoolIdLookupParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ClaimPermissionsParams
        ///  Map from a pool member account to their opted claim permission.
        /// </summary>
        public static string ClaimPermissionsParams(Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("NominationPools", "ClaimPermissions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ClaimPermissionsDefault
        /// Default value as hex string
        /// </summary>
        public static string ClaimPermissionsDefault()
        {
            return "0x02";
        }
        
        /// <summary>
        /// >> ClaimPermissions
        ///  Map from a pool member account to their opted claim permission.
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumClaimPermission> ClaimPermissions(Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = NominationPoolsStorage.ClaimPermissionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumClaimPermission>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> NominationPoolsCalls
    /// </summary>
    public sealed class NominationPoolsCalls
    {
        
        /// <summary>
        /// >> join
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Join(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.NetApi.Model.Types.Primitive.U32 pool_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(pool_id.Encode());
            return new Method(31, "NominationPools", 0, "join", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bond_extra
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BondExtra(Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumBondExtra extra)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(extra.Encode());
            return new Method(31, "NominationPools", 1, "bond_extra", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_payout
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimPayout()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(31, "NominationPools", 2, "claim_payout", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unbond
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Unbond(Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress member_account, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> unbonding_points)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(member_account.Encode());
            byteArray.AddRange(unbonding_points.Encode());
            return new Method(31, "NominationPools", 3, "unbond", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> pool_withdraw_unbonded
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PoolWithdrawUnbonded(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Primitive.U32 num_slashing_spans)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(num_slashing_spans.Encode());
            return new Method(31, "NominationPools", 4, "pool_withdraw_unbonded", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_unbonded
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WithdrawUnbonded(Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress member_account, Substrate.NetApi.Model.Types.Primitive.U32 num_slashing_spans)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(member_account.Encode());
            byteArray.AddRange(num_slashing_spans.Encode());
            return new Method(31, "NominationPools", 5, "withdraw_unbonded", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Create(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress root, Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress nominator, Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress bouncer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(root.Encode());
            byteArray.AddRange(nominator.Encode());
            byteArray.AddRange(bouncer.Encode());
            return new Method(31, "NominationPools", 6, "create", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_with_pool_id
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateWithPoolId(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> amount, Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress root, Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress nominator, Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress bouncer, Substrate.NetApi.Model.Types.Primitive.U32 pool_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(root.Encode());
            byteArray.AddRange(nominator.Encode());
            byteArray.AddRange(bouncer.Encode());
            byteArray.AddRange(pool_id.Encode());
            return new Method(31, "NominationPools", 7, "create_with_pool_id", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> nominate
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Nominate(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32> validators)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(validators.Encode());
            return new Method(31, "NominationPools", 8, "nominate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_state
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetState(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumPoolState state)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(state.Encode());
            return new Method(31, "NominationPools", 9, "set_state", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_metadata
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetMetadata(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> metadata)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(metadata.Encode());
            return new Method(31, "NominationPools", 10, "set_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_configs
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetConfigs(Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumConfigOp min_join_bond, Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumConfigOp min_create_bond, Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumConfigOp max_pools, Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumConfigOp max_members, Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumConfigOp max_members_per_pool, Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumConfigOp global_max_commission)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(min_join_bond.Encode());
            byteArray.AddRange(min_create_bond.Encode());
            byteArray.AddRange(max_pools.Encode());
            byteArray.AddRange(max_members.Encode());
            byteArray.AddRange(max_members_per_pool.Encode());
            byteArray.AddRange(global_max_commission.Encode());
            return new Method(31, "NominationPools", 11, "set_configs", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_roles
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateRoles(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumConfigOp new_root, Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumConfigOp new_nominator, Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumConfigOp new_bouncer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(new_root.Encode());
            byteArray.AddRange(new_nominator.Encode());
            byteArray.AddRange(new_bouncer.Encode());
            return new Method(31, "NominationPools", 12, "update_roles", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> chill
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Chill(Substrate.NetApi.Model.Types.Primitive.U32 pool_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            return new Method(31, "NominationPools", 13, "chill", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bond_extra_other
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BondExtraOther(Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress member, Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumBondExtra extra)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(member.Encode());
            byteArray.AddRange(extra.Encode());
            return new Method(31, "NominationPools", 14, "bond_extra_other", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_claim_permission
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetClaimPermission(Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumClaimPermission permission)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(permission.Encode());
            return new Method(31, "NominationPools", 15, "set_claim_permission", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_payout_other
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimPayoutOther(Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32 other)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(other.Encode());
            return new Method(31, "NominationPools", 16, "claim_payout_other", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_commission
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCommission(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Gear.Api.Generated.Model.sp_arithmetic.per_things.Perbill, Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32>> new_commission)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(new_commission.Encode());
            return new Method(31, "NominationPools", 17, "set_commission", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_commission_max
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCommissionMax(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.Gear.Api.Generated.Model.sp_arithmetic.per_things.Perbill max_commission)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(max_commission.Encode());
            return new Method(31, "NominationPools", 18, "set_commission_max", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_commission_change_rate
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCommissionChangeRate(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.CommissionChangeRate change_rate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(change_rate.Encode());
            return new Method(31, "NominationPools", 19, "set_commission_change_rate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_commission
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimCommission(Substrate.NetApi.Model.Types.Primitive.U32 pool_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            return new Method(31, "NominationPools", 20, "claim_commission", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> adjust_pool_deposit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AdjustPoolDeposit(Substrate.NetApi.Model.Types.Primitive.U32 pool_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            return new Method(31, "NominationPools", 21, "adjust_pool_deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_commission_claim_permission
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCommissionClaimPermission(Substrate.NetApi.Model.Types.Primitive.U32 pool_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.EnumCommissionClaimPermission> permission)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            byteArray.AddRange(permission.Encode());
            return new Method(31, "NominationPools", 22, "set_commission_claim_permission", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> apply_slash
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ApplySlash(Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress member_account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(member_account.Encode());
            return new Method(31, "NominationPools", 23, "apply_slash", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> migrate_delegation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method MigrateDelegation(Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress member_account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(member_account.Encode());
            return new Method(31, "NominationPools", 24, "migrate_delegation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> migrate_pool_to_delegate_stake
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method MigratePoolToDelegateStake(Substrate.NetApi.Model.Types.Primitive.U32 pool_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pool_id.Encode());
            return new Method(31, "NominationPools", 25, "migrate_pool_to_delegate_stake", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> NominationPoolsConstants
    /// </summary>
    public sealed class NominationPoolsConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  The nomination pool's pallet id.
        /// </summary>
        public Substrate.Gear.Api.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Substrate.Gear.Api.Generated.Model.frame_support.PalletId();
            result.Create("0x70792F6E6F706C73");
            return result;
        }
        
        /// <summary>
        /// >> MaxPointsToBalance
        ///  The maximum pool points-to-balance ratio that an `open` pool can have.
        /// 
        ///  This is important in the event slashing takes place and the pool's points-to-balance
        ///  ratio becomes disproportional.
        /// 
        ///  Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations
        ///  are a function of number of points, and by setting this value to e.g. 10, you ensure
        ///  that the total number of points in the system are at most 10 times the total_issuance of
        ///  the chain, in the absolute worse case.
        /// 
        ///  For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.
        ///  Such a scenario would also be the equivalent of the pool being 90% slashed.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 MaxPointsToBalance()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x0A");
            return result;
        }
        
        /// <summary>
        /// >> MaxUnbonding
        ///  The maximum number of simultaneous unbonding chunks that can exist per member.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxUnbonding()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x20000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> NominationPoolsErrors
    /// </summary>
    public enum NominationPoolsErrors
    {
        
        /// <summary>
        /// >> PoolNotFound
        /// A (bonded) pool id does not exist.
        /// </summary>
        PoolNotFound,
        
        /// <summary>
        /// >> PoolMemberNotFound
        /// An account is not a member.
        /// </summary>
        PoolMemberNotFound,
        
        /// <summary>
        /// >> RewardPoolNotFound
        /// A reward pool does not exist. In all cases this is a system logic error.
        /// </summary>
        RewardPoolNotFound,
        
        /// <summary>
        /// >> SubPoolsNotFound
        /// A sub pool does not exist.
        /// </summary>
        SubPoolsNotFound,
        
        /// <summary>
        /// >> AccountBelongsToOtherPool
        /// An account is already delegating in another pool. An account may only belong to one
        /// pool at a time.
        /// </summary>
        AccountBelongsToOtherPool,
        
        /// <summary>
        /// >> FullyUnbonding
        /// The member is fully unbonded (and thus cannot access the bonded and reward pool
        /// anymore to, for example, collect rewards).
        /// </summary>
        FullyUnbonding,
        
        /// <summary>
        /// >> MaxUnbondingLimit
        /// The member cannot unbond further chunks due to reaching the limit.
        /// </summary>
        MaxUnbondingLimit,
        
        /// <summary>
        /// >> CannotWithdrawAny
        /// None of the funds can be withdrawn yet because the bonding duration has not passed.
        /// </summary>
        CannotWithdrawAny,
        
        /// <summary>
        /// >> MinimumBondNotMet
        /// The amount does not meet the minimum bond to either join or create a pool.
        /// 
        /// The depositor can never unbond to a value less than `Pallet::depositor_min_bond`. The
        /// caller does not have nominating permissions for the pool. Members can never unbond to a
        /// value below `MinJoinBond`.
        /// </summary>
        MinimumBondNotMet,
        
        /// <summary>
        /// >> OverflowRisk
        /// The transaction could not be executed due to overflow risk for the pool.
        /// </summary>
        OverflowRisk,
        
        /// <summary>
        /// >> NotDestroying
        /// A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for
        /// other members to be permissionlessly unbonded.
        /// </summary>
        NotDestroying,
        
        /// <summary>
        /// >> NotNominator
        /// The caller does not have nominating permissions for the pool.
        /// </summary>
        NotNominator,
        
        /// <summary>
        /// >> NotKickerOrDestroying
        /// Either a) the caller cannot make a valid kick or b) the pool is not destroying.
        /// </summary>
        NotKickerOrDestroying,
        
        /// <summary>
        /// >> NotOpen
        /// The pool is not open to join
        /// </summary>
        NotOpen,
        
        /// <summary>
        /// >> MaxPools
        /// The system is maxed out on pools.
        /// </summary>
        MaxPools,
        
        /// <summary>
        /// >> MaxPoolMembers
        /// Too many members in the pool or system.
        /// </summary>
        MaxPoolMembers,
        
        /// <summary>
        /// >> CanNotChangeState
        /// The pools state cannot be changed.
        /// </summary>
        CanNotChangeState,
        
        /// <summary>
        /// >> DoesNotHavePermission
        /// The caller does not have adequate permissions.
        /// </summary>
        DoesNotHavePermission,
        
        /// <summary>
        /// >> MetadataExceedsMaxLen
        /// Metadata exceeds [`Config::MaxMetadataLen`]
        /// </summary>
        MetadataExceedsMaxLen,
        
        /// <summary>
        /// >> Defensive
        /// Some error occurred that should never happen. This should be reported to the
        /// maintainers.
        /// </summary>
        Defensive,
        
        /// <summary>
        /// >> PartialUnbondNotAllowedPermissionlessly
        /// Partial unbonding now allowed permissionlessly.
        /// </summary>
        PartialUnbondNotAllowedPermissionlessly,
        
        /// <summary>
        /// >> MaxCommissionRestricted
        /// The pool's max commission cannot be set higher than the existing value.
        /// </summary>
        MaxCommissionRestricted,
        
        /// <summary>
        /// >> CommissionExceedsMaximum
        /// The supplied commission exceeds the max allowed commission.
        /// </summary>
        CommissionExceedsMaximum,
        
        /// <summary>
        /// >> CommissionExceedsGlobalMaximum
        /// The supplied commission exceeds global maximum commission.
        /// </summary>
        CommissionExceedsGlobalMaximum,
        
        /// <summary>
        /// >> CommissionChangeThrottled
        /// Not enough blocks have surpassed since the last commission update.
        /// </summary>
        CommissionChangeThrottled,
        
        /// <summary>
        /// >> CommissionChangeRateNotAllowed
        /// The submitted changes to commission change rate are not allowed.
        /// </summary>
        CommissionChangeRateNotAllowed,
        
        /// <summary>
        /// >> NoPendingCommission
        /// There is no pending commission to claim.
        /// </summary>
        NoPendingCommission,
        
        /// <summary>
        /// >> NoCommissionCurrentSet
        /// No commission current has been set.
        /// </summary>
        NoCommissionCurrentSet,
        
        /// <summary>
        /// >> PoolIdInUse
        /// Pool id currently in use.
        /// </summary>
        PoolIdInUse,
        
        /// <summary>
        /// >> InvalidPoolId
        /// Pool id provided is not correct/usable.
        /// </summary>
        InvalidPoolId,
        
        /// <summary>
        /// >> BondExtraRestricted
        /// Bonding extra is restricted to the exact pending reward amount.
        /// </summary>
        BondExtraRestricted,
        
        /// <summary>
        /// >> NothingToAdjust
        /// No imbalance in the ED deposit for the pool.
        /// </summary>
        NothingToAdjust,
        
        /// <summary>
        /// >> NothingToSlash
        /// No slash pending that can be applied to the member.
        /// </summary>
        NothingToSlash,
        
        /// <summary>
        /// >> AlreadyMigrated
        /// The pool or member delegation has already migrated to delegate stake.
        /// </summary>
        AlreadyMigrated,
        
        /// <summary>
        /// >> NotMigrated
        /// The pool or member delegation has not migrated yet to delegate stake.
        /// </summary>
        NotMigrated,
        
        /// <summary>
        /// >> NotSupported
        /// This call is not allowed in the current state of the pallet.
        /// </summary>
        NotSupported,
    }
}

#nullable disable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Gear.Api.Generated.Storage
{
    
    
    /// <summary>
    /// >> BagsListStorage
    /// </summary>
    public sealed class BagsListStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> BagsListStorage Constructor
        /// </summary>
        public BagsListStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BagsList", "ListNodes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Gear.Api.Generated.Model.pallet_bags_list.list.Node)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BagsList", "CounterForListNodes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("BagsList", "ListBags"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.Gear.Api.Generated.Model.pallet_bags_list.list.Bag)));
        }
        
        /// <summary>
        /// >> ListNodesParams
        ///  A single node, within some bag.
        /// 
        ///  Nodes store links forward and back within their respective bags.
        /// </summary>
        public static string ListNodesParams(Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("BagsList", "ListNodes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ListNodesDefault
        /// Default value as hex string
        /// </summary>
        public static string ListNodesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ListNodes
        ///  A single node, within some bag.
        /// 
        ///  Nodes store links forward and back within their respective bags.
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.pallet_bags_list.list.Node> ListNodes(Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = BagsListStorage.ListNodesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.pallet_bags_list.list.Node>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CounterForListNodesParams
        /// Counter for the related counted storage map
        /// </summary>
        public static string CounterForListNodesParams()
        {
            return RequestGenerator.GetStorage("BagsList", "CounterForListNodes", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CounterForListNodesDefault
        /// Default value as hex string
        /// </summary>
        public static string CounterForListNodesDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CounterForListNodes
        /// Counter for the related counted storage map
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CounterForListNodes(string blockhash, CancellationToken token)
        {
            string parameters = BagsListStorage.CounterForListNodesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ListBagsParams
        ///  A bag stored in storage.
        /// 
        ///  Stores a `Bag` struct, which stores head and tail pointers to itself.
        /// </summary>
        public static string ListBagsParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("BagsList", "ListBags", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ListBagsDefault
        /// Default value as hex string
        /// </summary>
        public static string ListBagsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ListBags
        ///  A bag stored in storage.
        /// 
        ///  Stores a `Bag` struct, which stores head and tail pointers to itself.
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.pallet_bags_list.list.Bag> ListBags(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = BagsListStorage.ListBagsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.pallet_bags_list.list.Bag>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> BagsListCalls
    /// </summary>
    public sealed class BagsListCalls
    {
        
        /// <summary>
        /// >> rebag
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Rebag(Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress dislocated)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(dislocated.Encode());
            return new Method(11, "BagsList", 0, "rebag", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> put_in_front_of
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PutInFrontOf(Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress lighter)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(lighter.Encode());
            return new Method(11, "BagsList", 1, "put_in_front_of", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> put_in_front_of_other
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PutInFrontOfOther(Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress heavier, Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress lighter)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(heavier.Encode());
            byteArray.AddRange(lighter.Encode());
            return new Method(11, "BagsList", 2, "put_in_front_of_other", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> BagsListConstants
    /// </summary>
    public sealed class BagsListConstants
    {
        
        /// <summary>
        /// >> BagThresholds
        ///  The list of thresholds separating the various bags.
        /// 
        ///  Ids are separated into unsorted bags according to their score. This specifies the
        ///  thresholds separating the bags. An id's bag is the largest bag for which the id's score
        ///  is less than or equal to its upper threshold.
        /// 
        ///  When ids are iterated, higher bags are iterated completely before lower bags. This means
        ///  that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower
        ///  score, but peer ids within a particular bag are sorted in insertion order.
        /// 
        ///  # Expressing the constant
        /// 
        ///  This constant must be sorted in strictly increasing order. Duplicate items are not
        ///  permitted.
        /// 
        ///  There is an implied upper limit of `Score::MAX`; that value does not need to be
        ///  specified within the bag. For any two threshold lists, if one ends with
        ///  `Score::MAX`, the other one does not, and they are otherwise equal, the two
        ///  lists will behave identically.
        /// 
        ///  # Calculation
        /// 
        ///  It is recommended to generate the set of thresholds in a geometric series, such that
        ///  there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *
        ///  constant_ratio).max(threshold[k] + 1)` for all `k`.
        /// 
        ///  The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.
        /// 
        ///  # Examples
        /// 
        ///  - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and
        ///    iteration is strictly in insertion order.
        ///  - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to
        ///    the procedure given above, then the constant ratio is equal to 2.
        ///  - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to
        ///    the procedure given above, then the constant ratio is approximately equal to 1.248.
        ///  - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall
        ///    into bag 0, an id with score 2 will fall into bag 1, etc.
        /// 
        ///  # Migration
        /// 
        ///  In the event that this list ever changes, a copy of the old bags list must be retained.
        ///  With that `List::migrate` can be called, which will perform the appropriate migration.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U64> BagThresholds()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U64>();
            result.Create("0x210300A0724E1809000007A1DC61C70900007005739F830A00000DF0A0044E0B00008CC4DFA1270" +
                    "C0000D3F8259C110D0000877B712E0D0E0000B6C26FAB1B0F00007FBD457F3E100000940E7A31771" +
                    "1000083230467C712000067EE82E430140000EF3C9E90B51500000FE1957657170000601D02C9181" +
                    "900008109C9E4FB1A000017EA4C54031D0000C7C4D7D2311F0000DACA48508A210000F98D08F50F2" +
                    "40000AB514926C6260000B332998AB0290000AE4BCC0ED32C0000A87445EB31300000D4BAA4A9D13" +
                    "300007736E32AB73700005578E4ADE73B00003E6686D668400000940839B540450000988128CF754" +
                    "A0000232C04270F500000F7B26E461456000053D523488D5C0000FB81E1E282630000FFF82275FE6" +
                    "A000025BFBD110A730000F65D718DB07B000044327C8DFD84000070EA4897FD8E000099CF4921BE9" +
                    "90000258B18A54DA50000EECEF2B2BBB100000A1CAE0619BF000028DD3E9E77CD00007628F1D1EAD" +
                    "C0000CDC4736E87ED0000A481D8D063FF00001B94AF04981201002D8166E43D2701004729163C713" +
                    "D010060D0EEEE4F550100AD83741FFA6E0100D907C25A928A0100598D0CC73DA801008FC9A65524C" +
                    "80100EDC8C6F870EA010041DE56DD510F0200F1841FA9F836020024E69DBD9A610200E2FBE07F718" +
                    "F02004111CEA5BAC0020019A53489B8F5020015872181B22E0300F06FE941F56B030088606C44D3A" +
                    "D030055CC1C35A5F40300E507606BCA4004004CB1E869A992040013DEB768B0EA040087D87EE9554" +
                    "90500922E295719AF0500BAD965B1831C0600366E1645289206007B9C9C72A510070035FC1083A59" +
                    "80700A62A828DDF2A0800D3DB706D18C80800DCB2D4CB2371090072A90E3CE5260A006AA2486E51E" +
                    "A0A00BC9BDE786FBC0B00FAF78C3A5A9E0C00E7AF40D741910D007D178A516D960E00736ED9423CA" +
                    "F0F0026E7D5B428DD10008D5F4C1EC921120074F26286D27E1300360CF2D01AF61400EC121B379B8" +
                    "91600074170EF723B1800D55A4109EA0D1A00B8C1E57E74031C005F6F2683B51E1E0010FC390E836" +
                    "2200002681AAFE9D12200F06358A630702500ECC4F24FDE402800682F23E2BC472B0056658387DF8" +
                    "82E00CE9C69DBA7083200567DDECFCBCB3500F88B1D055CD73900F2A8299BCA303E00C89AA386F2D" +
                    "D42003C57C1721FE54700F8B8023B164D4D0038980C081E1D5300A8E0EE1B0A5D5900B866065B441" +
                    "560007C28A99FD84E6700D4A7DCE780136F00B0947B6DB26D7700A0996BBAAB6880000074D7CB831" +
                    "08A00C05BCE583A729400B8093252C99B9F00207582B3379CAB0040E2DBBDAD83B800987763B88A6" +
                    "3C60088D46A537C4ED500C8D5C6CD9758E50010C933FE7497F600B0F82C654B220901801F5A6E111" +
                    "21D01A0ADA60B9E81320120C240D7CC8D490140A424EDA4556201F0E681B082FA7C01902D36B544A" +
                    "09901F006D4097C6DB80140393823A08BD901904393AF4627FD01605C0E9C5F70230220E5D99D759" +
                    "A4C02A0C38695F3DC78022080142A6F73A80200392400F99DDB02E0E44DF972A11203E024B4EFECC" +
                    "74D03E002AE6A08618D03E022C1D263C2D10340CD3EB50D481B044063B0B200556A0480E0EABEA85" +
                    "3BF0440B82C6672B61A05409026D864F87C05C02B5088C79DE605C0E58242D4345806404B97A3765" +
                    "6D2060059CAF719A7550700DE109486D7E207009656D4CFA57A0800D30EFF53DE1D0900249466CF5" +
                    "CCD0980C0BB3A840D8A0A8087DB9878EE540B807C7386CC102F0C8046DEA2299A190D809E0A7F4EC" +
                    "6150E805878AFB7E8240F000DB9D4686E48100013BC01D8DF8111007A7115FEE2D21200630ECF8E3" +
                    "D3D14002CB9995BD7C21500C6E545E4BC651700367F24192228190051763A52650C1B007FC88A7F1" +
                    "2151D00F6EBC196E6441F001631E042D39E21004681D9DA02262400D66A80A4DCDD26005C1F79690" +
                    "9CA29002A795F6478EE2C007ED9C18C644F30008A5B12495AF13300F01C398E3DD9370094F205755" +
                    "00C3C006C905E4E3A90400044C9B03F0F6B4500E0FDE77158A34A001011EADD1C4050000C4974C2E" +
                    "A485600B48B14D0E1C55C00B48DF018BEBF6300C42614D3E33F6B0034691BFD6B5073004CD73DF63" +
                    "1FC7B00D8B6071CE24E8500D0CC6E8109558F00A8916AD4261C9A00E830CF88BCB2A500B888E0606" +
                    "428B200582CE96DE48DBF0030A31BA545F5CD0068632427EC71DD00883B1C5BB118EEFFFFFFFFFFF" +
                    "FFFFF");
            return result;
        }
    }
    
    /// <summary>
    /// >> BagsListErrors
    /// </summary>
    public enum BagsListErrors
    {
        
        /// <summary>
        /// >> List
        /// A error in the list interface implementation.
        /// </summary>
        List,
    }
}

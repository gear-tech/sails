#nullable disable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Gear.Api.Generated.Storage
{
    
    
    /// <summary>
    /// >> WhitelistStorage
    /// </summary>
    public sealed class WhitelistStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> WhitelistStorage Constructor
        /// </summary>
        public WhitelistStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Whitelist", "WhitelistedCall"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.Gear.Api.Generated.Model.primitive_types.H256), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
        }
        
        /// <summary>
        /// >> WhitelistedCallParams
        /// </summary>
        public static string WhitelistedCallParams(Substrate.Gear.Api.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("Whitelist", "WhitelistedCall", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> WhitelistedCallDefault
        /// Default value as hex string
        /// </summary>
        public static string WhitelistedCallDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> WhitelistedCall
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> WhitelistedCall(Substrate.Gear.Api.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = WhitelistStorage.WhitelistedCallParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> WhitelistCalls
    /// </summary>
    public sealed class WhitelistCalls
    {
        
        /// <summary>
        /// >> whitelist_call
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WhitelistCall(Substrate.Gear.Api.Generated.Model.primitive_types.H256 call_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(call_hash.Encode());
            return new Method(21, "Whitelist", 0, "whitelist_call", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_whitelisted_call
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveWhitelistedCall(Substrate.Gear.Api.Generated.Model.primitive_types.H256 call_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(call_hash.Encode());
            return new Method(21, "Whitelist", 1, "remove_whitelisted_call", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> dispatch_whitelisted_call
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DispatchWhitelistedCall(Substrate.Gear.Api.Generated.Model.primitive_types.H256 call_hash, Substrate.NetApi.Model.Types.Primitive.U32 call_encoded_len, Substrate.Gear.Api.Generated.Model.sp_weights.weight_v2.Weight call_weight_witness)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(call_hash.Encode());
            byteArray.AddRange(call_encoded_len.Encode());
            byteArray.AddRange(call_weight_witness.Encode());
            return new Method(21, "Whitelist", 2, "dispatch_whitelisted_call", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> dispatch_whitelisted_call_with_preimage
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DispatchWhitelistedCallWithPreimage(Substrate.Gear.Api.Generated.Model.vara_runtime.EnumRuntimeCall call)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(call.Encode());
            return new Method(21, "Whitelist", 3, "dispatch_whitelisted_call_with_preimage", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> WhitelistConstants
    /// </summary>
    public sealed class WhitelistConstants
    {
    }
    
    /// <summary>
    /// >> WhitelistErrors
    /// </summary>
    public enum WhitelistErrors
    {
        
        /// <summary>
        /// >> UnavailablePreImage
        /// The preimage of the call hash could not be loaded.
        /// </summary>
        UnavailablePreImage,
        
        /// <summary>
        /// >> UndecodableCall
        /// The call could not be decoded.
        /// </summary>
        UndecodableCall,
        
        /// <summary>
        /// >> InvalidCallWeightWitness
        /// The weight of the decoded call was higher than the witness.
        /// </summary>
        InvalidCallWeightWitness,
        
        /// <summary>
        /// >> CallIsNotWhitelisted
        /// The call was not whitelisted.
        /// </summary>
        CallIsNotWhitelisted,
        
        /// <summary>
        /// >> CallAlreadyWhitelisted
        /// The call was already whitelisted; No-Op.
        /// </summary>
        CallAlreadyWhitelisted,
    }
}

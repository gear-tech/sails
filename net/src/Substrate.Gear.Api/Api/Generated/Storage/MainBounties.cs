#nullable disable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Gear.Api.Generated.Storage
{
    
    
    /// <summary>
    /// >> BountiesStorage
    /// </summary>
    public sealed class BountiesStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> BountiesStorage Constructor
        /// </summary>
        public BountiesStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Bounties", "BountyCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Bounties", "Bounties"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Gear.Api.Generated.Model.pallet_bounties.Bounty)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Bounties", "BountyDescriptions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.Gear.Api.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Bounties", "BountyApprovals"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.Gear.Api.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14)));
        }
        
        /// <summary>
        /// >> BountyCountParams
        ///  Number of bounty proposals that have been made.
        /// </summary>
        public static string BountyCountParams()
        {
            return RequestGenerator.GetStorage("Bounties", "BountyCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BountyCountDefault
        /// Default value as hex string
        /// </summary>
        public static string BountyCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> BountyCount
        ///  Number of bounty proposals that have been made.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> BountyCount(string blockhash, CancellationToken token)
        {
            string parameters = BountiesStorage.BountyCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BountiesParams
        ///  Bounties that have been made.
        /// </summary>
        public static string BountiesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Bounties", "Bounties", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BountiesDefault
        /// Default value as hex string
        /// </summary>
        public static string BountiesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Bounties
        ///  Bounties that have been made.
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.pallet_bounties.Bounty> Bounties(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = BountiesStorage.BountiesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.pallet_bounties.Bounty>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BountyDescriptionsParams
        ///  The description of each bounty.
        /// </summary>
        public static string BountyDescriptionsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Bounties", "BountyDescriptions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BountyDescriptionsDefault
        /// Default value as hex string
        /// </summary>
        public static string BountyDescriptionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BountyDescriptions
        ///  The description of each bounty.
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31> BountyDescriptions(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = BountiesStorage.BountyDescriptionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BountyApprovalsParams
        ///  Bounty indices that have been approved but not yet funded.
        /// </summary>
        public static string BountyApprovalsParams()
        {
            return RequestGenerator.GetStorage("Bounties", "BountyApprovals", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BountyApprovalsDefault
        /// Default value as hex string
        /// </summary>
        public static string BountyApprovalsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BountyApprovals
        ///  Bounty indices that have been approved but not yet funded.
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14> BountyApprovals(string blockhash, CancellationToken token)
        {
            string parameters = BountiesStorage.BountyApprovalsParams();
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.bounded_collections.bounded_vec.BoundedVecT14>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> BountiesCalls
    /// </summary>
    public sealed class BountiesCalls
    {
        
        /// <summary>
        /// >> propose_bounty
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ProposeBounty(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> value, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> description)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(description.Encode());
            return new Method(29, "Bounties", 0, "propose_bounty", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> approve_bounty
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ApproveBounty(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> bounty_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bounty_id.Encode());
            return new Method(29, "Bounties", 1, "approve_bounty", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> propose_curator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ProposeCurator(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> bounty_id, Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress curator, Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U128> fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bounty_id.Encode());
            byteArray.AddRange(curator.Encode());
            byteArray.AddRange(fee.Encode());
            return new Method(29, "Bounties", 2, "propose_curator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unassign_curator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnassignCurator(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> bounty_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bounty_id.Encode());
            return new Method(29, "Bounties", 3, "unassign_curator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> accept_curator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AcceptCurator(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> bounty_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bounty_id.Encode());
            return new Method(29, "Bounties", 4, "accept_curator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> award_bounty
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AwardBounty(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> bounty_id, Substrate.Gear.Api.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress beneficiary)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bounty_id.Encode());
            byteArray.AddRange(beneficiary.Encode());
            return new Method(29, "Bounties", 5, "award_bounty", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_bounty
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimBounty(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> bounty_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bounty_id.Encode());
            return new Method(29, "Bounties", 6, "claim_bounty", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> close_bounty
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CloseBounty(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> bounty_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bounty_id.Encode());
            return new Method(29, "Bounties", 7, "close_bounty", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> extend_bounty_expiry
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ExtendBountyExpiry(Substrate.NetApi.Model.Types.Base.BaseCom<Substrate.NetApi.Model.Types.Primitive.U32> bounty_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> remark)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(bounty_id.Encode());
            byteArray.AddRange(remark.Encode());
            return new Method(29, "Bounties", 8, "extend_bounty_expiry", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> BountiesConstants
    /// </summary>
    public sealed class BountiesConstants
    {
        
        /// <summary>
        /// >> BountyDepositBase
        ///  The amount held on deposit for placing a bounty proposal.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 BountyDepositBase()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00A0724E180900000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> BountyDepositPayoutDelay
        ///  The delay period for which a bounty beneficiary need to wait before claim the payout.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 BountyDepositPayoutDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x80700000");
            return result;
        }
        
        /// <summary>
        /// >> BountyUpdatePeriod
        ///  Bounty duration in blocks.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 BountyUpdatePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00270600");
            return result;
        }
        
        /// <summary>
        /// >> CuratorDepositMultiplier
        ///  The curator deposit is calculated as a percentage of the curator fee.
        /// 
        ///  This deposit has optional upper and lower bounds with `CuratorDepositMax` and
        ///  `CuratorDepositMin`.
        /// </summary>
        public Substrate.Gear.Api.Generated.Model.sp_arithmetic.per_things.Permill CuratorDepositMultiplier()
        {
            var result = new Substrate.Gear.Api.Generated.Model.sp_arithmetic.per_things.Permill();
            result.Create("0x20A10700");
            return result;
        }
        
        /// <summary>
        /// >> CuratorDepositMax
        ///  Maximum amount of funds that should be placed in a deposit for making a proposal.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> CuratorDepositMax()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>();
            result.Create("0x010080C6A47E8D03000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> CuratorDepositMin
        ///  Minimum amount of funds that should be placed in a deposit for making a proposal.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> CuratorDepositMin()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>();
            result.Create("0x0100A0724E180900000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> BountyValueMinimum
        ///  Minimum value for a bounty.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 BountyValueMinimum()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00203D88792D00000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> DataDepositPerByte
        ///  The amount held on deposit per byte within the tip report reason or bounty description.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 DataDepositPerByte()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x00E87648170000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> MaximumReasonLength
        ///  Maximum acceptable reason length.
        /// 
        ///  Benchmarks depend on this value, be sure to update weights file when changing this value
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaximumReasonLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x2C010000");
            return result;
        }
    }
    
    /// <summary>
    /// >> BountiesErrors
    /// </summary>
    public enum BountiesErrors
    {
        
        /// <summary>
        /// >> InsufficientProposersBalance
        /// Proposer's balance is too low.
        /// </summary>
        InsufficientProposersBalance,
        
        /// <summary>
        /// >> InvalidIndex
        /// No proposal or bounty at that index.
        /// </summary>
        InvalidIndex,
        
        /// <summary>
        /// >> ReasonTooBig
        /// The reason given is just too big.
        /// </summary>
        ReasonTooBig,
        
        /// <summary>
        /// >> UnexpectedStatus
        /// The bounty status is unexpected.
        /// </summary>
        UnexpectedStatus,
        
        /// <summary>
        /// >> RequireCurator
        /// Require bounty curator.
        /// </summary>
        RequireCurator,
        
        /// <summary>
        /// >> InvalidValue
        /// Invalid bounty value.
        /// </summary>
        InvalidValue,
        
        /// <summary>
        /// >> InvalidFee
        /// Invalid bounty fee.
        /// </summary>
        InvalidFee,
        
        /// <summary>
        /// >> PendingPayout
        /// A bounty payout is pending.
        /// To cancel the bounty, you must unassign and slash the curator.
        /// </summary>
        PendingPayout,
        
        /// <summary>
        /// >> Premature
        /// The bounties cannot be claimed/closed because it's still in the countdown period.
        /// </summary>
        Premature,
        
        /// <summary>
        /// >> HasActiveChildBounty
        /// The bounty cannot be closed because it has active child bounties.
        /// </summary>
        HasActiveChildBounty,
        
        /// <summary>
        /// >> TooManyQueued
        /// Too many approvals are already queued.
        /// </summary>
        TooManyQueued,
    }
}

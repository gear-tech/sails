#nullable disable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Gear.Api.Generated.Storage
{
    
    
    /// <summary>
    /// >> GearStorage
    /// </summary>
    public sealed class GearStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> GearStorage Constructor
        /// </summary>
        public GearStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Gear", "ExecuteInherent"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Gear", "BlockNumber"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Gear", "GearRunInBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
        }
        
        /// <summary>
        /// >> ExecuteInherentParams
        ///  A flag indicating whether the message queue should be processed at the end of a block
        /// 
        ///  If not set, the inherent extrinsic that processes the queue will keep throwing an error
        ///  thereby making the block builder exclude it from the block.
        /// </summary>
        public static string ExecuteInherentParams()
        {
            return RequestGenerator.GetStorage("Gear", "ExecuteInherent", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ExecuteInherentDefault
        /// Default value as hex string
        /// </summary>
        public static string ExecuteInherentDefault()
        {
            return "0x01";
        }
        
        /// <summary>
        /// >> ExecuteInherent
        ///  A flag indicating whether the message queue should be processed at the end of a block
        /// 
        ///  If not set, the inherent extrinsic that processes the queue will keep throwing an error
        ///  thereby making the block builder exclude it from the block.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> ExecuteInherent(string blockhash, CancellationToken token)
        {
            string parameters = GearStorage.ExecuteInherentParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BlockNumberParams
        ///  The current block number being processed.
        /// 
        ///  It shows block number in which queue is processed.
        ///  May be less than system pallet block number if panic occurred previously.
        /// </summary>
        public static string BlockNumberParams()
        {
            return RequestGenerator.GetStorage("Gear", "BlockNumber", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BlockNumberDefault
        /// Default value as hex string
        /// </summary>
        public static string BlockNumberDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> BlockNumber
        ///  The current block number being processed.
        /// 
        ///  It shows block number in which queue is processed.
        ///  May be less than system pallet block number if panic occurred previously.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> BlockNumber(string blockhash, CancellationToken token)
        {
            string parameters = GearStorage.BlockNumberParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GearRunInBlockParams
        ///  A guard to prohibit all but the first execution of `pallet_gear::run()` call in a block.
        /// 
        ///  Set to `Some(())` if the extrinsic is executed for the first time in a block.
        ///  All subsequent attempts would fail with `Error::<T>::GearRunAlreadyInBlock` error.
        ///  Set back to `None` in the `on_finalize()` hook at the end of the block.
        /// </summary>
        public static string GearRunInBlockParams()
        {
            return RequestGenerator.GetStorage("Gear", "GearRunInBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> GearRunInBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string GearRunInBlockDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GearRunInBlock
        ///  A guard to prohibit all but the first execution of `pallet_gear::run()` call in a block.
        /// 
        ///  Set to `Some(())` if the extrinsic is executed for the first time in a block.
        ///  All subsequent attempts would fail with `Error::<T>::GearRunAlreadyInBlock` error.
        ///  Set back to `None` in the `on_finalize()` hook at the end of the block.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> GearRunInBlock(string blockhash, CancellationToken token)
        {
            string parameters = GearStorage.GearRunInBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> GearCalls
    /// </summary>
    public sealed class GearCalls
    {
        
        /// <summary>
        /// >> upload_code
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UploadCode(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> code)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(code.Encode());
            return new Method(104, "Gear", 0, "upload_code", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> upload_program
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UploadProgram(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> code, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> salt, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> init_payload, Substrate.NetApi.Model.Types.Primitive.U64 gas_limit, Substrate.NetApi.Model.Types.Primitive.U128 value, Substrate.NetApi.Model.Types.Primitive.Bool keep_alive)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(code.Encode());
            byteArray.AddRange(salt.Encode());
            byteArray.AddRange(init_payload.Encode());
            byteArray.AddRange(gas_limit.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(keep_alive.Encode());
            return new Method(104, "Gear", 1, "upload_program", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_program
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateProgram(Substrate.Gear.Api.Generated.Model.gprimitives.CodeId code_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> salt, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> init_payload, Substrate.NetApi.Model.Types.Primitive.U64 gas_limit, Substrate.NetApi.Model.Types.Primitive.U128 value, Substrate.NetApi.Model.Types.Primitive.Bool keep_alive)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(code_id.Encode());
            byteArray.AddRange(salt.Encode());
            byteArray.AddRange(init_payload.Encode());
            byteArray.AddRange(gas_limit.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(keep_alive.Encode());
            return new Method(104, "Gear", 2, "create_program", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> send_message
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SendMessage(Substrate.Gear.Api.Generated.Model.gprimitives.ActorId destination, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> payload, Substrate.NetApi.Model.Types.Primitive.U64 gas_limit, Substrate.NetApi.Model.Types.Primitive.U128 value, Substrate.NetApi.Model.Types.Primitive.Bool keep_alive)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(destination.Encode());
            byteArray.AddRange(payload.Encode());
            byteArray.AddRange(gas_limit.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(keep_alive.Encode());
            return new Method(104, "Gear", 3, "send_message", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> send_reply
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SendReply(Substrate.Gear.Api.Generated.Model.gprimitives.MessageId reply_to_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> payload, Substrate.NetApi.Model.Types.Primitive.U64 gas_limit, Substrate.NetApi.Model.Types.Primitive.U128 value, Substrate.NetApi.Model.Types.Primitive.Bool keep_alive)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(reply_to_id.Encode());
            byteArray.AddRange(payload.Encode());
            byteArray.AddRange(gas_limit.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(keep_alive.Encode());
            return new Method(104, "Gear", 4, "send_reply", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_value
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimValue(Substrate.Gear.Api.Generated.Model.gprimitives.MessageId message_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(message_id.Encode());
            return new Method(104, "Gear", 5, "claim_value", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> run
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Run(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U64> max_gas)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(max_gas.Encode());
            return new Method(104, "Gear", 6, "run", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_execute_inherent
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetExecuteInherent(Substrate.NetApi.Model.Types.Primitive.Bool value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(value.Encode());
            return new Method(104, "Gear", 7, "set_execute_inherent", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_value_to_inheritor
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimValueToInheritor(Substrate.Gear.Api.Generated.Model.gprimitives.ActorId program_id, Substrate.Gear.Api.Generated.Types.Base.NonZeroU32 depth)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(program_id.Encode());
            byteArray.AddRange(depth.Encode());
            return new Method(104, "Gear", 8, "claim_value_to_inheritor", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> GearConstants
    /// </summary>
    public sealed class GearConstants
    {
        
        /// <summary>
        /// >> Schedule
        ///  Cost schedule and limits.
        /// </summary>
        public Substrate.Gear.Api.Generated.Model.pallet_gear.schedule.Schedule Schedule()
        {
            var result = new Substrate.Gear.Api.Generated.Model.pallet_gear.schedule.Schedule();
            result.Create("0x01878F0000000100000004000080000000008000100000640000000001000020000000200000000" +
                    "00080000000080000040000A4060000C80000008F1E0000241E000067280000C0260000101A0000E" +
                    "11400000B0F000015180000B42D0000B800000082150000446100001C05000000000000CA0200006" +
                    "A0500008F050000D5020000EC04000085390000EC010000F400000018020000FF000000160200000" +
                    "9010000E80600001E040000190100001D010000BB010000900100003E010000F8000000F1000000D" +
                    "B000000E906000011040000EB0600008A0400007A060000EF0300006F0600002B0400001C070000F" +
                    "10300009706000037040000A30600003C04000068060000FD0300008D060000320400000C0700007" +
                    "3040000D8030000EC0100000D040000260200001A070000490300003A0E0000340A0000F10E00007" +
                    "00A0000FC4D0000B43800000E0F0000ED0900006D040000C901000041030000BF010000BA0300005" +
                    "0020000C9020000C6000000CF020000CE00000049030000C9000000C7020000E0000000FB0200002" +
                    "00100004234750000AAAF4200001EC7430000BAE302000016F8A20000FEE2A600002A8D50000012E" +
                    "3450000DEED460000B2484500007EFB4500002A8B4600002A234E000096594500002A35850000350" +
                    "300B2E856000032814D0000EED246000026E78F00006EC2760100928ED30000A90800326DD60000B" +
                    "10800EA9D4E000036C7910000B108003EFFAF000096DFB500008AB3F700006D0800B222D7000082F" +
                    "C26030062742203001296570200B6083100001A9E5002000E0C7D0000625B8F03007D0C008259980" +
                    "4006D0C006D0B003E9C490000AE0147000052ED4900005A28420400D27AF90100AAAB560000AD020" +
                    "072DBCE0000328BD10000CE1F710000E10200A66F5C0000A10700CEC6460000F276260500CAB2230" +
                    "4000A6DF603000A182B0400AAB4210400E2E3E700003AC6030100D901002D190042D908010015020" +
                    "0DD18002ED8EF060076E48308008A26780200B2054F0700AEF31F09000A76100300E63B8D0200821" +
                    "8E61800D67F2B000010000000910100910100910100910100E12E0002E1F50500BD0A000284D7170" +
                    "0390400C230EEDED160E2D4FAA98D430368AD7056D160628BCEC2FD404275DCCCD14462229E07653" +
                    "703181E7270ED76037022F06DA9725928004D09008125002D0A006D2700B61D010000A2EBA84D453" +
                    "BAEA72B0000B689010000");
            return result;
        }
        
        /// <summary>
        /// >> OutgoingLimit
        ///  The maximum amount of messages that can be produced in during all message executions.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 OutgoingLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00040000");
            return result;
        }
        
        /// <summary>
        /// >> OutgoingBytesLimit
        ///  The maximum amount of bytes in outgoing messages during message execution.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 OutgoingBytesLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000004");
            return result;
        }
        
        /// <summary>
        /// >> PerformanceMultiplier
        ///  Performance multiplier.
        /// </summary>
        public Substrate.Gear.Api.Generated.Model.gear_core.percent.Percent PerformanceMultiplier()
        {
            var result = new Substrate.Gear.Api.Generated.Model.gear_core.percent.Percent();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MailboxThreshold
        ///  The minimal gas amount for message to be inserted in mailbox.
        /// 
        ///  This gas will be consuming as rent for storing and message will be available
        ///  for reply or claim, once gas ends, message removes.
        /// 
        ///  Messages with gas limit less than that minimum will not be added in mailbox,
        ///  but will be seen in events.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 MailboxThreshold()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0xB80B000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ReservationsLimit
        ///  Amount of reservations can exist for 1 program.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 ReservationsLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x0001000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ProgramRentFreePeriod
        ///  The free of charge period of rent.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ProgramRentFreePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00D44900");
            return result;
        }
        
        /// <summary>
        /// >> ProgramResumeMinimalRentPeriod
        ///  The minimal amount of blocks to resume.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ProgramResumeMinimalRentPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x004E0C00");
            return result;
        }
        
        /// <summary>
        /// >> ProgramRentCostPerBlock
        ///  The program rent cost per block.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ProgramRentCostPerBlock()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x40597307000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ProgramResumeSessionDuration
        ///  The amount of blocks for processing resume session.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ProgramResumeSessionDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xB0040000");
            return result;
        }
        
        /// <summary>
        /// >> ProgramRentEnabled
        ///  The flag determines if program rent mechanism enabled.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool ProgramRentEnabled()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.Bool();
            result.Create("0x00");
            return result;
        }
        
        /// <summary>
        /// >> ProgramRentDisabledDelta
        ///  The constant defines value that is added if the program
        ///  rent is disabled.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ProgramRentDisabledDelta()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x80130300");
            return result;
        }
        
        /// <summary>
        /// >> RentPoolId
        ///  The account id of the rent pool if any.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32> RentPoolId()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Gear.Api.Generated.Model.sp_core.crypto.AccountId32>();
            result.Create("0x01E68325A26F5E8EA5C6C93BBDCFA596AC3EC8B69301C0CC54029DC7BC891BC515");
            return result;
        }
    }
    
    /// <summary>
    /// >> GearErrors
    /// </summary>
    public enum GearErrors
    {
        
        /// <summary>
        /// >> MessageNotFound
        /// Message wasn't found in the mailbox.
        /// </summary>
        MessageNotFound,
        
        /// <summary>
        /// >> InsufficientBalance
        /// Not enough balance to execute an action.
        /// 
        /// Usually occurs when the gas_limit specified is such that the origin account can't afford the message.
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> GasLimitTooHigh
        /// Gas limit too high.
        /// 
        /// Occurs when an extrinsic's declared `gas_limit` is greater than a block's maximum gas limit.
        /// </summary>
        GasLimitTooHigh,
        
        /// <summary>
        /// >> ProgramAlreadyExists
        /// Program already exists.
        /// 
        /// Occurs if a program with some specific program id already exists in program storage.
        /// </summary>
        ProgramAlreadyExists,
        
        /// <summary>
        /// >> InactiveProgram
        /// Program is terminated.
        /// 
        /// Program init failed, so such message destination is no longer unavailable.
        /// </summary>
        InactiveProgram,
        
        /// <summary>
        /// >> NoMessageTree
        /// Message gas tree is not found.
        /// 
        /// When a message claimed from the mailbox has a corrupted or non-extant gas tree associated.
        /// </summary>
        NoMessageTree,
        
        /// <summary>
        /// >> CodeAlreadyExists
        /// Code already exists.
        /// 
        /// Occurs when trying to save to storage a program code that has been saved there.
        /// </summary>
        CodeAlreadyExists,
        
        /// <summary>
        /// >> CodeDoesntExist
        /// Code does not exist.
        /// 
        /// Occurs when trying to get a program code from storage, that doesn't exist.
        /// </summary>
        CodeDoesntExist,
        
        /// <summary>
        /// >> CodeTooLarge
        /// The code supplied to `upload_code` or `upload_program` exceeds the limit specified in the
        /// current schedule.
        /// </summary>
        CodeTooLarge,
        
        /// <summary>
        /// >> ProgramConstructionFailed
        /// Failed to create a program.
        /// </summary>
        ProgramConstructionFailed,
        
        /// <summary>
        /// >> MessageQueueProcessingDisabled
        /// Message queue processing is disabled.
        /// </summary>
        MessageQueueProcessingDisabled,
        
        /// <summary>
        /// >> ResumePeriodLessThanMinimal
        /// Block count doesn't cover MinimalResumePeriod.
        /// </summary>
        ResumePeriodLessThanMinimal,
        
        /// <summary>
        /// >> ProgramNotFound
        /// Program with the specified id is not found.
        /// </summary>
        ProgramNotFound,
        
        /// <summary>
        /// >> GearRunAlreadyInBlock
        /// Gear::run() already included in current block.
        /// </summary>
        GearRunAlreadyInBlock,
        
        /// <summary>
        /// >> ProgramRentDisabled
        /// The program rent logic is disabled.
        /// </summary>
        ProgramRentDisabled,
        
        /// <summary>
        /// >> ActiveProgram
        /// Program is active.
        /// </summary>
        ActiveProgram,
    }
}

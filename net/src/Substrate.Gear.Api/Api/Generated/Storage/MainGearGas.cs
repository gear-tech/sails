#nullable disable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Gear.Api.Generated.Storage
{
    
    
    /// <summary>
    /// >> GearGasStorage
    /// </summary>
    public sealed class GearGasStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> GearGasStorage Constructor
        /// </summary>
        public GearGasStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GearGas", "TotalIssuance"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GearGas", "GasNodes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.Gear.Api.Generated.Model.gear_common.gas_provider.node.EnumGasNodeId), typeof(Substrate.Gear.Api.Generated.Model.gear_common.gas_provider.node.EnumGasNode)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("GearGas", "Allowance"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
        }
        
        /// <summary>
        /// >> TotalIssuanceParams
        /// </summary>
        public static string TotalIssuanceParams()
        {
            return RequestGenerator.GetStorage("GearGas", "TotalIssuance", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TotalIssuanceDefault
        /// Default value as hex string
        /// </summary>
        public static string TotalIssuanceDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TotalIssuance
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> TotalIssuance(string blockhash, CancellationToken token)
        {
            string parameters = GearGasStorage.TotalIssuanceParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GasNodesParams
        /// </summary>
        public static string GasNodesParams(Substrate.Gear.Api.Generated.Model.gear_common.gas_provider.node.EnumGasNodeId key)
        {
            return RequestGenerator.GetStorage("GearGas", "GasNodes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> GasNodesDefault
        /// Default value as hex string
        /// </summary>
        public static string GasNodesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GasNodes
        /// </summary>
        public async Task<Substrate.Gear.Api.Generated.Model.gear_common.gas_provider.node.EnumGasNode> GasNodes(Substrate.Gear.Api.Generated.Model.gear_common.gas_provider.node.EnumGasNodeId key, string blockhash, CancellationToken token)
        {
            string parameters = GearGasStorage.GasNodesParams(key);
            var result = await _client.GetStorageAsync<Substrate.Gear.Api.Generated.Model.gear_common.gas_provider.node.EnumGasNode>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AllowanceParams
        /// </summary>
        public static string AllowanceParams()
        {
            return RequestGenerator.GetStorage("GearGas", "Allowance", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AllowanceDefault
        /// Default value as hex string
        /// </summary>
        public static string AllowanceDefault()
        {
            return "0x00CC7B9FAE000000";
        }
        
        /// <summary>
        /// >> Allowance
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> Allowance(string blockhash, CancellationToken token)
        {
            string parameters = GearGasStorage.AllowanceParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> GearGasCalls
    /// </summary>
    public sealed class GearGasCalls
    {
    }
    
    /// <summary>
    /// >> GearGasConstants
    /// </summary>
    public sealed class GearGasConstants
    {
        
        /// <summary>
        /// >> BlockGasLimit
        ///  The maximum amount of gas that can be used within a single block.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 BlockGasLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x00CC7B9FAE000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> GearGasErrors
    /// </summary>
    public enum GearGasErrors
    {
        
        /// <summary>
        /// >> Forbidden
        /// </summary>
        Forbidden,
        
        /// <summary>
        /// >> NodeAlreadyExists
        /// </summary>
        NodeAlreadyExists,
        
        /// <summary>
        /// >> InsufficientBalance
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> NodeNotFound
        /// </summary>
        NodeNotFound,
        
        /// <summary>
        /// >> NodeWasConsumed
        /// </summary>
        NodeWasConsumed,
        
        /// <summary>
        /// >> ParentIsLost
        /// Errors stating that gas tree has been invalidated
        /// </summary>
        ParentIsLost,
        
        /// <summary>
        /// >> ParentHasNoChildren
        /// </summary>
        ParentHasNoChildren,
        
        /// <summary>
        /// >> UnexpectedConsumeOutput
        /// Output of `Tree::consume` procedure that wasn't expected.
        /// 
        /// Outputs of consumption procedure are determined. The error is returned
        /// when unexpected one occurred. That signals, that algorithm works wrong
        /// and expected invariants are not correct.
        /// </summary>
        UnexpectedConsumeOutput,
        
        /// <summary>
        /// >> UnexpectedNodeType
        /// Node type that can't occur if algorithm work well
        /// </summary>
        UnexpectedNodeType,
        
        /// <summary>
        /// >> ValueIsNotCaught
        /// Value must have been caught, but was missed or blocked (for more info see `ValueNode::catch_value`).
        /// </summary>
        ValueIsNotCaught,
        
        /// <summary>
        /// >> ValueIsBlocked
        /// Value must have been caught or moved upstream, but was blocked (for more info see `ValueNode::catch_value`).
        /// </summary>
        ValueIsBlocked,
        
        /// <summary>
        /// >> ValueIsNotBlocked
        /// Value must have been blocked, but was either moved or caught (for more info see `ValueNode::catch_value`).
        /// </summary>
        ValueIsNotBlocked,
        
        /// <summary>
        /// >> ConsumedWithLock
        /// `GasTree::consume` called on node, which has some balance locked.
        /// </summary>
        ConsumedWithLock,
        
        /// <summary>
        /// >> ConsumedWithSystemReservation
        /// `GasTree::consume` called on node, which has some system reservation.
        /// </summary>
        ConsumedWithSystemReservation,
        
        /// <summary>
        /// >> TotalValueIsOverflowed
        /// `GasTree::create` called with some value amount leading to
        /// the total value overflow.
        /// </summary>
        TotalValueIsOverflowed,
        
        /// <summary>
        /// >> TotalValueIsUnderflowed
        /// Either `GasTree::consume` or `GasTree::spent` called on a node creating
        /// negative imbalance which leads to the total value drop below 0.
        /// </summary>
        TotalValueIsUnderflowed,
    }
}

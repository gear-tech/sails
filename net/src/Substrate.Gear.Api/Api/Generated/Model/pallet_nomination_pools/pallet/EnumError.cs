#nullable disable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.pallet
{
    
    
    /// <summary>
    /// >> Error
    /// The `Error` enum of this pallet.
    /// </summary>
    public enum Error
    {
        
        /// <summary>
        /// >> PoolNotFound
        /// A (bonded) pool id does not exist.
        /// </summary>
        PoolNotFound = 0,
        
        /// <summary>
        /// >> PoolMemberNotFound
        /// An account is not a member.
        /// </summary>
        PoolMemberNotFound = 1,
        
        /// <summary>
        /// >> RewardPoolNotFound
        /// A reward pool does not exist. In all cases this is a system logic error.
        /// </summary>
        RewardPoolNotFound = 2,
        
        /// <summary>
        /// >> SubPoolsNotFound
        /// A sub pool does not exist.
        /// </summary>
        SubPoolsNotFound = 3,
        
        /// <summary>
        /// >> AccountBelongsToOtherPool
        /// An account is already delegating in another pool. An account may only belong to one
        /// pool at a time.
        /// </summary>
        AccountBelongsToOtherPool = 4,
        
        /// <summary>
        /// >> FullyUnbonding
        /// The member is fully unbonded (and thus cannot access the bonded and reward pool
        /// anymore to, for example, collect rewards).
        /// </summary>
        FullyUnbonding = 5,
        
        /// <summary>
        /// >> MaxUnbondingLimit
        /// The member cannot unbond further chunks due to reaching the limit.
        /// </summary>
        MaxUnbondingLimit = 6,
        
        /// <summary>
        /// >> CannotWithdrawAny
        /// None of the funds can be withdrawn yet because the bonding duration has not passed.
        /// </summary>
        CannotWithdrawAny = 7,
        
        /// <summary>
        /// >> MinimumBondNotMet
        /// The amount does not meet the minimum bond to either join or create a pool.
        /// 
        /// The depositor can never unbond to a value less than `Pallet::depositor_min_bond`. The
        /// caller does not have nominating permissions for the pool. Members can never unbond to a
        /// value below `MinJoinBond`.
        /// </summary>
        MinimumBondNotMet = 8,
        
        /// <summary>
        /// >> OverflowRisk
        /// The transaction could not be executed due to overflow risk for the pool.
        /// </summary>
        OverflowRisk = 9,
        
        /// <summary>
        /// >> NotDestroying
        /// A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for
        /// other members to be permissionlessly unbonded.
        /// </summary>
        NotDestroying = 10,
        
        /// <summary>
        /// >> NotNominator
        /// The caller does not have nominating permissions for the pool.
        /// </summary>
        NotNominator = 11,
        
        /// <summary>
        /// >> NotKickerOrDestroying
        /// Either a) the caller cannot make a valid kick or b) the pool is not destroying.
        /// </summary>
        NotKickerOrDestroying = 12,
        
        /// <summary>
        /// >> NotOpen
        /// The pool is not open to join
        /// </summary>
        NotOpen = 13,
        
        /// <summary>
        /// >> MaxPools
        /// The system is maxed out on pools.
        /// </summary>
        MaxPools = 14,
        
        /// <summary>
        /// >> MaxPoolMembers
        /// Too many members in the pool or system.
        /// </summary>
        MaxPoolMembers = 15,
        
        /// <summary>
        /// >> CanNotChangeState
        /// The pools state cannot be changed.
        /// </summary>
        CanNotChangeState = 16,
        
        /// <summary>
        /// >> DoesNotHavePermission
        /// The caller does not have adequate permissions.
        /// </summary>
        DoesNotHavePermission = 17,
        
        /// <summary>
        /// >> MetadataExceedsMaxLen
        /// Metadata exceeds [`Config::MaxMetadataLen`]
        /// </summary>
        MetadataExceedsMaxLen = 18,
        
        /// <summary>
        /// >> Defensive
        /// Some error occurred that should never happen. This should be reported to the
        /// maintainers.
        /// </summary>
        Defensive = 19,
        
        /// <summary>
        /// >> PartialUnbondNotAllowedPermissionlessly
        /// Partial unbonding now allowed permissionlessly.
        /// </summary>
        PartialUnbondNotAllowedPermissionlessly = 20,
        
        /// <summary>
        /// >> MaxCommissionRestricted
        /// The pool's max commission cannot be set higher than the existing value.
        /// </summary>
        MaxCommissionRestricted = 21,
        
        /// <summary>
        /// >> CommissionExceedsMaximum
        /// The supplied commission exceeds the max allowed commission.
        /// </summary>
        CommissionExceedsMaximum = 22,
        
        /// <summary>
        /// >> CommissionExceedsGlobalMaximum
        /// The supplied commission exceeds global maximum commission.
        /// </summary>
        CommissionExceedsGlobalMaximum = 23,
        
        /// <summary>
        /// >> CommissionChangeThrottled
        /// Not enough blocks have surpassed since the last commission update.
        /// </summary>
        CommissionChangeThrottled = 24,
        
        /// <summary>
        /// >> CommissionChangeRateNotAllowed
        /// The submitted changes to commission change rate are not allowed.
        /// </summary>
        CommissionChangeRateNotAllowed = 25,
        
        /// <summary>
        /// >> NoPendingCommission
        /// There is no pending commission to claim.
        /// </summary>
        NoPendingCommission = 26,
        
        /// <summary>
        /// >> NoCommissionCurrentSet
        /// No commission current has been set.
        /// </summary>
        NoCommissionCurrentSet = 27,
        
        /// <summary>
        /// >> PoolIdInUse
        /// Pool id currently in use.
        /// </summary>
        PoolIdInUse = 28,
        
        /// <summary>
        /// >> InvalidPoolId
        /// Pool id provided is not correct/usable.
        /// </summary>
        InvalidPoolId = 29,
        
        /// <summary>
        /// >> BondExtraRestricted
        /// Bonding extra is restricted to the exact pending reward amount.
        /// </summary>
        BondExtraRestricted = 30,
        
        /// <summary>
        /// >> NothingToAdjust
        /// No imbalance in the ED deposit for the pool.
        /// </summary>
        NothingToAdjust = 31,
        
        /// <summary>
        /// >> NothingToSlash
        /// No slash pending that can be applied to the member.
        /// </summary>
        NothingToSlash = 32,
        
        /// <summary>
        /// >> AlreadyMigrated
        /// The pool or member delegation has already migrated to delegate stake.
        /// </summary>
        AlreadyMigrated = 33,
        
        /// <summary>
        /// >> NotMigrated
        /// The pool or member delegation has not migrated yet to delegate stake.
        /// </summary>
        NotMigrated = 34,
        
        /// <summary>
        /// >> NotSupported
        /// This call is not allowed in the current state of the pallet.
        /// </summary>
        NotSupported = 35,
    }
    
    /// <summary>
    /// >> 564 - Variant[pallet_nomination_pools.pallet.Error]
    /// The `Error` enum of this pallet.
    /// </summary>
    public sealed class EnumError : BaseEnumRust<Error>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumError()
        {
				AddTypeDecoder<BaseVoid>(Error.PoolNotFound);
				AddTypeDecoder<BaseVoid>(Error.PoolMemberNotFound);
				AddTypeDecoder<BaseVoid>(Error.RewardPoolNotFound);
				AddTypeDecoder<BaseVoid>(Error.SubPoolsNotFound);
				AddTypeDecoder<BaseVoid>(Error.AccountBelongsToOtherPool);
				AddTypeDecoder<BaseVoid>(Error.FullyUnbonding);
				AddTypeDecoder<BaseVoid>(Error.MaxUnbondingLimit);
				AddTypeDecoder<BaseVoid>(Error.CannotWithdrawAny);
				AddTypeDecoder<BaseVoid>(Error.MinimumBondNotMet);
				AddTypeDecoder<BaseVoid>(Error.OverflowRisk);
				AddTypeDecoder<BaseVoid>(Error.NotDestroying);
				AddTypeDecoder<BaseVoid>(Error.NotNominator);
				AddTypeDecoder<BaseVoid>(Error.NotKickerOrDestroying);
				AddTypeDecoder<BaseVoid>(Error.NotOpen);
				AddTypeDecoder<BaseVoid>(Error.MaxPools);
				AddTypeDecoder<BaseVoid>(Error.MaxPoolMembers);
				AddTypeDecoder<BaseVoid>(Error.CanNotChangeState);
				AddTypeDecoder<BaseVoid>(Error.DoesNotHavePermission);
				AddTypeDecoder<BaseVoid>(Error.MetadataExceedsMaxLen);
				AddTypeDecoder<Substrate.Gear.Api.Generated.Model.pallet_nomination_pools.pallet.EnumDefensiveError>(Error.Defensive);
				AddTypeDecoder<BaseVoid>(Error.PartialUnbondNotAllowedPermissionlessly);
				AddTypeDecoder<BaseVoid>(Error.MaxCommissionRestricted);
				AddTypeDecoder<BaseVoid>(Error.CommissionExceedsMaximum);
				AddTypeDecoder<BaseVoid>(Error.CommissionExceedsGlobalMaximum);
				AddTypeDecoder<BaseVoid>(Error.CommissionChangeThrottled);
				AddTypeDecoder<BaseVoid>(Error.CommissionChangeRateNotAllowed);
				AddTypeDecoder<BaseVoid>(Error.NoPendingCommission);
				AddTypeDecoder<BaseVoid>(Error.NoCommissionCurrentSet);
				AddTypeDecoder<BaseVoid>(Error.PoolIdInUse);
				AddTypeDecoder<BaseVoid>(Error.InvalidPoolId);
				AddTypeDecoder<BaseVoid>(Error.BondExtraRestricted);
				AddTypeDecoder<BaseVoid>(Error.NothingToAdjust);
				AddTypeDecoder<BaseVoid>(Error.NothingToSlash);
				AddTypeDecoder<BaseVoid>(Error.AlreadyMigrated);
				AddTypeDecoder<BaseVoid>(Error.NotMigrated);
				AddTypeDecoder<BaseVoid>(Error.NotSupported);
        }
    }
}

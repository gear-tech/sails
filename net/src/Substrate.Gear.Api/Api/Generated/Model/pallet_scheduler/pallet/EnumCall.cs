#nullable disable
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.Gear.Api.Generated.Model.pallet_scheduler.pallet
{
    
    
    /// <summary>
    /// >> Call
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public enum Call
    {
        
        /// <summary>
        /// >> schedule
        /// Anonymously schedule a task.
        /// </summary>
        schedule = 0,
        
        /// <summary>
        /// >> cancel
        /// Cancel an anonymously scheduled task.
        /// </summary>
        cancel = 1,
        
        /// <summary>
        /// >> schedule_named
        /// Schedule a named task.
        /// </summary>
        schedule_named = 2,
        
        /// <summary>
        /// >> cancel_named
        /// Cancel a named scheduled task.
        /// </summary>
        cancel_named = 3,
        
        /// <summary>
        /// >> schedule_after
        /// Anonymously schedule a task after a delay.
        /// </summary>
        schedule_after = 4,
        
        /// <summary>
        /// >> schedule_named_after
        /// Schedule a named task after a delay.
        /// </summary>
        schedule_named_after = 5,
        
        /// <summary>
        /// >> set_retry
        /// Set a retry configuration for a task so that, in case its scheduled run fails, it will
        /// be retried after `period` blocks, for a total amount of `retries` retries or until it
        /// succeeds.
        /// 
        /// Tasks which need to be scheduled for a retry are still subject to weight metering and
        /// agenda space, same as a regular task. If a periodic task fails, it will be scheduled
        /// normally while the task is retrying.
        /// 
        /// Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
        /// clones of the original task. Their retry configuration will be derived from the
        /// original task's configuration, but will have a lower value for `remaining` than the
        /// original `total_retries`.
        /// </summary>
        set_retry = 6,
        
        /// <summary>
        /// >> set_retry_named
        /// Set a retry configuration for a named task so that, in case its scheduled run fails, it
        /// will be retried after `period` blocks, for a total amount of `retries` retries or until
        /// it succeeds.
        /// 
        /// Tasks which need to be scheduled for a retry are still subject to weight metering and
        /// agenda space, same as a regular task. If a periodic task fails, it will be scheduled
        /// normally while the task is retrying.
        /// 
        /// Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic
        /// clones of the original task. Their retry configuration will be derived from the
        /// original task's configuration, but will have a lower value for `remaining` than the
        /// original `total_retries`.
        /// </summary>
        set_retry_named = 7,
        
        /// <summary>
        /// >> cancel_retry
        /// Removes the retry configuration of a task.
        /// </summary>
        cancel_retry = 8,
        
        /// <summary>
        /// >> cancel_retry_named
        /// Cancel the retry configuration of a named task.
        /// </summary>
        cancel_retry_named = 9,
    }
    
    /// <summary>
    /// >> 139 - Variant[pallet_scheduler.pallet.Call]
    /// Contains a variant per dispatchable extrinsic that this pallet has.
    /// </summary>
    public sealed class EnumCall : BaseEnumRust<Call>
    {
        
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public EnumCall()
        {
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>, Substrate.NetApi.Model.Types.Primitive.U8, Substrate.Gear.Api.Generated.Model.vara_runtime.EnumRuntimeCall>>(Call.schedule);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.cancel);
				AddTypeDecoder<BaseTuple<Substrate.Gear.Api.Generated.Types.Base.Arr32U8, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>, Substrate.NetApi.Model.Types.Primitive.U8, Substrate.Gear.Api.Generated.Model.vara_runtime.EnumRuntimeCall>>(Call.schedule_named);
				AddTypeDecoder<Substrate.Gear.Api.Generated.Types.Base.Arr32U8>(Call.cancel_named);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>, Substrate.NetApi.Model.Types.Primitive.U8, Substrate.Gear.Api.Generated.Model.vara_runtime.EnumRuntimeCall>>(Call.schedule_after);
				AddTypeDecoder<BaseTuple<Substrate.Gear.Api.Generated.Types.Base.Arr32U8, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>, Substrate.NetApi.Model.Types.Primitive.U8, Substrate.Gear.Api.Generated.Model.vara_runtime.EnumRuntimeCall>>(Call.schedule_named_after);
				AddTypeDecoder<BaseTuple<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>, Substrate.NetApi.Model.Types.Primitive.U8, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.set_retry);
				AddTypeDecoder<BaseTuple<Substrate.Gear.Api.Generated.Types.Base.Arr32U8, Substrate.NetApi.Model.Types.Primitive.U8, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.set_retry_named);
				AddTypeDecoder<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>>(Call.cancel_retry);
				AddTypeDecoder<Substrate.Gear.Api.Generated.Types.Base.Arr32U8>(Call.cancel_retry_named);
        }
    }
}

//HintName: Demo.g.cs
// <auto-generated />
using global::Sails.Remoting;
using global::Sails.Remoting.Abstractions;
using global::Sails.Remoting.Abstractions.Core;
using global::System;
using global::System.Collections.Generic;
using global::System.Threading;
using global::System.Threading.Tasks;

#nullable enable
#pragma warning disable RCS0056 // A line is too long

namespace Sails.ClientGenerator.Tests.Demo;
public interface IDemoFactory
{
    /// <summary>
    /// Program constructor (called once at the very beginning of the program lifetime)
    /// </summary>
    IActivation Default();
    /// <summary>
    /// Another program constructor (called once at the very beginning of the program lifetime)
    /// </summary>
    IActivation New(global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.U32> counter, global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.I32, global::Substrate.NetApi.Model.Types.Primitive.I32>> dogPosition);
}

public sealed partial class DemoFactory : IDemoFactory
{
    private readonly IRemoting remoting;
    public DemoFactory(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    /// <inheritdoc/>
    public IActivation Default()
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(this.remoting, nameof(Default), string.Empty);
    }

    /// <inheritdoc/>
    public IActivation New(global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.U32> counter, global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.I32, global::Substrate.NetApi.Model.Types.Primitive.I32>> dogPosition)
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(this.remoting, nameof(New), string.Empty, counter, dogPosition);
    }
}

public interface ICounter
{
    ICall<global::Substrate.NetApi.Model.Types.Primitive.U32> Add(global::Substrate.NetApi.Model.Types.Primitive.U32 value);
    ICall<global::Substrate.NetApi.Model.Types.Primitive.U32> Sub(global::Substrate.NetApi.Model.Types.Primitive.U32 value);
    IQuery<global::Substrate.NetApi.Model.Types.Primitive.U32> Value();
}

public sealed partial class Counter : ICounter
{
    private const string ROUTE = nameof(Counter);
    private readonly IRemoting remoting;
    public Counter(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    /// <inheritdoc/>
    public ICall<global::Substrate.NetApi.Model.Types.Primitive.U32> Add(global::Substrate.NetApi.Model.Types.Primitive.U32 value)
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Primitive.U32>(this.remoting, ROUTE, nameof(Add), value);
    }

    /// <inheritdoc/>
    public ICall<global::Substrate.NetApi.Model.Types.Primitive.U32> Sub(global::Substrate.NetApi.Model.Types.Primitive.U32 value)
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Primitive.U32>(this.remoting, ROUTE, nameof(Sub), value);
    }

    /// <inheritdoc/>
    public IQuery<global::Substrate.NetApi.Model.Types.Primitive.U32> Value()
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Primitive.U32>(this.remoting, ROUTE, nameof(Value));
    }
}

public enum CounterEvents
{
    /// <summary>
    /// Emitted when a new value is added to the counter
    /// </summary>
    Added,
    /// <summary>
    /// Emitted when a value is subtracted from the counter
    /// </summary>
    Subtracted,
}

public sealed partial class EnumCounterEvents : global::Substrate.NetApi.Model.Types.Base.BaseEnumRust<CounterEvents>
{
    public EnumCounterEvents()
    {
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Primitive.U32>(CounterEvents.Added);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Primitive.U32>(CounterEvents.Subtracted);
    }
}

public sealed partial class CounterListener
{
    private const string ROUTE = "Counter";
    private static readonly string[] EventRoutes = ["Added", "Subtracted", ];
    private readonly IRemoting remoting;
    public CounterListener(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    public async Task<IAsyncEnumerable<(global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId, EnumCounterEvents)>> ListenAsync(CancellationToken cancellationToken = default)
    {
        var eventStream = await this.remoting.ListenAsync(cancellationToken);
        return eventStream.SelectEvent<EnumCounterEvents>(ROUTE, EventRoutes);
    }
}

public interface IDog
{
    ICall<global::Substrate.NetApi.Model.Types.Primitive.Str> MakeSound();
    ICall<global::Substrate.NetApi.Model.Types.Base.BaseVoid> Walk(global::Substrate.NetApi.Model.Types.Primitive.I32 dx, global::Substrate.NetApi.Model.Types.Primitive.I32 dy);
    IQuery<global::Substrate.NetApi.Model.Types.Primitive.U32> AvgWeight();
    IQuery<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.I32, global::Substrate.NetApi.Model.Types.Primitive.I32>> Position();
}

public sealed partial class Dog : IDog
{
    private const string ROUTE = nameof(Dog);
    private readonly IRemoting remoting;
    public Dog(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    /// <inheritdoc/>
    public ICall<global::Substrate.NetApi.Model.Types.Primitive.Str> MakeSound()
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Primitive.Str>(this.remoting, ROUTE, nameof(MakeSound));
    }

    /// <inheritdoc/>
    public ICall<global::Substrate.NetApi.Model.Types.Base.BaseVoid> Walk(global::Substrate.NetApi.Model.Types.Primitive.I32 dx, global::Substrate.NetApi.Model.Types.Primitive.I32 dy)
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(this.remoting, ROUTE, nameof(Walk), dx, dy);
    }

    /// <inheritdoc/>
    public IQuery<global::Substrate.NetApi.Model.Types.Primitive.U32> AvgWeight()
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Primitive.U32>(this.remoting, ROUTE, nameof(AvgWeight));
    }

    /// <inheritdoc/>
    public IQuery<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.I32, global::Substrate.NetApi.Model.Types.Primitive.I32>> Position()
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.I32, global::Substrate.NetApi.Model.Types.Primitive.I32>>(this.remoting, ROUTE, nameof(Position));
    }
}

public enum DogEvents
{
    Barked,
    Walked,
}

public sealed partial class EnumDogEvents : global::Substrate.NetApi.Model.Types.Base.BaseEnumRust<DogEvents>
{
    public EnumDogEvents()
    {
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(DogEvents.Barked);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.I32, global::Substrate.NetApi.Model.Types.Primitive.I32>, global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.I32, global::Substrate.NetApi.Model.Types.Primitive.I32>>>(DogEvents.Walked);
    }
}

public sealed partial class DogListener
{
    private const string ROUTE = "Dog";
    private static readonly string[] EventRoutes = ["Barked", "Walked", ];
    private readonly IRemoting remoting;
    public DogListener(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    public async Task<IAsyncEnumerable<(global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId, EnumDogEvents)>> ListenAsync(CancellationToken cancellationToken = default)
    {
        var eventStream = await this.remoting.ListenAsync(cancellationToken);
        return eventStream.SelectEvent<EnumDogEvents>(ROUTE, EventRoutes);
    }
}

public interface IPingPong
{
    ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.NetApi.Model.Types.Primitive.Str>> Ping(global::Substrate.NetApi.Model.Types.Primitive.Str input);
}

public sealed partial class PingPong : IPingPong
{
    private const string ROUTE = nameof(PingPong);
    private readonly IRemoting remoting;
    public PingPong(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    /// <inheritdoc/>
    public ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.NetApi.Model.Types.Primitive.Str>> Ping(global::Substrate.NetApi.Model.Types.Primitive.Str input)
    {
        return new RemotingAction<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.NetApi.Model.Types.Primitive.Str>>(this.remoting, ROUTE, nameof(Ping), input);
    }
}

public interface IReferences
{
    ICall<global::Substrate.NetApi.Model.Types.Primitive.U32> Add(global::Substrate.NetApi.Model.Types.Primitive.U32 v);
    ICall<global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.NetApi.Model.Types.Primitive.U8>> AddByte(global::Substrate.NetApi.Model.Types.Primitive.U8 @byte);
    ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.NetApi.Model.Types.Primitive.Str>> GuessNum(global::Substrate.NetApi.Model.Types.Primitive.U8 number);
    ICall<ReferenceCount> Incr();
    ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseVoid, global::Substrate.NetApi.Model.Types.Primitive.Str>> SetNum(global::Substrate.NetApi.Model.Types.Primitive.U8 number);
    IQuery<global::Substrate.NetApi.Model.Types.Primitive.Str> Baked();
    IQuery<global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.U8>> LastByte();
    IQuery<global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.Str>> Message();
}

public sealed partial class References : IReferences
{
    private const string ROUTE = nameof(References);
    private readonly IRemoting remoting;
    public References(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    /// <inheritdoc/>
    public ICall<global::Substrate.NetApi.Model.Types.Primitive.U32> Add(global::Substrate.NetApi.Model.Types.Primitive.U32 v)
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Primitive.U32>(this.remoting, ROUTE, nameof(Add), v);
    }

    /// <inheritdoc/>
    public ICall<global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.NetApi.Model.Types.Primitive.U8>> AddByte(global::Substrate.NetApi.Model.Types.Primitive.U8 @byte)
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.NetApi.Model.Types.Primitive.U8>>(this.remoting, ROUTE, nameof(AddByte), @byte);
    }

    /// <inheritdoc/>
    public ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.NetApi.Model.Types.Primitive.Str>> GuessNum(global::Substrate.NetApi.Model.Types.Primitive.U8 number)
    {
        return new RemotingAction<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.NetApi.Model.Types.Primitive.Str>>(this.remoting, ROUTE, nameof(GuessNum), number);
    }

    /// <inheritdoc/>
    public ICall<ReferenceCount> Incr()
    {
        return new RemotingAction<ReferenceCount>(this.remoting, ROUTE, nameof(Incr));
    }

    /// <inheritdoc/>
    public ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseVoid, global::Substrate.NetApi.Model.Types.Primitive.Str>> SetNum(global::Substrate.NetApi.Model.Types.Primitive.U8 number)
    {
        return new RemotingAction<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseVoid, global::Substrate.NetApi.Model.Types.Primitive.Str>>(this.remoting, ROUTE, nameof(SetNum), number);
    }

    /// <inheritdoc/>
    public IQuery<global::Substrate.NetApi.Model.Types.Primitive.Str> Baked()
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Primitive.Str>(this.remoting, ROUTE, nameof(Baked));
    }

    /// <inheritdoc/>
    public IQuery<global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.U8>> LastByte()
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.U8>>(this.remoting, ROUTE, nameof(LastByte));
    }

    /// <inheritdoc/>
    public IQuery<global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.Str>> Message()
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.Str>>(this.remoting, ROUTE, nameof(Message));
    }
}

public interface IThisThat
{
    ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId, global::Substrate.Gear.Api.Generated.Types.Base.NonZeroU32>, global::Substrate.NetApi.Model.Types.Primitive.Str>> DoThat(DoThatParam param);
    ICall<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.NetApi.Model.Types.Primitive.U32>> DoThis(global::Substrate.NetApi.Model.Types.Primitive.U32 p1, global::Substrate.NetApi.Model.Types.Primitive.Str p2, global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.H160>, global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU8> p3, TupleStruct p4);
    ICall<global::Substrate.NetApi.Model.Types.Base.BaseVoid> Noop();
    IQuery<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.NetApi.Model.Types.Primitive.Str>> That();
    IQuery<global::Substrate.NetApi.Model.Types.Primitive.U32> This();
}

public sealed partial class ThisThat : IThisThat
{
    private const string ROUTE = nameof(ThisThat);
    private readonly IRemoting remoting;
    public ThisThat(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    /// <inheritdoc/>
    public ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId, global::Substrate.Gear.Api.Generated.Types.Base.NonZeroU32>, global::Substrate.NetApi.Model.Types.Primitive.Str>> DoThat(DoThatParam param)
    {
        return new RemotingAction<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId, global::Substrate.Gear.Api.Generated.Types.Base.NonZeroU32>, global::Substrate.NetApi.Model.Types.Primitive.Str>>(this.remoting, ROUTE, nameof(DoThat), param);
    }

    /// <inheritdoc/>
    public ICall<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.NetApi.Model.Types.Primitive.U32>> DoThis(global::Substrate.NetApi.Model.Types.Primitive.U32 p1, global::Substrate.NetApi.Model.Types.Primitive.Str p2, global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.H160>, global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU8> p3, TupleStruct p4)
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.NetApi.Model.Types.Primitive.U32>>(this.remoting, ROUTE, nameof(DoThis), p1, p2, p3, p4);
    }

    /// <inheritdoc/>
    public ICall<global::Substrate.NetApi.Model.Types.Base.BaseVoid> Noop()
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(this.remoting, ROUTE, nameof(Noop));
    }

    /// <inheritdoc/>
    public IQuery<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.NetApi.Model.Types.Primitive.Str>> That()
    {
        return new RemotingAction<global::Substrate.Gear.Client.NetApi.Model.Types.Base.BaseResult<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.NetApi.Model.Types.Primitive.Str>>(this.remoting, ROUTE, nameof(That));
    }

    /// <inheritdoc/>
    public IQuery<global::Substrate.NetApi.Model.Types.Primitive.U32> This()
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Primitive.U32>(this.remoting, ROUTE, nameof(This));
    }
}

public interface IValueFee
{
    ICall<global::Substrate.NetApi.Model.Types.Primitive.Bool> DoSomethingAndTakeFee();
}

public sealed partial class ValueFee : IValueFee
{
    private const string ROUTE = nameof(ValueFee);
    private readonly IRemoting remoting;
    public ValueFee(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    /// <inheritdoc/>
    public ICall<global::Substrate.NetApi.Model.Types.Primitive.Bool> DoSomethingAndTakeFee()
    {
        return new RemotingAction<global::Substrate.NetApi.Model.Types.Primitive.Bool>(this.remoting, ROUTE, nameof(DoSomethingAndTakeFee));
    }
}

public enum ValueFeeEvents
{
    Withheld,
}

public sealed partial class EnumValueFeeEvents : global::Substrate.NetApi.Model.Types.Base.BaseEnumRust<ValueFeeEvents>
{
    public EnumValueFeeEvents()
    {
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Primitive.U128>(ValueFeeEvents.Withheld);
    }
}

public sealed partial class ValueFeeListener
{
    private const string ROUTE = "ValueFee";
    private static readonly string[] EventRoutes = ["Withheld", ];
    private readonly IRemoting remoting;
    public ValueFeeListener(IRemoting remoting)
    {
        this.remoting = remoting;
    }

    public async Task<IAsyncEnumerable<(global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId, EnumValueFeeEvents)>> ListenAsync(CancellationToken cancellationToken = default)
    {
        var eventStream = await this.remoting.ListenAsync(cancellationToken);
        return eventStream.SelectEvent<EnumValueFeeEvents>(ROUTE, EventRoutes);
    }
}

public sealed partial class ReferenceCount : global::Substrate.NetApi.Model.Types.Base.BaseType
{
    public global::Substrate.NetApi.Model.Types.Primitive.U32 Value { get; init; } = new();

    /// <inheritdoc/>
    public override string TypeName() => "ReferenceCount";
    /// <inheritdoc/>
    public override byte[] Encode()
    {
        var result = new List<byte>();
        result.AddRange(this.Value.Encode());
        return result.ToArray();
    }

    /// <inheritdoc/>
    public override void Decode(byte[] byteArray, ref int p)
    {
        var start = p;
        this.Value.Decode(byteArray, ref p);
        var bytesLength = p - start;
        this.TypeSize = bytesLength;
        this.Bytes = new byte[bytesLength];
        Array.Copy(byteArray, start, this.Bytes, 0, bytesLength);
    }
}

public sealed partial class DoThatParam : global::Substrate.NetApi.Model.Types.Base.BaseType
{
    public global::Substrate.Gear.Api.Generated.Types.Base.NonZeroU32 P1 { get; init; } = new();
    public global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId P2 { get; init; } = new();
    public EnumManyVariants P3 { get; init; } = new();

    /// <inheritdoc/>
    public override string TypeName() => "DoThatParam";
    /// <inheritdoc/>
    public override byte[] Encode()
    {
        var result = new List<byte>();
        result.AddRange(this.P1.Encode());
        result.AddRange(this.P2.Encode());
        result.AddRange(this.P3.Encode());
        return result.ToArray();
    }

    /// <inheritdoc/>
    public override void Decode(byte[] byteArray, ref int p)
    {
        var start = p;
        this.P1.Decode(byteArray, ref p);
        this.P2.Decode(byteArray, ref p);
        this.P3.Decode(byteArray, ref p);
        var bytesLength = p - start;
        this.TypeSize = bytesLength;
        this.Bytes = new byte[bytesLength];
        Array.Copy(byteArray, start, this.Bytes, 0, bytesLength);
    }
}

public enum ManyVariants
{
    One,
    Two,
    Three,
    Four,
    Five,
    Six,
}

public sealed partial class EnumManyVariants : global::Substrate.NetApi.Model.Types.Base.BaseEnumRust<ManyVariants>
{
    public EnumManyVariants()
    {
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(ManyVariants.One);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Primitive.U32>(ManyVariants.Two);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.U256>>(ManyVariants.Three);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.U32, global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Primitive.U16>>>(ManyVariants.Four);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.Str, global::Substrate.Gear.Api.Generated.Model.primitive_types.H256>>(ManyVariants.Five);
        this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Primitive.U32>(ManyVariants.Six);
    }
}

public sealed partial class TupleStruct : global::Substrate.NetApi.Model.Types.Base.BaseType
{
    public global::Substrate.NetApi.Model.Types.Primitive.Bool Value { get; init; } = new();

    /// <inheritdoc/>
    public override string TypeName() => "TupleStruct";
    /// <inheritdoc/>
    public override byte[] Encode()
    {
        var result = new List<byte>();
        result.AddRange(this.Value.Encode());
        return result.ToArray();
    }

    /// <inheritdoc/>
    public override void Decode(byte[] byteArray, ref int p)
    {
        var start = p;
        this.Value.Decode(byteArray, ref p);
        var bytesLength = p - start;
        this.TypeSize = bytesLength;
        this.Bytes = new byte[bytesLength];
        Array.Copy(byteArray, start, this.Bytes, 0, bytesLength);
    }
}
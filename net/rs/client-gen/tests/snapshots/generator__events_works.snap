---
source: client-gen/tests/generator.rs
expression: "gen(idl, \"ServiceWithEvents\")"
---
using global::Sails.Remoting;
using global::Sails.Remoting.Abstractions;
using global::Sails.Remoting.Abstractions.Core;
using global::System;
using global::System.Collections.Generic;

#pragma warning disable RCS0056 // A line is too long

namespace ServiceWithEvents.Client;

public interface IServiceWithEvents
 { ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64> DoThis(global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256 p1, MyParam p2);
 }

 public sealed partial class ServiceWithEvents : IServiceWithEvents
 { private readonly IRemoting remoting;

 public ServiceWithEvents(IRemoting remoting) { this.remoting = remoting; }

/// <inheritdoc/>
 public ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64> DoThis(global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256 p1, MyParam p2) { return new RemotingAction<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64>( this.remoting, [68, 83, 101, 114, 118, 105, 99, 101, 87, 105, 116, 104, 69, 118, 101, 110, 116, 115, 24, 68, 111, 84, 104, 105, 115], new global::Substrate.NetApi.Model.Types.Base.BaseTupleRust(p1, p2) ); } }

public enum ServiceWithEventsEvents { One,
 Two,
 Three,
 Reset,
 }

 public sealed partial class EnumServiceWithEventsEvents : global::Substrate.NetApi.Model.Types.Base.BaseEnumRust<ServiceWithEventsEvents> { public EnumServiceWithEventsEvents() { this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Primitive.U64>(ServiceWithEventsEvents.One);
this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.U8, global::Substrate.NetApi.Model.Types.Primitive.U64>>(ServiceWithEventsEvents.Two);
this.AddTypeDecoder<MyParam>(ServiceWithEventsEvents.Three);
this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(ServiceWithEventsEvents.Reset);
 } }

 public sealed partial class ServiceWithEventsListener : IRemotingListener<EnumServiceWithEventsEvents> { private static readonly byte[][] EventRoutes = [ [68, 83, 101, 114, 118, 105, 99, 101, 87, 105, 116, 104, 69, 118, 101, 110, 116, 115, 12, 79, 110, 101],[68, 83, 101, 114, 118, 105, 99, 101, 87, 105, 116, 104, 69, 118, 101, 110, 116, 115, 12, 84, 119, 111],[68, 83, 101, 114, 118, 105, 99, 101, 87, 105, 116, 104, 69, 118, 101, 110, 116, 115, 20, 84, 104, 114, 101, 101],[68, 83, 101, 114, 118, 105, 99, 101, 87, 105, 116, 104, 69, 118, 101, 110, 116, 115, 20, 82, 101, 115, 101, 116], ];

 private readonly global::Sails.Remoting.Abstractions.Core.IRemotingListener remoting;

 public ServiceWithEventsListener(global::Sails.Remoting.Abstractions.Core.IRemotingListener remoting) { this.remoting = remoting; }

 public async global::System.Collections.Generic.IAsyncEnumerable<EnumServiceWithEventsEvents> ListenAsync([global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default) { await foreach (var bytes in this.remoting.ListenAsync(cancellationToken)) { byte idx = 0; foreach (var route in EventRoutes) { if (route.Length > bytes.Length) { continue; } if (route.AsSpan().SequenceEqual(bytes.AsSpan()[..route.Length])) { var bytesLength = bytes.Length - route.Length + 1; var data = new byte[bytesLength]; data[0] = idx; Buffer.BlockCopy(bytes, route.Length, data, 1, bytes.Length - route.Length); var p = 0; EnumServiceWithEventsEvents ev = new(); ev.Decode(bytes, ref p); yield return ev; } idx++; } } } }

public sealed partial class MyParam : global::Substrate.NetApi.Model.Types.Base.BaseType {
[System.Diagnostics.CodeAnalysis.AllowNull]
 public global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256 F1 { get; set; }
[System.Diagnostics.CodeAnalysis.AllowNull]
 public global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU8> F2 { get; set; }
[System.Diagnostics.CodeAnalysis.AllowNull]
 public global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64, global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256>> F3 { get; set; }
/// <inheritdoc/>
 public override string TypeName() => "MyParam";
/// <inheritdoc/>
 public override byte[] Encode() { var result = new List<byte>(); result.AddRange(this.F1.Encode());
result.AddRange(this.F2.Encode());
result.AddRange(this.F3.Encode());
 return result.ToArray(); }
/// <inheritdoc/>
 public override void Decode(byte[] byteArray, ref int p) { var start = p; this.F1 = new global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256();
 this.F1.Decode(byteArray, ref p);
this.F2 = new global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU8>();
 this.F2.Decode(byteArray, ref p);
this.F3 = new global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64, global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256>>();
 this.F3.Decode(byteArray, ref p);
 var bytesLength = p - start; this.TypeSize = bytesLength; this.Bytes = new byte[bytesLength]; Array.Copy(byteArray, start, this.Bytes, 0, bytesLength); } }

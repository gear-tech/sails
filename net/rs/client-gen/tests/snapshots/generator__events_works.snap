---
source: client-gen/tests/generator.rs
expression: "gen(idl, \"ServiceWithEvents\")"
---
// <auto-generated />
using global::Sails.Remoting;
using global::Sails.Remoting.Abstractions;
using global::Sails.Remoting.Abstractions.Core;
using global::System;
using global::System.Collections.Generic;
using global::System.Threading;
using global::System.Threading.Tasks;

#nullable enable

#pragma warning disable RCS0056 // A line is too long

namespace ServiceWithEvents.Client;

public interface IServiceWithEvents
 { ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64> DoThis(global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256 p1, MyParam p2);
 }

 public sealed partial class ServiceWithEvents : IServiceWithEvents
 {

 private const string ROUTE = nameof(ServiceWithEvents);

 private readonly IRemoting remoting;

 public ServiceWithEvents(IRemoting remoting) { this.remoting = remoting; }

/// <inheritdoc/>
 public ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64> DoThis(global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256 p1, MyParam p2) { return new RemotingAction<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64>(this.remoting, ROUTE, nameof(DoThis) , p1, p2); } }

public enum ServiceWithEventsEvents { One,
 Two,
 Three,
 Reset,
 }

 public sealed partial class EnumServiceWithEventsEvents : global::Substrate.NetApi.Model.Types.Base.BaseEnumRust<ServiceWithEventsEvents> { public EnumServiceWithEventsEvents() { this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Primitive.U64>(ServiceWithEventsEvents.One);
this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.NetApi.Model.Types.Primitive.U8, global::Substrate.NetApi.Model.Types.Primitive.U64>>(ServiceWithEventsEvents.Two);
this.AddTypeDecoder<MyParam>(ServiceWithEventsEvents.Three);
this.AddTypeDecoder<global::Substrate.NetApi.Model.Types.Base.BaseVoid>(ServiceWithEventsEvents.Reset);
 } }

 public sealed partial class ServiceWithEventsListener {

 private const string ROUTE = "ServiceWithEvents";

 private static readonly string[] EventRoutes = [ "One","Two","Three","Reset", ];

 private readonly IRemoting remoting;

 public ServiceWithEventsListener(IRemoting remoting) { this.remoting = remoting; }

 public async Task<IAsyncEnumerable<(global::Substrate.Gear.Api.Generated.Model.gprimitives.ActorId, EnumServiceWithEventsEvents)>> ListenAsync(CancellationToken cancellationToken = default) {
 var eventStream = await this.remoting.ListenAsync(cancellationToken);
 return eventStream.SelectEvent<EnumServiceWithEventsEvents>(ROUTE, EventRoutes);
 } }

public sealed partial class MyParam : global::Substrate.NetApi.Model.Types.Base.BaseType {
public global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256 F1 { get; init; } = new();
public global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU8> F2 { get; init; } = new();
public global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64, global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256>> F3 { get; init; } = new();
/// <inheritdoc/>
 public override string TypeName() => "MyParam";
/// <inheritdoc/>
 public override byte[] Encode() { var result = new List<byte>();
 result.AddRange(this.F1.Encode());
result.AddRange(this.F2.Encode());
result.AddRange(this.F3.Encode());
 return result.ToArray();
 }
/// <inheritdoc/>
 public override void Decode(byte[] byteArray, ref int p) { var start = p;
 this.F1.Decode(byteArray, ref p);
this.F2.Decode(byteArray, ref p);
this.F3.Decode(byteArray, ref p);
 var bytesLength = p - start; this.TypeSize = bytesLength; this.Bytes = new byte[bytesLength]; Array.Copy(byteArray, start, this.Bytes, 0, bytesLength); } }

---
source: client-gen/tests/generator.rs
expression: "gen(idl, \"NonZeroParams\")"
---
using global::Sails.Remoting;
using global::Sails.Remoting.Abstractions;
using global::Sails.Remoting.Abstractions.Core;
using global::System;
using global::System.Collections.Generic;

#nullable disable

#pragma warning disable RCS0056 // A line is too long

namespace NonZeroParams.Client;

public interface INonZeroParams
 { ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64> DoThis(global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256 p1, MyParam p2);
 }

 public sealed partial class NonZeroParams : INonZeroParams
 { private readonly IRemoting remoting;

 public NonZeroParams(IRemoting remoting) { this.remoting = remoting; }

/// <inheritdoc/>
 public ICall<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64> DoThis(global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256 p1, MyParam p2) { return new RemotingAction<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64>(this.remoting, [52, 78, 111, 110, 90, 101, 114, 111, 80, 97, 114, 97, 109, 115, 24, 68, 111, 84, 104, 105, 115], p1, p2); } }

public sealed partial class MyParam : global::Substrate.NetApi.Model.Types.Base.BaseType {
public global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256 F1 { get; set; }
public global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU8> F2 { get; set; }
public global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64, global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256>> F3 { get; set; }
/// <inheritdoc/>
 public override string TypeName() => "MyParam";
/// <inheritdoc/>
 public override byte[] Encode() { var result = new List<byte>(); result.AddRange(this.F1.Encode());
result.AddRange(this.F2.Encode());
result.AddRange(this.F3.Encode());
 return result.ToArray(); }
/// <inheritdoc/>
 public override void Decode(byte[] byteArray, ref int p) { var start = p; this.F1 = new global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256();
 this.F1.Decode(byteArray, ref p);
this.F2 = new global::Substrate.NetApi.Model.Types.Base.BaseVec<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU8>();
 this.F2.Decode(byteArray, ref p);
this.F3 = new global::Substrate.NetApi.Model.Types.Base.BaseOpt<global::Substrate.NetApi.Model.Types.Base.BaseTuple<global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU64, global::Substrate.Gear.Client.NetApi.Model.Types.Primitive.NonZeroU256>>();
 this.F3.Decode(byteArray, ref p);
 var bytesLength = p - start; this.TypeSize = bytesLength; this.Bytes = new byte[bytesLength]; Array.Copy(byteArray, start, this.Bytes, 0, bytesLength); } }

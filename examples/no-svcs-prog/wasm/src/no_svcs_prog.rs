// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    String,
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
};
pub struct NoSvcsProgFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> NoSvcsProgFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::NoSvcsProgFactory for NoSvcsProgFactory<R> {
    type Args = R::Args;
    fn create(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, no_svcs_prog_factory::io::Create>::new(self.remoting.clone(), ())
    }
}

pub mod no_svcs_prog_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct Create(());
        impl Create {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Create as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Create {
            const IS_ACTIVATION: bool = true;
            const ROUTE: &'static [u8] = &[24, 67, 114, 101, 97, 116, 101];
            type Params = ();
            type Reply = ();
        }
    }
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait NoSvcsProgFactory {
        type Args;
        fn create(&self) -> impl Activation<Args = Self::Args>;
    }
}

//include!(concat!(env!("OUT_DIR"), "/this_that_svc_client.rs"));
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};

#[derive(Clone)]
pub struct ThisThatSvc<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}

impl<A: Default, R: Remoting<A>> ThisThatSvc<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}

impl<R, A> traits::ThisThatSvc<R, A> for ThisThatSvc<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn do_that(&mut self, param: DoThatParam) -> impl Call<A, Result<(String, u32), (String,)>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 68, 111, 84, 104, 97, 116],
            param,
        )
    }
    fn do_this(
        &mut self,
        p1: u32,
        p2: String,
        p3: (Option<String>, u8),
        p4: TupleStruct,
    ) -> impl Call<A, (String, u32)> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 68, 111, 84, 104, 105, 115],
            (p1, p2, p3, p4),
        )
    }
    fn noop(&mut self) -> impl Call<A, ()> {
        RemotingAction::new(self.remoting.clone(), &[16, 78, 111, 111, 112], ())
    }
    fn that(&self) -> impl Query<A, Result<String, String>> {
        RemotingAction::new(self.remoting.clone(), &[16, 84, 104, 97, 116], ())
    }
    fn this(&self) -> impl Query<A, u32> {
        RemotingAction::new(self.remoting.clone(), &[16, 84, 104, 105, 115], ())
    }
}

#[derive(Default)]
pub struct ThisThatSvcCallBuilder;

impl ThisThatSvcCallBuilder {
    #[allow(unused)]
    pub fn do_that(param: DoThatParam) -> Vec<u8> {
        let args = param;
        let mut result = Vec::with_capacity(7 + args.encoded_size());
        result.extend_from_slice(&[]);
        result.extend_from_slice(&[24, 68, 111, 84, 104, 97, 116]);
        args.encode_to(&mut result);
        result
    }
    #[allow(unused)]
    pub fn do_this(p1: u32, p2: String, p3: (Option<String>, u8), p4: TupleStruct) -> Vec<u8> {
        let args = (p1, p2, p3, p4);
        let mut result = Vec::with_capacity(7 + args.encoded_size());
        result.extend_from_slice(&[]);
        result.extend_from_slice(&[24, 68, 111, 84, 104, 105, 115]);
        args.encode_to(&mut result);
        result
    }
    #[allow(unused)]
    pub fn noop() -> Vec<u8> {
        let args = ();
        let mut result = Vec::with_capacity(5 + args.encoded_size());
        result.extend_from_slice(&[]);
        result.extend_from_slice(&[16, 78, 111, 111, 112]);
        args.encode_to(&mut result);
        result
    }
    #[allow(unused)]
    pub fn that() -> Vec<u8> {
        let args = ();
        let mut result = Vec::with_capacity(5 + args.encoded_size());
        result.extend_from_slice(&[]);
        result.extend_from_slice(&[16, 84, 104, 97, 116]);
        args.encode_to(&mut result);
        result
    }
    #[allow(unused)]
    pub fn this() -> Vec<u8> {
        let args = ();
        let mut result = Vec::with_capacity(5 + args.encoded_size());
        result.extend_from_slice(&[]);
        result.extend_from_slice(&[16, 84, 104, 105, 115]);
        args.encode_to(&mut result);
        result
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub struct DoThatParam {
    pub p1: u32,
    pub p2: String,
    pub p3: ManyVariants,
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub enum ManyVariants {
    One,
    Two(u32),
    Three(Option<U256>),
    Four { a: u32, b: Option<u16> },
    Five((String, H256)),
    Six((u32,)),
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub struct TupleStruct(pub bool);
pub mod traits {
    use sails_rtl::calls::Query;

    use super::*;
    pub trait ThisThatSvc<R, TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn do_that(
            &mut self,
            param: DoThatParam,
        ) -> impl Call<TCallArgs, Result<(String, u32), (String,)>>;
        #[allow(clippy::type_complexity)]
        fn do_this(
            &mut self,
            p1: u32,
            p2: String,
            p3: (Option<String>, u8),
            p4: TupleStruct,
        ) -> impl Call<TCallArgs, (String, u32)>;
        #[allow(clippy::type_complexity)]
        fn noop(&mut self) -> impl Call<TCallArgs, ()>;
        #[allow(clippy::type_complexity)]
        fn that(&self) -> impl Query<TCallArgs, Result<String, String>>;
        #[allow(clippy::type_complexity)]
        fn this(&self) -> impl Query<TCallArgs, u32>;
    }
}

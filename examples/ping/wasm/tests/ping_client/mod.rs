// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
use parity_scale_codec::{Decode, Encode};
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct PingFactory;
impl PingFactory {
    #[allow(unused)]
    pub fn new() -> Self {
        Self
    }
}
impl<A: Default> traits::PingFactory<A> for PingFactory {
    fn new(remoting: impl Remoting<A>) -> impl Activation<A> {
        RemotingAction::new(remoting, &[12, 78, 101, 119], ())
    }
}

#[derive(Clone)]
pub struct Ping<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}

impl<A: Default, R: Remoting<A>> Ping<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}

impl<R, A> traits::Ping<R, A> for Ping<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn ping(&mut self, input: String) -> impl Call<A, Result<String, String>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[16, 80, 105, 110, 103, 16, 80, 105, 110, 103],
            input,
        )
    }
}

#[derive(Default)]
pub struct PingCallBuilder;

impl PingCallBuilder {
    #[allow(unused)]
    pub fn ping(input: String) -> Vec<u8> {
        let args = input;
        let mut result = Vec::with_capacity(10 + args.encoded_size());
        result.extend_from_slice(&[16, 80, 105, 110, 103]);
        result.extend_from_slice(&[16, 80, 105, 110, 103]);
        args.encode_to(&mut result);
        result
    }
}
pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait PingFactory<A: Default> {
        #[allow(clippy::new_ret_no_self)]
        fn new(remoting: impl Remoting<A>) -> impl Activation<A>;
    }
    pub trait Ping<R, TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn ping(&mut self, input: String) -> impl Call<TCallArgs, Result<String, String>>;
    }
}

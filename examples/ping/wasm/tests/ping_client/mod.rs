// include!(concat!(env!("OUT_DIR"), "/ping_client.rs"));
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
use sails_rtl::event_listener::{EventSubscriber, RemotingSubscribe, Subscribe};
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
#[derive(Clone)]
pub struct PingFactory<R: Remoting<A> + Clone, A: Default> {
    remoting: R,
    _phantom: PhantomData<A>,
}

impl<R: Remoting<A> + Clone, A: Default> PingFactory<R, A> {
    pub fn new(remoting: &R) -> Self {
        Self {
            remoting: remoting.clone(),
            _phantom: PhantomData,
        }
    }
}

impl<R: Remoting<A> + Clone, A: Default> traits::PingFactory<A> for PingFactory<R, A> {
    fn new(&mut self) -> impl Activation<A> {
        RemotingAction::new(self.remoting.clone(), &[12, 78, 101, 119], ())
    }
}

#[derive(Clone)]
pub struct Ping<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}

impl<A: Default, R: Remoting<A> + Clone> Ping<R, A> {
    pub fn new(remoting: &R) -> Self {
        Self {
            remoting: remoting.clone(),
            _phantom: PhantomData,
        }
    }
}

impl<R, A> traits::Ping<A> for Ping<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn ping(&mut self, input: String) -> impl Call<A, Result<String, String>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[16, 80, 105, 110, 103, 16, 80, 105, 110, 103],
            input,
        )
    }
}

#[derive(Clone)]
pub struct PingListener<R, A>
where
    R: Remoting<A> + Clone + EventSubscriber,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}

impl<A: Default, R: Remoting<A> + Clone + EventSubscriber> PingListener<R, A> {
    pub fn new(remoting: &R) -> Self {
        Self {
            remoting: remoting.clone(),
            _phantom: PhantomData,
        }
    }
}

impl<R, A> traits::PingListener for PingListener<R, A>
where
    R: Remoting<A> + Clone + EventSubscriber,
    A: Default,
{
    fn listener(self) -> impl Subscribe<PingEvents> {
        RemotingSubscribe::new(self.remoting, &[16, 80, 105, 110, 103])
    }
}

#[derive(Debug, Encode, Decode, TypeInfo, PartialEq)]
#[codec(crate = sails_rtl::scale_codec)]
pub enum PingEvents {
    Ping,
    Pong,
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait PingFactory<TArgs> {
        #[allow(clippy::new_ret_no_self)]
        fn new(&mut self) -> impl Activation<TArgs>;
    }

    pub trait Ping<TArgs> {
        #[allow(clippy::type_complexity)]
        fn ping(&mut self, input: String) -> impl Call<TArgs, Result<String, String>>;
    }

    #[allow(async_fn_in_trait)]
    pub trait PingListener {
        fn listener(self) -> impl Subscribe<PingEvents>;
    }
}

// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct RedirectFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> RedirectFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::RedirectFactory for RedirectFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, redirect_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod redirect_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct Redirect<R> {
    remoting: R,
}
impl<R> Redirect<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Redirect for Redirect<R> {
    type Args = R::Args;
    fn exit(&mut self, inheritor_id: ActorId) -> impl Call<Output = (), Args = R::Args> {
        RemotingAction::<_, redirect::io::Exit>::new(self.remoting.clone(), inheritor_id)
    }
    fn get_program_id(&self) -> impl Query<Output = ActorId, Args = R::Args> {
        RemotingAction::<_, redirect::io::GetProgramId>::new(self.remoting.clone(), ())
    }
}

pub mod redirect {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct Exit(());
        impl Exit {
            #[allow(dead_code)]
            pub fn encode_call(inheritor_id: ActorId) -> Vec<u8> {
                <Exit as ActionIo>::encode_call(&inheritor_id)
            }
        }
        impl ActionIo for Exit {
            const ROUTE: &'static [u8] = &[
                32, 82, 101, 100, 105, 114, 101, 99, 116, 16, 69, 120, 105, 116,
            ];
            type Params = ActorId;
            type Reply = ();
        }
        pub struct GetProgramId(());
        impl GetProgramId {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <GetProgramId as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for GetProgramId {
            const ROUTE: &'static [u8] = &[
                32, 82, 101, 100, 105, 114, 101, 99, 116, 48, 71, 101, 116, 80, 114, 111, 103, 114,
                97, 109, 73, 100,
            ];
            type Params = ();
            type Reply = ActorId;
        }
    }
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait RedirectFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait Redirect {
        type Args;
        fn exit(&mut self, inheritor_id: ActorId) -> impl Call<Output = (), Args = Self::Args>;
        fn get_program_id(&self) -> impl Query<Output = ActorId, Args = Self::Args>;
    }
}

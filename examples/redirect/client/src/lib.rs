#![no_std]

use sails_rs::{
    calls::{CallAction, CallFuture, Deploy, DeployAction, Program, RemotingMessage},
    errors::Result,
};
// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    String,
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
};

impl<R: Remoting> traits::RedirectClientFactory for R {
    type Remoting = R;

    fn new(&self) -> impl Deploy<Redirect<R>> {
        DeployAction::<redirect_client_factory::io::New, Redirect<R>>::new(self.clone(), ())
    }
}

pub mod redirect_client_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct Redirect<R> {
    remoting: R,
    program_id: ActorId,
}
impl<R> Redirect<R> {
    pub fn new(remoting: R, program_id: ActorId) -> Self {
        Self {
            remoting,
            program_id,
        }
    }
}

impl<R: Remoting> Program for Redirect<R> {
    type Remoting = R;

    fn program_id(&self) -> ActorId {
        self.program_id
    }

    fn new(remoting: R, program_id: ActorId) -> Self {
        Self {
            remoting,
            program_id,
        }
    }
}

impl<R: Remoting> traits::Redirect for Redirect<R> {
    type Remoting = R;
    /// Exit from program with inheritor ID
    fn exit(&mut self, inheritor_id: ActorId) -> impl Call<Output = (), Remoting = R> {
        RemotingAction::<_, redirect::io::Exit>::new(self.remoting.clone(), inheritor_id)
    }
    /// Returns program ID of the current program
    fn get_program_id(&self) -> impl Query<Output = ActorId, Remoting = R> {
        RemotingAction::<_, redirect::io::GetProgramId>::new(self.remoting.clone(), ())
    }
}

impl<R: RemotingMessage> traits::RedirectClient for Redirect<R> {
    type Remoting = R;
    /// Exit from program with inheritor ID
    fn exit(
        &mut self,
        inheritor_id: ActorId,
    ) -> impl CallFuture<Output = Result<()>, Remoting = R> {
        CallAction::<_, redirect::io::Exit>::new(
            self.remoting.clone(),
            self.program_id,
            inheritor_id,
        )
    }
    /// Returns program ID of the current program
    fn get_program_id(&self) -> impl CallFuture<Output = Result<ActorId>, Remoting = R> {
        CallAction::<_, redirect::io::GetProgramId>::new(self.remoting.clone(), self.program_id, ())
    }
}

pub mod redirect {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct Exit(());
        impl Exit {
            #[allow(dead_code)]
            pub fn encode_call(inheritor_id: ActorId) -> Vec<u8> {
                <Exit as ActionIo>::encode_call(&inheritor_id)
            }
        }
        impl ActionIo for Exit {
            const ROUTE: &'static [u8] = &[
                32, 82, 101, 100, 105, 114, 101, 99, 116, 16, 69, 120, 105, 116,
            ];
            type Params = ActorId;
            type Reply = ();
        }
        pub struct GetProgramId(());
        impl GetProgramId {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <GetProgramId as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for GetProgramId {
            const ROUTE: &'static [u8] = &[
                32, 82, 101, 100, 105, 114, 101, 99, 116, 48, 71, 101, 116, 80, 114, 111, 103, 114,
                97, 109, 73, 100,
            ];
            type Params = ();
            type Reply = ActorId;
        }
    }
}

pub mod traits {
    use sails_rs::calls::CallFuture;

    use super::*;
    #[allow(dead_code)]
    pub trait RedirectClientFactory {
        type Remoting: Remoting;
        fn new(&self) -> impl Deploy<super::Redirect<Self::Remoting>>;
    }

    #[allow(clippy::type_complexity)]
    pub trait Redirect {
        type Remoting: Remoting;
        fn exit(
            &mut self,
            inheritor_id: ActorId,
        ) -> impl Call<Output = (), Remoting = Self::Remoting>;
        fn get_program_id(&self) -> impl Query<Output = ActorId, Remoting = Self::Remoting>;
    }

    #[allow(clippy::type_complexity)]
    pub trait RedirectClient {
        type Remoting: RemotingMessage;
        fn exit(
            &mut self,
            inheritor_id: ActorId,
        ) -> impl CallFuture<Output = Result<()>, Remoting = Self::Remoting>;
        fn get_program_id(
            &self,
        ) -> impl CallFuture<Output = Result<ActorId>, Remoting = Self::Remoting>;
    }
}

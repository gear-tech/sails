// Code generated by sails-client-gen. DO NOT EDIT.
#![no_std]

#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct RedirectProxyClientFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> RedirectProxyClientFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::RedirectProxyClientFactory for RedirectProxyClientFactory<R> {
    type Args = R::Args;
    /// Proxy Program's constructor
    fn new(&self, target: ActorId) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, redirect_proxy_client_factory::io::New>::new(
            self.remoting.clone(),
            target,
        )
    }
}

pub mod redirect_proxy_client_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call(target: ActorId) -> Vec<u8> {
                <New as ActionIo>::encode_call(&target)
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ActorId;
            type Reply = ();
        }
    }
}
pub struct Proxy<R> {
    remoting: R,
}
impl<R> Proxy<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Proxy for Proxy<R> {
    type Args = R::Args;
    /// Get program ID of the target program via client
    fn get_program_id(&self) -> impl Query<Output = ActorId, Args = R::Args> {
        RemotingAction::<_, proxy::io::GetProgramId>::new(self.remoting.clone(), ())
    }
}

pub mod proxy {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct GetProgramId(());
        impl GetProgramId {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <GetProgramId as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for GetProgramId {
            const ROUTE: &'static [u8] = &[
                20, 80, 114, 111, 120, 121, 48, 71, 101, 116, 80, 114, 111, 103, 114, 97, 109, 73,
                100,
            ];
            type Params = ();
            type Reply = ActorId;
        }
    }
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait RedirectProxyClientFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self, target: ActorId) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait Proxy {
        type Args;
        fn get_program_id(&self) -> impl Query<Output = ActorId, Args = Self::Args>;
    }
}

// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::{client::*, collections::*, prelude::*};
pub struct RedirectProxyClientProgram;
impl Program for RedirectProxyClientProgram {}
pub trait RedirectProxyClient {
    type Env: GearEnv;
    fn proxy(&self) -> Service<Self::Env, proxy::ProxyImpl>;
}
impl<E: GearEnv> RedirectProxyClient for Actor<E, RedirectProxyClientProgram> {
    type Env = E;
    fn proxy(&self) -> Service<Self::Env, proxy::ProxyImpl> {
        self.service(stringify!(Proxy))
    }
}
pub trait RedirectProxyClientCtors {
    type Env: GearEnv;
    /// Proxy Program's constructor#[allow(clippy::new_ret_no_self)] #[allow(clippy::wrong_self_convention)]
    fn new(self, target: ActorId) -> PendingCtor<Self::Env, RedirectProxyClientProgram, io::New>;
}
impl<E: GearEnv> RedirectProxyClientCtors for Deployment<E, RedirectProxyClientProgram> {
    type Env = E;
    fn new(self, target: ActorId) -> PendingCtor<Self::Env, RedirectProxyClientProgram, io::New> {
        self.pending_ctor((target,))
    }
}

pub mod io {
    use super::*;
    sails_rs::io_struct_impl!(New (target: ActorId) -> ());
}

pub mod proxy {
    use super::*;
    pub trait Proxy {
        type Env: GearEnv;
        /// Get program ID of the target program via client
        fn get_program_id(&self) -> PendingCall<Self::Env, io::GetProgramId>;
    }
    pub struct ProxyImpl;
    impl<E: GearEnv> Proxy for Service<E, ProxyImpl> {
        type Env = E;
        fn get_program_id(&self) -> PendingCall<Self::Env, io::GetProgramId> {
            self.pending_call(())
        }
    }

    pub mod io {
        use super::*;
        sails_rs::io_struct_impl!(GetProgramId () -> ActorId);
    }
}

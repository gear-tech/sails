#![no_std]

use gstd::msg;
use parity_scale_codec::Encode;
use this_that_app::{
    commands::{handlers as c_handlers, Commands},
    queries::{handlers as q_handlers, Queries},
};

// TODO: This function might be generated by some macro like `gprogram`
#[no_mangle]
extern "C" fn handle() {
    let command = msg::load::<Commands>()
        .expect("This needs to be handled in a consistent way: input parse error");
    let (result, is_error) = c_handlers::handle_commands(command);
    let result = result.encode();
    if is_error {
        unsafe {
            gsys::gr_panic(result.as_ptr(), result.len() as u32);
        }
    }
    msg::reply(result, 0).expect("This needs to be handled in a consistent way: reply error");
}

// TODO: This function might be generated by some macro like `gprogram`
#[no_mangle]
extern "C" fn state() {
    let query = msg::load::<Queries>()
        .expect("This needs to be handled in a consistent way: input parse error");
    let (result, _) = q_handlers::handle_queries(query);
    let result = result.encode();
    msg::reply(result, 0).expect("This needs to be handled in a consistent way: reply error");
}

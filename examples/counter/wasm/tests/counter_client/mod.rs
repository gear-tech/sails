// #![allow(dead_code)]
// include!(concat!(env!("OUT_DIR"), "/counter_client.rs"));
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Remoting, RemotingAction},
    event_listener::{EventSubscriber, RemotingSubscribe, Subscribe},
    prelude::*,
    String,
};
#[derive(Default)]
pub struct CounterFactory<R: Remoting<A> + Clone, A: Default> {
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<R: Remoting<A> + Clone, A: Default> CounterFactory<R, A> {
    #[allow(unused)]
    pub fn new(remoting: &R) -> Self {
        Self {
            remoting: remoting.clone(),
            _phantom: PhantomData,
        }
    }
}
impl<R: Remoting<A> + Clone, A: Default> traits::CounterFactory<A> for CounterFactory<R, A> {
    fn with_initial_value(&self, init_value: u64) -> impl Activation<A> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                64, 87, 105, 116, 104, 73, 110, 105, 116, 105, 97, 108, 86, 97, 108, 117, 101,
            ],
            init_value,
        )
    }
}
#[derive(Clone)]
pub struct IncDec<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<A: Default, R: Remoting<A>> IncDec<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R, A> traits::IncDec<R, A> for IncDec<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn dec(&mut self, val: u64) -> impl Call<A, u64> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 73, 110, 99, 68, 101, 99, 12, 68, 101, 99],
            val,
        )
    }
    fn inc(&mut self, val: u64) -> impl Call<A, u64> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 73, 110, 99, 68, 101, 99, 12, 73, 110, 99],
            val,
        )
    }
    fn reset(&mut self) -> impl Call<A, ()> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 73, 110, 99, 68, 101, 99, 20, 82, 101, 115, 101, 116],
            (),
        )
    }
}

#[derive(Clone)]
pub struct IncDecListener<R, A>
where
    R: Remoting<A> + Clone + EventSubscriber,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}

impl<A: Default, R: Remoting<A> + Clone + EventSubscriber> IncDecListener<R, A> {
    pub fn new(remoting: &R) -> Self {
        Self {
            remoting: remoting.clone(),
            _phantom: PhantomData,
        }
    }
}

impl<R, A> traits::IncDecListener for IncDecListener<R, A>
where
    R: Remoting<A> + Clone + EventSubscriber,
    A: Default,
{
    fn listener(self) -> impl Subscribe<inc_dec_events::IncDecEvents> {
        RemotingSubscribe::new(
            self.remoting,
            &[24, 73, 110, 99, 68, 101, 99],
            &[&[12, 73, 110, 99], &[12, 68, 101, 99]],
        )
    }
}

pub mod inc_dec_events {
    use super::*;

    #[derive(PartialEq, Debug, Encode, Decode)]
    #[codec(crate = sails_rtl::scale_codec)]
    pub enum IncDecEvents {
        Inc(u64),
        Dec(u64),
        Reset,
    }

    // #[allow(dead_code)]
    // pub fn decode_event(mut reply: &[u8]) -> Result<IncDecEvents, sails_rtl::errors::Error> {
    //     if !reply.starts_with(&[24, 73, 110, 99, 68, 101, 99]) {
    //         return Err(sails_rtl::errors::Error::Rtl(
    //             sails_rtl::errors::RtlError::ReplyPrefixMismatches,
    //         ));
    //     }
    //     reply = &reply[7..];
    //     let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
    //     Ok(result)
    // }
}

pub mod inc_dec_io {
    use super::*;
    #[derive(Debug, Default, Clone, Copy)]
    pub struct Dec(());
    impl Dec {
        #[allow(dead_code)]
        pub fn encode_call(val: u64) -> Vec<u8> {
            let args = val;
            let mut result = Vec::with_capacity(11 + args.encoded_size());
            result.extend_from_slice(&[24, 73, 110, 99, 68, 101, 99]);
            result.extend_from_slice(&[12, 68, 101, 99]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(mut reply: &[u8]) -> Result<u64, sails_rtl::errors::Error> {
            if !reply.starts_with(&[12, 68, 101, 99]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[4..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
    #[derive(Debug, Default, Clone, Copy)]
    pub struct Inc(());
    impl Inc {
        #[allow(dead_code)]
        pub fn encode_call(val: u64) -> Vec<u8> {
            let args = val;
            let mut result = Vec::with_capacity(11 + args.encoded_size());
            result.extend_from_slice(&[24, 73, 110, 99, 68, 101, 99]);
            result.extend_from_slice(&[12, 73, 110, 99]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(mut reply: &[u8]) -> Result<u64, sails_rtl::errors::Error> {
            if !reply.starts_with(&[12, 73, 110, 99]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[4..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
    #[derive(Debug, Default, Clone, Copy)]
    pub struct Reset(());
    impl Reset {
        #[allow(dead_code)]
        pub fn encode_call() -> Vec<u8> {
            let args = ();
            let mut result = Vec::with_capacity(13 + args.encoded_size());
            result.extend_from_slice(&[24, 73, 110, 99, 68, 101, 99]);
            result.extend_from_slice(&[20, 82, 101, 115, 101, 116]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(mut reply: &[u8]) -> Result<(), sails_rtl::errors::Error> {
            if !reply.starts_with(&[20, 82, 101, 115, 101, 116]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[6..];
            #[allow(clippy::let_unit_value)]
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
}
#[derive(Clone)]
pub struct Query<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<A: Default, R: Remoting<A>> Query<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R, A> traits::Query<R, A> for Query<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn current_value(&self) -> impl Call<A, u64> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                20, 81, 117, 101, 114, 121, 48, 67, 117, 114, 114, 101, 110, 116, 86, 97, 108, 117,
                101,
            ],
            (),
        )
    }
}
pub mod query_io {
    use super::*;
    #[derive(Debug, Default, Clone, Copy)]
    pub struct CurrentValue(());
    impl CurrentValue {
        #[allow(dead_code)]
        pub fn encode_call() -> Vec<u8> {
            let args = ();
            let mut result = Vec::with_capacity(19 + args.encoded_size());
            result.extend_from_slice(&[20, 81, 117, 101, 114, 121]);
            result
                .extend_from_slice(&[48, 67, 117, 114, 114, 101, 110, 116, 86, 97, 108, 117, 101]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(mut reply: &[u8]) -> Result<u64, sails_rtl::errors::Error> {
            if !reply.starts_with(&[48, 67, 117, 114, 114, 101, 110, 116, 86, 97, 108, 117, 101]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[13..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
}
pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait CounterFactory<A: Default> {
        fn with_initial_value(&self, init_value: u64) -> impl Activation<A>;
    }
    pub trait IncDec<R, TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn dec(&mut self, val: u64) -> impl Call<TCallArgs, u64>;
        #[allow(clippy::type_complexity)]
        fn inc(&mut self, val: u64) -> impl Call<TCallArgs, u64>;
        #[allow(clippy::type_complexity)]
        fn reset(&mut self) -> impl Call<TCallArgs, ()>;
    }
    pub trait Query<R, TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn current_value(&self) -> impl Call<TCallArgs, u64>;
    }

    #[allow(async_fn_in_trait)]
    pub trait IncDecListener {
        fn listener(self) -> impl Subscribe<inc_dec_events::IncDecEvents>;
    }
}

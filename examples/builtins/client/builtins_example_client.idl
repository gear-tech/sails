/// `TypeInfo` implementor copy of `gbuiltin_proxy::ProxyType`.
type ProxyType = enum {
  Any,
  NonTransfer,
  Governance,
  Staking,
  IdentityJudgement,
  CancelProxy,
};

/// `TypeInfo` implementor copy of `gbuiltin_staking::RewardAccount`.
type RewardAccount = enum {
  /// Pay rewards to the sender's account and increase the amount at stake.
  Staked,
  /// Pay rewards to the sender's account (usually, the one derived from `program_id`)
  /// without increasing the amount at stake.
  Program,
  /// Pay rewards to a custom account.
  Custom: actor_id,
  /// Opt for not receiving any rewards at all.
  None,
};

/// `TypeInfo` implementor copy of `gbuiltin_bls381::Response`.
type Bls381Response = enum {
  /// Result of the multi Miller loop, encoded: [`ArkScale<Bls12_381::TargetField>`].
  MultiMillerLoop: vec u8,
  /// Result of the final exponentiation, encoded: [`ArkScale<Bls12_381::TargetField>`].
  FinalExponentiation: vec u8,
  /// Result of the multi scalar multiplication, encoded: [`ArkScaleProjective<G1Projective>`].
  MultiScalarMultiplicationG1: vec u8,
  /// Result of the multi scalar multiplication, encoded: [`ArkScaleProjective<G2Projective>`].
  MultiScalarMultiplicationG2: vec u8,
  /// Result of the projective multiplication, encoded: [`ArkScaleProjective<G1Projective>`].
  ProjectiveMultiplicationG1: vec u8,
  /// Result of the projective multiplication, encoded: [`ArkScaleProjective<G2Projective>`].
  ProjectiveMultiplicationG2: vec u8,
  /// Result of the aggregation, encoded: [`ArkScale<G1Projective>`].
  AggregateG1: vec u8,
  /// Result of the mapping, encoded: [`ArkScale<G2Affine>`].
  MapToG2Affine: vec u8,
};

type Response = enum {
  EthMessageQueued: struct {
    nonce: u256,
    hash: h256,
  },
};

constructor {
  New : ();
};

service ProxyBroker {
  AddProxy : (delegate: actor_id, proxy_type: ProxyType) -> result (vec u8, str);
  RemoveProxy : (delegate: actor_id, proxy_type: ProxyType) -> result (vec u8, str);
};

service StakingBroker {
  Bond : (value: u128, payee: RewardAccount) -> result (vec u8, str);
  BondExtra : (value: u128) -> result (vec u8, str);
  Chill : () -> result (vec u8, str);
  Nominate : (targets: vec actor_id) -> result (vec u8, str);
  PayoutStakers : (validator_stash: actor_id, era: u32) -> result (vec u8, str);
  Rebond : (value: u128) -> result (vec u8, str);
  SetPayee : (payee: RewardAccount) -> result (vec u8, str);
  Unbond : (value: u128) -> result (vec u8, str);
  WithdrawUnbonded : (num_slashing_spans: u32) -> result (vec u8, str);
};

service Bls381Broker {
  AggregateG1 : (points: vec u8) -> result (Bls381Response, str);
  FinalExponentiation : (f: vec u8) -> result (Bls381Response, str);
  MapToG2Affine : (message: vec u8) -> result (Bls381Response, str);
  MultiMillerLoop : (a: vec u8, b: vec u8) -> result (Bls381Response, str);
  MultiScalarMultiplicationG1 : (bases: vec u8, scalars: vec u8) -> result (Bls381Response, str);
  MultiScalarMultiplicationG2 : (bases: vec u8, scalars: vec u8) -> result (Bls381Response, str);
  ProjectiveMultiplicationG1 : (base: vec u8, scalar: vec u8) -> result (Bls381Response, str);
  ProjectiveMultiplicationG2 : (base: vec u8, scalar: vec u8) -> result (Bls381Response, str);
};

service EthBridgeBroker {
  SendEthMessage : (destination: h160, payload: vec u8) -> result (Response, str);
};


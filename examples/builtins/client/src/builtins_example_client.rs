// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    String,
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
};
pub struct BuiltinsExampleClientFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> BuiltinsExampleClientFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::BuiltinsExampleClientFactory for BuiltinsExampleClientFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, builtins_example_client_factory::io::New>::new(
            self.remoting.clone(),
            (),
        )
    }
}

pub mod builtins_example_client_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct ProxyBroker<R> {
    remoting: R,
}
impl<R> ProxyBroker<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::ProxyBroker for ProxyBroker<R> {
    type Args = R::Args;
    fn add_proxy(
        &mut self,
        delegate: ActorId,
        proxy_type: ProxyType,
    ) -> impl Call<Output = Vec<u8>, Args = R::Args> {
        RemotingAction::<_, proxy_broker::io::AddProxy>::new(
            self.remoting.clone(),
            (delegate, proxy_type),
        )
    }
}

pub mod proxy_broker {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct AddProxy(());
        impl AddProxy {
            #[allow(dead_code)]
            pub fn encode_call(delegate: ActorId, proxy_type: super::ProxyType) -> Vec<u8> {
                <AddProxy as ActionIo>::encode_call(&(delegate, proxy_type))
            }
        }
        impl ActionIo for AddProxy {
            const ROUTE: &'static [u8] = &[
                44, 80, 114, 111, 120, 121, 66, 114, 111, 107, 101, 114, 32, 65, 100, 100, 80, 114,
                111, 120, 121,
            ];
            type Params = (ActorId, super::ProxyType);
            type Reply = Vec<u8>;
        }
    }
}
/// `TypeInfo` implementor copy of `gbuiltin_proxy::ProxyType`.
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum ProxyType {
    Any,
    NonTransfer,
    Governance,
    Staking,
    IdentityJudgement,
    CancelProxy,
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait BuiltinsExampleClientFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait ProxyBroker {
        type Args;
        fn add_proxy(
            &mut self,
            delegate: ActorId,
            proxy_type: ProxyType,
        ) -> impl Call<Output = Vec<u8>, Args = Self::Args>;
    }
}

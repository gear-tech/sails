// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::{client::*, collections::*, prelude::*};
pub struct PingPongStackProgram;
impl sails_rs::client::Program for PingPongStackProgram {}
pub trait PingPongStack {
    type Env: sails_rs::client::GearEnv;
    fn ping_pong_stack(
        &self,
    ) -> sails_rs::client::Service<Self::Env, ping_pong_stack::PingPongStackImpl>;
}
impl<E: sails_rs::client::GearEnv> PingPongStack
    for sails_rs::client::Actor<E, PingPongStackProgram>
{
    type Env = E;
    fn ping_pong_stack(
        &self,
    ) -> sails_rs::client::Service<Self::Env, ping_pong_stack::PingPongStackImpl> {
        self.service(stringify!(PingPongStack))
    }
}
pub trait PingPongStackCtors {
    type Env: sails_rs::client::GearEnv;
    fn new_for_bench(
        self,
    ) -> sails_rs::client::PendingCtor<Self::Env, PingPongStackProgram, io::NewForBench>;
}
impl<E: sails_rs::client::GearEnv> PingPongStackCtors
    for sails_rs::client::Deployment<E, PingPongStackProgram>
{
    type Env = E;
    fn new_for_bench(
        self,
    ) -> sails_rs::client::PendingCtor<Self::Env, PingPongStackProgram, io::NewForBench> {
        self.pending_ctor(())
    }
}

pub mod io {
    use super::*;
    sails_rs::io_struct_impl!(NewForBench () -> ());
}

pub mod ping_pong_stack {
    use super::*;
    pub trait PingPongStack {
        type Env: sails_rs::client::GearEnv;
        fn start(
            &mut self,
            actor_id: ActorId,
            limit: u32,
        ) -> sails_rs::client::PendingCall<Self::Env, io::Start>;
        fn ping(&mut self, countdown: u32) -> sails_rs::client::PendingCall<Self::Env, io::Ping>;
    }
    pub struct PingPongStackImpl;
    impl<E: sails_rs::client::GearEnv> PingPongStack
        for sails_rs::client::Service<E, PingPongStackImpl>
    {
        type Env = E;
        fn start(
            &mut self,
            actor_id: ActorId,
            limit: u32,
        ) -> sails_rs::client::PendingCall<Self::Env, io::Start> {
            self.pending_call((actor_id, limit))
        }
        fn ping(&mut self, countdown: u32) -> sails_rs::client::PendingCall<Self::Env, io::Ping> {
            self.pending_call((countdown,))
        }
    }

    pub mod io {
        use super::*;
        sails_rs::io_struct_impl!(Start (actor_id: ActorId, limit: u32) -> ());
        sails_rs::io_struct_impl!(Ping (countdown: u32) -> ());
    }
}

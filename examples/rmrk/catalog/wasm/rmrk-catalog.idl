type Part = enum {
  Fixed: FixedPart,
  Slot: SlotPart,
};

type FixedPart = struct {
  z: opt u32,
  metadata_uri: str,
};

type SlotPart = struct {
  equippable: vec ActorId,
  z: opt u32,
  metadata_uri: str,
};

type ActorId = struct {
  [u8, 32],
};

type Error = enum {
  PartIdCantBeZero,
  BadConfig,
  PartAlreadyExists,
  ZeroLengthPassed,
  PartDoesNotExist,
  WrongPartFormat,
  NotAllowedToCall,
};

service {
  AddParts : (parts: map (u32, Part)) -> result (map (u32, Part), Error);
  RemoveParts : (part_ids: vec u32) -> result (vec u32, Error);
  AddEquippables : (part_id: u32, collection_ids: vec ActorId) -> result (struct { u32, vec ActorId }, Error);
  RemoveEquippable : (part_id: u32, collection_id: ActorId) -> result (struct { u32, ActorId }, Error);
  ResetEquippables : (part_id: u32) -> result (null, Error);
  SetEquippablesToAll : (part_id: u32) -> result (null, Error);
  query Part : (part_id: u32) -> opt Part;
  query Equippable : (part_id: u32, collection_id: ActorId) -> result (bool, Error);
}

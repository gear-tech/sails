#![no_std]

use sails_macros::{gprogram, groute};
use sails_rtl::gstd::{
    calls::{GStdArgs, GStdRemoting},
    events::GStdEventTrigger,
    GStdExecContext,
};
use services::{ResourceStorage, ResourceStorageEvent};

mod catalogs;
// Exposed publicly because of tests which use generated data
// while there is no generated client
pub mod services;

type ResourceStorageEventTrigger = GStdEventTrigger<ResourceStorageEvent>;
type RmrkCatalog = catalogs::RmrkCatalog<GStdRemoting, GStdArgs>;

#[derive(Default)]
pub struct Program;

#[gprogram]
impl Program {
    // Initialize program and seed hosted services
    pub fn new() -> Self {
        let exec_context = GStdExecContext::default();
        ResourceStorage::<_, RmrkCatalog, ResourceStorageEventTrigger>::seed(exec_context);
        Self
    }

    // Expose hosted service
    #[groute("RmrkResource")]
    pub fn resource_storage(
        &self,
    ) -> ResourceStorage<GStdExecContext, RmrkCatalog, ResourceStorageEventTrigger> {
        ResourceStorage::new(
            GStdExecContext::default(),
            RmrkCatalog::new(GStdRemoting),
            GStdEventTrigger::new(),
        )
    }

    // Will be generated by the `ginject_defaults` macro from the `new` method
    fn __new(exec_context: GStdExecContext) -> Self {
        ResourceStorage::<_, RmrkCatalog, ResourceStorageEventTrigger>::seed(exec_context);
        Self
    }

    // Will be generated by the `ginject_defaults` macro from the `resource_storage` method
    fn ___resource_storage(
        &self,
        exec_context: GStdExecContext,
        remoting: GStdRemoting,
        event_trigger: ResourceStorageEventTrigger,
    ) -> ResourceStorage<GStdExecContext, RmrkCatalog, ResourceStorageEventTrigger> {
        ResourceStorage::new(exec_context, RmrkCatalog::new(remoting), event_trigger)
    }
}

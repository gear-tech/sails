// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct ClassicFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> ClassicFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::ClassicFactory for ClassicFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, classic_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod classic_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct AsyncService<R> {
    remoting: R,
}
impl<R> AsyncService<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AsyncService for AsyncService<R> {
    type Args = R::Args;
    fn async_method(&self) -> impl Query<Output = String, Args = R::Args> {
        RemotingAction::<_, async_service::io::AsyncMethod>::new(self.remoting.clone(), ())
    }
}

pub mod async_service {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct AsyncMethod(());
        impl AsyncMethod {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <AsyncMethod as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for AsyncMethod {
            const ROUTE: &'static [u8] = &[
                48, 65, 115, 121, 110, 99, 83, 101, 114, 118, 105, 99, 101, 44, 65, 115, 121, 110,
                99, 77, 101, 116, 104, 111, 100,
            ];
            type Params = ();
            type Reply = String;
        }
    }
}
pub struct NoAsyncService<R> {
    remoting: R,
}
impl<R> NoAsyncService<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::NoAsyncService for NoAsyncService<R> {
    type Args = R::Args;
    fn sync_method(&self) -> impl Query<Output = String, Args = R::Args> {
        RemotingAction::<_, no_async_service::io::SyncMethod>::new(self.remoting.clone(), ())
    }
}

pub mod no_async_service {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct SyncMethod(());
        impl SyncMethod {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <SyncMethod as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for SyncMethod {
            const ROUTE: &'static [u8] = &[
                56, 78, 111, 65, 115, 121, 110, 99, 83, 101, 114, 118, 105, 99, 101, 40, 83, 121,
                110, 99, 77, 101, 116, 104, 111, 100,
            ];
            type Params = ();
            type Reply = String;
        }
    }
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait ClassicFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait AsyncService {
        type Args;
        fn async_method(&self) -> impl Query<Output = String, Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait NoAsyncService {
        type Args;
        fn sync_method(&self) -> impl Query<Output = String, Args = Self::Args>;
    }
}

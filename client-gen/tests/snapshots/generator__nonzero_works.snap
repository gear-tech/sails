---
source: client-gen/tests/generator.rs
expression: "gen(idl, \"NonZeroParams\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
#[derive(Clone)]
pub struct NonZeroParams<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<A: Default, R: Remoting<A>> NonZeroParams<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R, A> traits::NonZeroParams<A> for NonZeroParams<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn do_this(&mut self, p1: NonZeroU256, p2: MyParam) -> impl Call<A, NonZeroU64> {
        RemotingAction::new(self.remoting.clone(), non_zero_params::io::DoThis(p1, p2))
    }
}
pub mod non_zero_params {
    use super::*;
    pub mod io {
        use super::*;
        #[derive(Debug, Encode)]
        #[codec(crate = sails_rtl::scale_codec)]
        pub struct DoThis(pub NonZeroU256, pub super::MyParam);
        impl DoThis {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 105, 115];
        }
        impl EncodeWithRoute for DoThis {
            fn route() -> &'static [u8] {
                DoThis::ROUTE
            }
        }
        impl DecodeWithRoute for DoThis {
            type Reply = NonZeroU64;
            fn route() -> &'static [u8] {
                DoThis::ROUTE
            }
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub struct MyParam {
    pub f1: NonZeroU256,
    pub f2: Vec<NonZeroU8>,
    pub f3: Option<(NonZeroU64, NonZeroU256)>,
}
pub mod traits {
    use super::*;
    pub trait NonZeroParams<A> {
        #[allow(clippy::type_complexity)]
        fn do_this(&mut self, p1: NonZeroU256, p2: MyParam) -> impl Call<A, NonZeroU64>;
    }
}

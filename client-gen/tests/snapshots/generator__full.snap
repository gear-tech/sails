---
source: client-gen/tests/generator.rs
expression: "gen(IDL, \"Service\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct ServiceFactory<R, A> {
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<R: Remoting<A>, A> ServiceFactory<R, A> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R: Remoting<A> + Clone, A: Default> traits::ServiceFactory<A> for ServiceFactory<R, A> {
    fn new(&self, a: u32) -> impl Activation<A> {
        RemotingAction::new(self.remoting.clone(), service_factory::io::New(a))
    }
}
pub mod service_factory {
    use super::*;
    pub mod io {
        use super::*;
        #[derive(Debug, Encode)]
        #[codec(crate = sails_rtl::scale_codec)]
        pub struct New(pub u32);
        impl New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
        }
        impl EncodeWithRoute for New {
            fn route() -> &'static [u8] {
                New::ROUTE
            }
        }
        impl DecodeWithRoute for New {
            type Reply = ();
            fn route() -> &'static [u8] {
                New::ROUTE
            }
        }
    }
}
#[derive(Clone)]
pub struct Service<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<A: Default, R: Remoting<A>> Service<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R, A> traits::Service<A> for Service<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn do_this(
        &mut self,
        p1: u32,
        p2: String,
        p3: (Option<String>, u8),
        p4: ThisThatSvcAppTupleStruct,
    ) -> impl Call<A, (String, u32)> {
        RemotingAction::new(self.remoting.clone(), service::io::DoThis(p1, p2, p3, p4))
    }
    fn do_that(
        &mut self,
        param: ThisThatSvcAppDoThatParam,
    ) -> impl Call<A, Result<(String, u32), (String,)>> {
        RemotingAction::new(self.remoting.clone(), service::io::DoThat(param))
    }
    fn this(&self, v1: Vec<u16>) -> impl Query<A, u32> {
        RemotingAction::new(self.remoting.clone(), service::io::This(v1))
    }
    fn that(&self, v1: ()) -> impl Query<A, Result<String, String>> {
        RemotingAction::new(self.remoting.clone(), service::io::That(v1))
    }
}
pub mod service {
    use super::*;
    pub mod io {
        use super::*;
        #[derive(Debug, Encode)]
        #[codec(crate = sails_rtl::scale_codec)]
        pub struct DoThis(
            pub u32,
            pub String,
            pub (Option<String>, u8),
            pub super::ThisThatSvcAppTupleStruct,
        );
        impl DoThis {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 105, 115];
        }
        impl EncodeWithRoute for DoThis {
            fn route() -> &'static [u8] {
                DoThis::ROUTE
            }
        }
        impl DecodeWithRoute for DoThis {
            type Reply = (String, u32);
            fn route() -> &'static [u8] {
                DoThis::ROUTE
            }
        }
        #[derive(Debug, Encode)]
        #[codec(crate = sails_rtl::scale_codec)]
        pub struct DoThat(pub super::ThisThatSvcAppDoThatParam);
        impl DoThat {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 97, 116];
        }
        impl EncodeWithRoute for DoThat {
            fn route() -> &'static [u8] {
                DoThat::ROUTE
            }
        }
        impl DecodeWithRoute for DoThat {
            type Reply = Result<(String, u32), (String,)>;
            fn route() -> &'static [u8] {
                DoThat::ROUTE
            }
        }
        #[derive(Debug, Encode)]
        #[codec(crate = sails_rtl::scale_codec)]
        pub struct This(pub Vec<u16>);
        impl This {
            const ROUTE: &'static [u8] = &[16, 84, 104, 105, 115];
        }
        impl EncodeWithRoute for This {
            fn route() -> &'static [u8] {
                This::ROUTE
            }
        }
        impl DecodeWithRoute for This {
            type Reply = u32;
            fn route() -> &'static [u8] {
                This::ROUTE
            }
        }
        #[derive(Debug, Encode)]
        #[codec(crate = sails_rtl::scale_codec)]
        pub struct That(pub ());
        impl That {
            const ROUTE: &'static [u8] = &[16, 84, 104, 97, 116];
        }
        impl EncodeWithRoute for That {
            fn route() -> &'static [u8] {
                That::ROUTE
            }
        }
        impl DecodeWithRoute for That {
            type Reply = Result<String, String>;
            fn route() -> &'static [u8] {
                That::ROUTE
            }
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub struct ThisThatSvcAppTupleStruct(pub bool);
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub struct ThisThatSvcAppDoThatParam {
    pub p1: u32,
    pub p2: String,
    pub p3: ThisThatSvcAppManyVariants,
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub enum ThisThatSvcAppManyVariants {
    One,
    Two(u32),
    Three(Option<u32>),
    Four { a: u32, b: Option<u16> },
    Five((String, u32)),
    Six((u32,)),
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub enum T {
    One,
}
pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait ServiceFactory<A> {
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self, a: u32) -> impl Activation<A>;
    }
    pub trait Service<A> {
        #[allow(clippy::type_complexity)]
        fn do_this(
            &mut self,
            p1: u32,
            p2: String,
            p3: (Option<String>, u8),
            p4: ThisThatSvcAppTupleStruct,
        ) -> impl Call<A, (String, u32)>;
        #[allow(clippy::type_complexity)]
        fn do_that(
            &mut self,
            param: ThisThatSvcAppDoThatParam,
        ) -> impl Call<A, Result<(String, u32), (String,)>>;
        #[allow(clippy::type_complexity)]
        fn this(&self, v1: Vec<u16>) -> impl Query<A, u32>;
        #[allow(clippy::type_complexity)]
        fn that(&self, v1: ()) -> impl Query<A, Result<String, String>>;
    }
}

---
source: client-gen/tests/generator.rs
expression: "gen(IDL, \"Service\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Remoting, RemotingAction},
    prelude::*,
    String,
};
#[derive(Default)]
pub struct ServiceFactory<R: Remoting<A> + Clone, A: Default> {
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<R: Remoting<A> + Clone, A: Default> ServiceFactory<R, A> {
    #[allow(unused)]
    pub fn new(remoting: &R) -> Self {
        Self {
            remoting: remoting.clone(),
            _phantom: PhantomData,
        }
    }
}
impl<R: Remoting<A> + Clone, A: Default> traits::ServiceFactory<A> for ServiceFactory<R, A> {
    fn new(&self, a: u32) -> impl Activation<A> {
        RemotingAction::new(self.remoting.clone(), &[12, 78, 101, 119], a)
    }
}
#[derive(Clone)]
pub struct Service<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<A: Default, R: Remoting<A>> Service<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R, A> traits::Service<A> for Service<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn do_this(
        &mut self,
        p1: u32,
        p2: String,
        p3: (Option<String>, u8),
        p4: ThisThatSvcAppTupleStruct,
    ) -> impl Call<A, (String, u32)> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 68, 111, 84, 104, 105, 115],
            (p1, p2, p3, p4),
        )
    }
    fn do_that(
        &mut self,
        param: ThisThatSvcAppDoThatParam,
    ) -> impl Call<A, Result<(String, u32), (String,)>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 68, 111, 84, 104, 97, 116],
            param,
        )
    }
    fn this(&self, v1: Vec<u16>) -> impl Call<A, u32> {
        RemotingAction::new(self.remoting.clone(), &[16, 84, 104, 105, 115], v1)
    }
    fn that(&self, v1: ()) -> impl Call<A, Result<String, String>> {
        RemotingAction::new(self.remoting.clone(), &[16, 84, 104, 97, 116], v1)
    }
}
pub mod service_io {
    use super::*;
    #[derive(Debug, Default, Clone, Copy)]
    pub struct DoThis(());
    impl DoThis {
        #[allow(dead_code)]
        pub fn encode_call(
            p1: u32,
            p2: String,
            p3: (Option<String>, u8),
            p4: super::ThisThatSvcAppTupleStruct,
        ) -> Vec<u8> {
            let args = (p1, p2, p3, p4);
            let mut result = Vec::with_capacity(7 + args.encoded_size());
            result.extend_from_slice(&[]);
            result.extend_from_slice(&[24, 68, 111, 84, 104, 105, 115]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(mut reply: &[u8]) -> Result<(String, u32), sails_rtl::errors::Error> {
            if !reply.starts_with(&[24, 68, 111, 84, 104, 105, 115]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[7..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
    #[derive(Debug, Default, Clone, Copy)]
    pub struct DoThat(());
    impl DoThat {
        #[allow(dead_code)]
        pub fn encode_call(param: super::ThisThatSvcAppDoThatParam) -> Vec<u8> {
            let args = param;
            let mut result = Vec::with_capacity(7 + args.encoded_size());
            result.extend_from_slice(&[]);
            result.extend_from_slice(&[24, 68, 111, 84, 104, 97, 116]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(
            mut reply: &[u8],
        ) -> Result<Result<(String, u32), (String,)>, sails_rtl::errors::Error> {
            if !reply.starts_with(&[24, 68, 111, 84, 104, 97, 116]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[7..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
    #[derive(Debug, Default, Clone, Copy)]
    pub struct This(());
    impl This {
        #[allow(dead_code)]
        pub fn encode_call(v1: Vec<u16>) -> Vec<u8> {
            let args = v1;
            let mut result = Vec::with_capacity(5 + args.encoded_size());
            result.extend_from_slice(&[]);
            result.extend_from_slice(&[16, 84, 104, 105, 115]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(mut reply: &[u8]) -> Result<u32, sails_rtl::errors::Error> {
            if !reply.starts_with(&[16, 84, 104, 105, 115]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[5..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
    #[derive(Debug, Default, Clone, Copy)]
    pub struct That(());
    impl That {
        #[allow(dead_code)]
        pub fn encode_call(v1: ()) -> Vec<u8> {
            let args = v1;
            let mut result = Vec::with_capacity(5 + args.encoded_size());
            result.extend_from_slice(&[]);
            result.extend_from_slice(&[16, 84, 104, 97, 116]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(
            mut reply: &[u8],
        ) -> Result<Result<String, String>, sails_rtl::errors::Error> {
            if !reply.starts_with(&[16, 84, 104, 97, 116]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[5..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub struct ThisThatSvcAppTupleStruct(pub bool);
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub struct ThisThatSvcAppDoThatParam {
    pub p1: u32,
    pub p2: String,
    pub p3: ThisThatSvcAppManyVariants,
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub enum ThisThatSvcAppManyVariants {
    One,
    Two(u32),
    Three(Option<u32>),
    Four { a: u32, b: Option<u16> },
    Five((String, u32)),
    Six((u32,)),
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub enum T {
    One,
}
pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait ServiceFactory<A: Default> {
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self, a: u32) -> impl Activation<A>;
    }
    pub trait Service<TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn do_this(
            &mut self,
            p1: u32,
            p2: String,
            p3: (Option<String>, u8),
            p4: ThisThatSvcAppTupleStruct,
        ) -> impl Call<TCallArgs, (String, u32)>;
        #[allow(clippy::type_complexity)]
        fn do_that(
            &mut self,
            param: ThisThatSvcAppDoThatParam,
        ) -> impl Call<TCallArgs, Result<(String, u32), (String,)>>;
        #[allow(clippy::type_complexity)]
        fn this(&self, v1: Vec<u16>) -> impl Call<TCallArgs, u32>;
        #[allow(clippy::type_complexity)]
        fn that(&self, v1: ()) -> impl Call<TCallArgs, Result<String, String>>;
    }
}

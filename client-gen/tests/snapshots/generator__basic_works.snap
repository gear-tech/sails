---
source: client-gen/tests/generator.rs
expression: "gen(idl, \"Basic\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Remoting, RemotingAction},
    prelude::*,
    String,
};
#[derive(Clone)]
pub struct Basic<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<A: Default, R: Remoting<A>> Basic<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R, A> traits::Basic<R, A> for Basic<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<A, u16> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 68, 111, 84, 104, 105, 115],
            (p1, p2),
        )
    }
    fn do_that(&mut self, p1: (u8, u32)) -> impl Call<A, u8> {
        RemotingAction::new(self.remoting.clone(), &[24, 68, 111, 84, 104, 97, 116], p1)
    }
}
pub mod basic_io {
    use super::*;
    #[derive(Debug, Default, Clone, Copy)]
    pub struct DoThis(());
    impl DoThis {
        #[allow(dead_code)]
        pub fn encode_call(p1: u32, p2: super::MyParam) -> Vec<u8> {
            let args = (p1, p2);
            let mut result = Vec::with_capacity(7 + args.encoded_size());
            result.extend_from_slice(&[]);
            result.extend_from_slice(&[24, 68, 111, 84, 104, 105, 115]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(mut reply: &[u8]) -> Result<u16, sails_rtl::errors::Error> {
            if !reply.starts_with(&[24, 68, 111, 84, 104, 105, 115]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[7..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
    #[derive(Debug, Default, Clone, Copy)]
    pub struct DoThat(());
    impl DoThat {
        #[allow(dead_code)]
        pub fn encode_call(p1: (u8, u32)) -> Vec<u8> {
            let args = p1;
            let mut result = Vec::with_capacity(7 + args.encoded_size());
            result.extend_from_slice(&[]);
            result.extend_from_slice(&[24, 68, 111, 84, 104, 97, 116]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(mut reply: &[u8]) -> Result<u8, sails_rtl::errors::Error> {
            if !reply.starts_with(&[24, 68, 111, 84, 104, 97, 116]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[7..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub struct MyParam {
    pub f1: u32,
    pub f2: Vec<String>,
    pub f3: Option<(u8, u32)>,
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub enum MyParam2 {
    Variant1,
    Variant2(u32),
    Variant3((u32,)),
    Variant4((u8, u32)),
    Variant5 { f1: String, f2: Vec<u8> },
}
pub mod traits {
    use super::*;
    pub trait Basic<R, TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<TCallArgs, u16>;
        #[allow(clippy::type_complexity)]
        fn do_that(&mut self, p1: (u8, u32)) -> impl Call<TCallArgs, u8>;
    }
}

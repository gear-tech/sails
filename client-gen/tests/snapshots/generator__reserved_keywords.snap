---
source: client-gen/tests/generator.rs
expression: s
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Remoting, RemotingAction},
    prelude::*,
    String,
};

#[derive(Clone)]
pub struct ReservedKeyword<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}

impl<A: Default, R: Remoting<A>> ReservedKeyword<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}

impl<R, A> traits::ReservedKeyword<R, A> for ReservedKeyword<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn my_fn(
        &mut self,
        constructor: u32,
        service: String,
        p3: (Option<String>, u8),
        result: MyStruct,
    ) -> impl Call<A, (String, u32)> {
        RemotingAction::new(
            self.remoting.clone(),
            &[16, 77, 121, 70, 110],
            (constructor, service, p3, result),
        )
    }
}

#[derive(Default)]
pub struct ReservedKeywordCallBuilder;

impl ReservedKeywordCallBuilder {
    #[allow(unused)]
    pub fn my_fn(
        constructor: u32,
        service: String,
        p3: (Option<String>, u8),
        result: MyStruct,
    ) -> Vec<u8> {
        let args = (constructor, service, p3, result);
        let mut result = Vec::with_capacity(5 + args.encoded_size());
        result.extend_from_slice(&[]);
        result.extend_from_slice(&[16, 77, 121, 70, 110]);
        args.encode_to(&mut result);
        result
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub struct MyStruct {
    pub query: u8,
    pub result: u8,
}
pub mod traits {
    use super::*;
    pub trait ReservedKeyword<R, TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn my_fn(
            &mut self,
            constructor: u32,
            service: String,
            p3: (Option<String>, u8),
            result: MyStruct,
        ) -> impl Call<TCallArgs, (String, u32)>;
    }
}

---
source: client-gen/tests/generator.rs
expression: "gen(idl, \"ServiceWithEvents\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
#[derive(Clone)]
pub struct ServiceWithEvents<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<A: Default, R: Remoting<A>> ServiceWithEvents<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R, A> traits::ServiceWithEvents<A> for ServiceWithEvents<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn do_this(&mut self, p1: NonZeroU256, p2: MyParam) -> impl Call<A, NonZeroU64> {
        RemotingAction::new(
            self.remoting.clone(),
            service_with_events::io::DoThis(p1, p2),
        )
    }
}
pub mod service_with_events {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rtl::calls::EncodeDecodeWithRoute;
        #[derive(Debug, Encode)]
        #[codec(crate = sails_rtl::scale_codec)]
        pub struct DoThis(pub NonZeroU256, pub super::MyParam);
        impl EncodeDecodeWithRoute for DoThis {
            const ROUTE: &'static [u8] = &[24, 68, 111, 84, 104, 105, 115];
            type Reply = NonZeroU64;
        }
    }
    #[allow(dead_code)]
    #[cfg(not(target_arch = "wasm32"))]
    pub mod events {
        use super::*;
        use sails_rtl::events::{DecodeEventWithRoute, Listener, RemotingListener};
        #[derive(PartialEq, Debug, Encode, Decode)]
        #[codec(crate = sails_rtl::scale_codec)]
        pub enum ServiceWithEventsEvents {
            One(u64),
            Two { id: u8, reference: u64 },
            Three(MyParam),
            Reset,
        }
        impl DecodeEventWithRoute for ServiceWithEventsEvents {
            const ROUTE: &'static [u8] = &[];
            const EVENT_NAMES: &'static [&'static [u8]] = &[
                &[12, 79, 110, 101],
                &[12, 84, 119, 111],
                &[20, 84, 104, 114, 101, 101],
                &[20, 82, 101, 115, 101, 116],
            ];
        }
        pub fn listener<R: Listener<Vec<u8>>>(
            remoting: R,
        ) -> impl Listener<ServiceWithEventsEvents> {
            RemotingListener::new(remoting)
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub struct MyParam {
    pub f1: NonZeroU256,
    pub f2: Vec<NonZeroU8>,
    pub f3: Option<(NonZeroU64, NonZeroU256)>,
}
pub mod traits {
    use super::*;
    pub trait ServiceWithEvents<A> {
        #[allow(clippy::type_complexity)]
        fn do_this(&mut self, p1: NonZeroU256, p2: MyParam) -> impl Call<A, NonZeroU64>;
    }
}

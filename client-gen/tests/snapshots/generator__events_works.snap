---
source: client-gen/tests/generator.rs
expression: "gen(idl, \"ServiceWithEvents\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
#[derive(Clone)]
pub struct ServiceWithEvents<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<A: Default, R: Remoting<A>> ServiceWithEvents<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R, A> traits::ServiceWithEvents<A> for ServiceWithEvents<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn do_this(&mut self, p1: NonZeroU256, p2: MyParam) -> impl Call<A, NonZeroU64> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 68, 111, 84, 104, 105, 115],
            (p1, p2),
        )
    }
}
pub mod service_with_events {
    use super::*;
    pub mod io {
        use super::*;
        #[derive(Debug, Default, Clone, Copy)]
        pub struct DoThis(());
        impl DoThis {
            #[allow(dead_code)]
            pub fn encode_call(p1: NonZeroU256, p2: super::MyParam) -> Vec<u8> {
                let args = (p1, p2);
                let mut result = Vec::with_capacity(7 + args.encoded_size());
                result.extend_from_slice(&[]);
                result.extend_from_slice(&[24, 68, 111, 84, 104, 105, 115]);
                args.encode_to(&mut result);
                result
            }
            #[allow(dead_code)]
            pub fn decode_reply(mut reply: &[u8]) -> Result<NonZeroU64, sails_rtl::errors::Error> {
                if !reply.starts_with(&[24, 68, 111, 84, 104, 105, 115]) {
                    return Err(sails_rtl::errors::Error::Rtl(
                        sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                    ));
                }
                reply = &reply[7..];
                let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
                Ok(result)
            }
        }
    }
    #[cfg(not(target_arch = "wasm32"))]
    pub mod events {
        use super::*;
        use sails_rtl::event_listener::{EventSubscriber, RemotingSubscribe, Subscribe};
        #[derive(PartialEq, Debug, Encode, Decode)]
        #[codec(crate = sails_rtl::scale_codec)]
        pub enum ServiceWithEventsEvents {
            One(u64),
            Two { id: u8, reference: u64 },
            Three(MyParam),
            Reset,
        }
        const SERVICE_ROUTE: &[u8] = &[];
        const EVENT_NAMES: &[&[u8]] = &[
            &[12, 79, 110, 101],
            &[12, 84, 119, 111],
            &[20, 84, 104, 114, 101, 101],
            &[20, 82, 101, 115, 101, 116],
        ];
        #[derive(Clone)]
        pub struct Listener<R> {
            remoting: R,
        }
        impl<R: EventSubscriber> Listener<R> {
            pub fn new(remoting: R) -> Self {
                Self { remoting }
            }
        }
        impl<R: EventSubscriber> traits::ServiceWithEventsListener for Listener<R> {
            fn listener(self) -> impl Subscribe<ServiceWithEventsEvents> {
                RemotingSubscribe::new(self.remoting, SERVICE_ROUTE, EVENT_NAMES)
            }
        }
        #[allow(dead_code)]
        pub fn decode_event(
            payload: &[u8],
        ) -> Result<ServiceWithEventsEvents, sails_rtl::errors::Error> {
            if !payload.starts_with(SERVICE_ROUTE) {
                Err(sails_rtl::errors::RtlError::EventPrefixMismatches)?;
            }
            let event_bytes = &payload[0..];
            for (idx, name) in EVENT_NAMES.iter().enumerate() {
                if event_bytes.starts_with(name) {
                    let idx = idx as u8;
                    let bytes = [&[idx], &event_bytes[name.len()..]].concat();
                    let mut event_bytes = &bytes[..];
                    return Ok(ServiceWithEventsEvents::decode(&mut event_bytes)?);
                }
            }
            Err(sails_rtl::errors::RtlError::EventNameIsNotFound)?
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub struct MyParam {
    pub f1: NonZeroU256,
    pub f2: Vec<NonZeroU8>,
    pub f3: Option<(NonZeroU64, NonZeroU256)>,
}
pub mod traits {
    use super::*;
    pub trait ServiceWithEvents<A> {
        #[allow(clippy::type_complexity)]
        fn do_this(&mut self, p1: NonZeroU256, p2: MyParam) -> impl Call<A, NonZeroU64>;
    }
    #[cfg(not(target_arch = "wasm32"))]
    pub trait ServiceWithEventsListener {
        fn listener(
            self,
        ) -> impl sails_rtl::event_listener::Subscribe<
            service_with_events::events::ServiceWithEventsEvents,
        >;
    }
}

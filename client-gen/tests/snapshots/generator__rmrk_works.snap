---
source: client-gen/tests/generator.rs
expression: "gen(idl, \"RmrkCatalog\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Remoting, RemotingAction},
    prelude::*,
    String,
};
#[derive(Default)]
pub struct RmrkCatalogFactory<R: Remoting<A> + Clone, A: Default> {
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<R: Remoting<A> + Clone, A: Default> RmrkCatalogFactory<R, A> {
    #[allow(unused)]
    pub fn new(remoting: &R) -> Self {
        Self {
            remoting: remoting.clone(),
            _phantom: PhantomData,
        }
    }
}
impl<R: Remoting<A> + Clone, A: Default> traits::RmrkCatalogFactory<A>
    for RmrkCatalogFactory<R, A>
{
    fn new(&self) -> impl Activation<A> {
        RemotingAction::new(self.remoting.clone(), &[12, 78, 101, 119], ())
    }
}
#[derive(Clone)]
pub struct RmrkCatalog<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}
impl<A: Default, R: Remoting<A>> RmrkCatalog<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}
impl<R, A> traits::RmrkCatalog<A> for RmrkCatalog<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn add_equippables(
        &mut self,
        part_id: u32,
        collection_ids: Vec<ActorId>,
    ) -> impl Call<A, Result<(u32, Vec<ActorId>), Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 56, 65, 100, 100, 69, 113,
                117, 105, 112, 112, 97, 98, 108, 101, 115,
            ],
            (part_id, collection_ids),
        )
    }
    fn add_parts(
        &mut self,
        parts: BTreeMap<u32, Part>,
    ) -> impl Call<A, Result<BTreeMap<u32, Part>, Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 32, 65, 100, 100, 80, 97,
                114, 116, 115,
            ],
            parts,
        )
    }
    fn remove_equippable(
        &mut self,
        part_id: u32,
        collection_id: ActorId,
    ) -> impl Call<A, Result<(u32, ActorId), Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 64, 82, 101, 109, 111, 118,
                101, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101,
            ],
            (part_id, collection_id),
        )
    }
    fn remove_parts(&mut self, part_ids: Vec<u32>) -> impl Call<A, Result<Vec<u32>, Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 44, 82, 101, 109, 111, 118,
                101, 80, 97, 114, 116, 115,
            ],
            part_ids,
        )
    }
    fn reset_equippables(&mut self, part_id: u32) -> impl Call<A, Result<(), Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 64, 82, 101, 115, 101, 116,
                69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115,
            ],
            part_id,
        )
    }
    fn set_equippables_to_all(&mut self, part_id: u32) -> impl Call<A, Result<(), Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 76, 83, 101, 116, 69, 113,
                117, 105, 112, 112, 97, 98, 108, 101, 115, 84, 111, 65, 108, 108,
            ],
            part_id,
        )
    }
    fn equippable(
        &self,
        part_id: u32,
        collection_id: ActorId,
    ) -> impl Call<A, Result<bool, Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 40, 69, 113, 117, 105, 112,
                112, 97, 98, 108, 101,
            ],
            (part_id, collection_id),
        )
    }
    fn part(&self, part_id: u32) -> impl Call<A, Option<Part>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103, 16, 80, 97, 114, 116,
            ],
            part_id,
        )
    }
}
pub mod rmrk_catalog_io {
    use super::*;
    #[derive(Debug, Default, Clone, Copy)]
    pub struct AddEquippables(());
    impl AddEquippables {
        #[allow(dead_code)]
        pub fn encode_call(part_id: u32, collection_ids: Vec<ActorId>) -> Vec<u8> {
            let args = (part_id, collection_ids);
            let mut result = Vec::with_capacity(27 + args.encoded_size());
            result.extend_from_slice(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]);
            result.extend_from_slice(&[
                56, 65, 100, 100, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115,
            ]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(
            mut reply: &[u8],
        ) -> Result<Result<(u32, Vec<ActorId>), super::Error>, sails_rtl::errors::Error> {
            if !reply.starts_with(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[12..];
            if !reply.starts_with(&[
                56, 65, 100, 100, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115,
            ]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[15..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
    #[derive(Debug, Default, Clone, Copy)]
    pub struct AddParts(());
    impl AddParts {
        #[allow(dead_code)]
        pub fn encode_call(parts: BTreeMap<u32, super::Part>) -> Vec<u8> {
            let args = parts;
            let mut result = Vec::with_capacity(21 + args.encoded_size());
            result.extend_from_slice(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]);
            result.extend_from_slice(&[32, 65, 100, 100, 80, 97, 114, 116, 115]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(
            mut reply: &[u8],
        ) -> Result<Result<BTreeMap<u32, super::Part>, super::Error>, sails_rtl::errors::Error>
        {
            if !reply.starts_with(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[12..];
            if !reply.starts_with(&[32, 65, 100, 100, 80, 97, 114, 116, 115]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[9..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
    #[derive(Debug, Default, Clone, Copy)]
    pub struct RemoveEquippable(());
    impl RemoveEquippable {
        #[allow(dead_code)]
        pub fn encode_call(part_id: u32, collection_id: ActorId) -> Vec<u8> {
            let args = (part_id, collection_id);
            let mut result = Vec::with_capacity(29 + args.encoded_size());
            result.extend_from_slice(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]);
            result.extend_from_slice(&[
                64, 82, 101, 109, 111, 118, 101, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101,
            ]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(
            mut reply: &[u8],
        ) -> Result<Result<(u32, ActorId), super::Error>, sails_rtl::errors::Error> {
            if !reply.starts_with(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[12..];
            if !reply.starts_with(&[
                64, 82, 101, 109, 111, 118, 101, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101,
            ]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[17..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
    #[derive(Debug, Default, Clone, Copy)]
    pub struct RemoveParts(());
    impl RemoveParts {
        #[allow(dead_code)]
        pub fn encode_call(part_ids: Vec<u32>) -> Vec<u8> {
            let args = part_ids;
            let mut result = Vec::with_capacity(24 + args.encoded_size());
            result.extend_from_slice(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]);
            result.extend_from_slice(&[44, 82, 101, 109, 111, 118, 101, 80, 97, 114, 116, 115]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(
            mut reply: &[u8],
        ) -> Result<Result<Vec<u32>, super::Error>, sails_rtl::errors::Error> {
            if !reply.starts_with(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[12..];
            if !reply.starts_with(&[44, 82, 101, 109, 111, 118, 101, 80, 97, 114, 116, 115]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[12..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
    #[derive(Debug, Default, Clone, Copy)]
    pub struct ResetEquippables(());
    impl ResetEquippables {
        #[allow(dead_code)]
        pub fn encode_call(part_id: u32) -> Vec<u8> {
            let args = part_id;
            let mut result = Vec::with_capacity(29 + args.encoded_size());
            result.extend_from_slice(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]);
            result.extend_from_slice(&[
                64, 82, 101, 115, 101, 116, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115,
            ]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(
            mut reply: &[u8],
        ) -> Result<Result<(), super::Error>, sails_rtl::errors::Error> {
            if !reply.starts_with(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[12..];
            if !reply.starts_with(&[
                64, 82, 101, 115, 101, 116, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115,
            ]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[17..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
    #[derive(Debug, Default, Clone, Copy)]
    pub struct SetEquippablesToAll(());
    impl SetEquippablesToAll {
        #[allow(dead_code)]
        pub fn encode_call(part_id: u32) -> Vec<u8> {
            let args = part_id;
            let mut result = Vec::with_capacity(32 + args.encoded_size());
            result.extend_from_slice(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]);
            result.extend_from_slice(&[
                76, 83, 101, 116, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115, 84, 111, 65,
                108, 108,
            ]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(
            mut reply: &[u8],
        ) -> Result<Result<(), super::Error>, sails_rtl::errors::Error> {
            if !reply.starts_with(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[12..];
            if !reply.starts_with(&[
                76, 83, 101, 116, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115, 84, 111, 65,
                108, 108,
            ]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[20..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
    #[derive(Debug, Default, Clone, Copy)]
    pub struct Equippable(());
    impl Equippable {
        #[allow(dead_code)]
        pub fn encode_call(part_id: u32, collection_id: ActorId) -> Vec<u8> {
            let args = (part_id, collection_id);
            let mut result = Vec::with_capacity(23 + args.encoded_size());
            result.extend_from_slice(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]);
            result.extend_from_slice(&[40, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(
            mut reply: &[u8],
        ) -> Result<Result<bool, super::Error>, sails_rtl::errors::Error> {
            if !reply.starts_with(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[12..];
            if !reply.starts_with(&[40, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[11..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
    #[derive(Debug, Default, Clone, Copy)]
    pub struct Part(());
    impl Part {
        #[allow(dead_code)]
        pub fn encode_call(part_id: u32) -> Vec<u8> {
            let args = part_id;
            let mut result = Vec::with_capacity(17 + args.encoded_size());
            result.extend_from_slice(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]);
            result.extend_from_slice(&[16, 80, 97, 114, 116]);
            args.encode_to(&mut result);
            result
        }
        #[allow(dead_code)]
        pub fn decode_reply(
            mut reply: &[u8],
        ) -> Result<Option<super::Part>, sails_rtl::errors::Error> {
            if !reply.starts_with(&[44, 82, 109, 114, 107, 67, 97, 116, 97, 108, 111, 103]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[12..];
            if !reply.starts_with(&[16, 80, 97, 114, 116]) {
                return Err(sails_rtl::errors::Error::Rtl(
                    sails_rtl::errors::RtlError::ReplyPrefixMismatches,
                ));
            }
            reply = &reply[5..];
            let result = Decode::decode(&mut reply).map_err(sails_rtl::errors::Error::Codec)?;
            Ok(result)
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub enum Error {
    PartIdCantBeZero,
    BadConfig,
    PartAlreadyExists,
    ZeroLengthPassed,
    PartDoesNotExist,
    WrongPartFormat,
    NotAllowedToCall,
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub enum Part {
    Fixed(FixedPart),
    Slot(SlotPart),
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub struct FixedPart {
    pub z: Option<u32>,
    pub metadata_uri: String,
}
#[derive(PartialEq, Debug, Encode, Decode)]
#[codec(crate = sails_rtl::scale_codec)]
pub struct SlotPart {
    pub equippable: Vec<ActorId>,
    pub z: Option<u32>,
    pub metadata_uri: String,
}
pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait RmrkCatalogFactory<A: Default> {
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<A>;
    }
    pub trait RmrkCatalog<TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn add_equippables(
            &mut self,
            part_id: u32,
            collection_ids: Vec<ActorId>,
        ) -> impl Call<TCallArgs, Result<(u32, Vec<ActorId>), Error>>;
        #[allow(clippy::type_complexity)]
        fn add_parts(
            &mut self,
            parts: BTreeMap<u32, Part>,
        ) -> impl Call<TCallArgs, Result<BTreeMap<u32, Part>, Error>>;
        #[allow(clippy::type_complexity)]
        fn remove_equippable(
            &mut self,
            part_id: u32,
            collection_id: ActorId,
        ) -> impl Call<TCallArgs, Result<(u32, ActorId), Error>>;
        #[allow(clippy::type_complexity)]
        fn remove_parts(
            &mut self,
            part_ids: Vec<u32>,
        ) -> impl Call<TCallArgs, Result<Vec<u32>, Error>>;
        #[allow(clippy::type_complexity)]
        fn reset_equippables(&mut self, part_id: u32) -> impl Call<TCallArgs, Result<(), Error>>;
        #[allow(clippy::type_complexity)]
        fn set_equippables_to_all(
            &mut self,
            part_id: u32,
        ) -> impl Call<TCallArgs, Result<(), Error>>;
        #[allow(clippy::type_complexity)]
        fn equippable(
            &self,
            part_id: u32,
            collection_id: ActorId,
        ) -> impl Call<TCallArgs, Result<bool, Error>>;
        #[allow(clippy::type_complexity)]
        fn part(&self, part_id: u32) -> impl Call<TCallArgs, Option<Part>>;
    }
}

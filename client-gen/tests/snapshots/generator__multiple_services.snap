---
source: client-gen/tests/generator.rs
expression: "gen(idl, \"Multiple\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Remoting, RemotingAction},
    prelude::*,
    String,
};

#[derive(Clone)]
pub struct Multiple<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}

impl<A: Default, R: Remoting<A>> Multiple<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}

impl<R, A> traits::Multiple<R, A> for Multiple<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<A, u16> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 68, 111, 84, 104, 105, 115],
            (p1, p2),
        )
    }
    fn do_that(&mut self, p1: (u8, u32)) -> impl Call<A, u8> {
        RemotingAction::new(self.remoting.clone(), &[24, 68, 111, 84, 104, 97, 116], p1)
    }
}

pub mod multiple_calls {
    use super::*;

    #[derive(Debug, Encode, Decode)]
    #[codec(crate = sails_rtl::scale_codec)]
    pub struct DoThisCall(pub u32, pub MyParam);
    impl DoThisCall {
        #[allow(unused)]
        pub fn encode(&self) -> Vec<u8> {
            let mut result = Vec::with_capacity(7 + self.encoded_size());
            result.extend_from_slice(&[]);
            result.extend_from_slice(&[24, 68, 111, 84, 104, 105, 115]);
            self.encode_to(&mut result);
            result
        }
        #[allow(unused)]
        pub fn from_bytes(mut bytes: &[u8]) -> Result<Self, sails_rtl::errors::Error> {
            bytes = &bytes[0..];
            if !bytes.starts_with(&[24, 68, 111, 84, 104, 105, 115]) {
                return Err(sails_rtl::errors::RtlError::ReplyPrefixMismatches.into());
            }
            bytes = &bytes[7..];
            let call = Decode::decode(&mut bytes)?;
            Ok(call)
        }

        #[allow(unused)]
        pub fn decode_reply(mut reply: &[u8]) -> Result<u16, sails_rtl::errors::Error> {
            let result =
                Decode::decode(&mut reply).map_err(|e| sails_rtl::errors::Error::Codec(e))?;
            Ok(result)
        }
    }

    #[derive(Debug, Encode, Decode)]
    #[codec(crate = sails_rtl::scale_codec)]
    pub struct DoThatCall(pub (u8, u32));
    impl DoThatCall {
        #[allow(unused)]
        pub fn encode(&self) -> Vec<u8> {
            let mut result = Vec::with_capacity(7 + self.encoded_size());
            result.extend_from_slice(&[]);
            result.extend_from_slice(&[24, 68, 111, 84, 104, 97, 116]);
            self.encode_to(&mut result);
            result
        }
        #[allow(unused)]
        pub fn from_bytes(mut bytes: &[u8]) -> Result<Self, sails_rtl::errors::Error> {
            bytes = &bytes[0..];
            if !bytes.starts_with(&[24, 68, 111, 84, 104, 97, 116]) {
                return Err(sails_rtl::errors::RtlError::ReplyPrefixMismatches.into());
            }
            bytes = &bytes[7..];
            let call = Decode::decode(&mut bytes)?;
            Ok(call)
        }

        #[allow(unused)]
        pub fn decode_reply(mut reply: &[u8]) -> Result<u8, sails_rtl::errors::Error> {
            let result =
                Decode::decode(&mut reply).map_err(|e| sails_rtl::errors::Error::Codec(e))?;
            Ok(result)
        }
    }
}

#[derive(Clone)]
pub struct Named<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}

impl<A: Default, R: Remoting<A>> Named<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}

impl<R, A> traits::Named<R, A> for Named<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn that(&self, p1: u32) -> impl Call<A, String> {
        RemotingAction::new(
            self.remoting.clone(),
            &[20, 78, 97, 109, 101, 100, 16, 84, 104, 97, 116],
            p1,
        )
    }
}

pub mod named_calls {
    use super::*;

    #[derive(Debug, Encode, Decode)]
    #[codec(crate = sails_rtl::scale_codec)]
    pub struct ThatCall(pub u32);
    impl ThatCall {
        #[allow(unused)]
        pub fn encode(&self) -> Vec<u8> {
            let mut result = Vec::with_capacity(11 + self.encoded_size());
            result.extend_from_slice(&[20, 78, 97, 109, 101, 100]);
            result.extend_from_slice(&[16, 84, 104, 97, 116]);
            self.encode_to(&mut result);
            result
        }
        #[allow(unused)]
        pub fn from_bytes(mut bytes: &[u8]) -> Result<Self, sails_rtl::errors::Error> {
            bytes = &bytes[6..];
            if !bytes.starts_with(&[16, 84, 104, 97, 116]) {
                return Err(sails_rtl::errors::RtlError::ReplyPrefixMismatches.into());
            }
            bytes = &bytes[5..];
            let call = Decode::decode(&mut bytes)?;
            Ok(call)
        }

        #[allow(unused)]
        pub fn decode_reply(mut reply: &[u8]) -> Result<String, sails_rtl::errors::Error> {
            let result =
                Decode::decode(&mut reply).map_err(|e| sails_rtl::errors::Error::Codec(e))?;
            Ok(result)
        }
    }
}
pub mod traits {
    use super::*;
    pub trait Multiple<R, TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<TCallArgs, u16>;
        #[allow(clippy::type_complexity)]
        fn do_that(&mut self, p1: (u8, u32)) -> impl Call<TCallArgs, u8>;
    }
    pub trait Named<R, TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn that(&self, p1: u32) -> impl Call<TCallArgs, String>;
    }
}

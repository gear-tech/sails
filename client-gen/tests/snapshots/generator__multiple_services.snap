---
source: client-gen/tests/generator.rs
expression: "gen(idl, \"Multiple\")"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
use parity_scale_codec::{Decode, Encode};
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Activation, Call, Remoting, RemotingAction},
    prelude::*,
    String,
};

#[derive(Clone)]
pub struct Multiple<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}

impl<A: Default, R: Remoting<A>> Multiple<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}

impl<R, A> traits::Multiple<R, A> for Multiple<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<A, u16> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 68, 111, 84, 104, 105, 115],
            (p1, p2),
        )
    }
    fn do_that(&mut self, p1: (u8, u32)) -> impl Call<A, u8> {
        RemotingAction::new(self.remoting.clone(), &[24, 68, 111, 84, 104, 97, 116], p1)
    }
}

#[derive(Default)]
pub struct MultipleCallBuilder;

impl MultipleCallBuilder {
    #[allow(unused)]
    pub fn do_this(p1: u32, p2: MyParam) -> Vec<u8> {
        let args = (p1, p2);
        let mut result = Vec::with_capacity(7 + args.encoded_size());
        result.extend_from_slice(&[]);
        result.extend_from_slice(&[24, 68, 111, 84, 104, 105, 115]);
        args.encode_to(&mut result);
        result
    }
    #[allow(unused)]
    pub fn do_that(p1: (u8, u32)) -> Vec<u8> {
        let args = p1;
        let mut result = Vec::with_capacity(7 + args.encoded_size());
        result.extend_from_slice(&[]);
        result.extend_from_slice(&[24, 68, 111, 84, 104, 97, 116]);
        args.encode_to(&mut result);
        result
    }
}

#[derive(Clone)]
pub struct Named<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}

impl<A: Default, R: Remoting<A>> Named<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}

impl<R, A> traits::Named<R, A> for Named<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn that(&self, p1: u32) -> impl Call<A, String> {
        RemotingAction::new(
            self.remoting.clone(),
            &[20, 78, 97, 109, 101, 100, 16, 84, 104, 97, 116],
            p1,
        )
    }
}

#[derive(Default)]
pub struct NamedCallBuilder;

impl NamedCallBuilder {
    #[allow(unused)]
    pub fn that(p1: u32) -> Vec<u8> {
        let args = p1;
        let mut result = Vec::with_capacity(11 + args.encoded_size());
        result.extend_from_slice(&[20, 78, 97, 109, 101, 100]);
        result.extend_from_slice(&[16, 84, 104, 97, 116]);
        args.encode_to(&mut result);
        result
    }
}
pub mod traits {
    use super::*;
    pub trait Multiple<R, TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn do_this(&mut self, p1: u32, p2: MyParam) -> impl Call<TCallArgs, u16>;
        #[allow(clippy::type_complexity)]
        fn do_that(&mut self, p1: (u8, u32)) -> impl Call<TCallArgs, u8>;
    }
    pub trait Named<R, TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn that(&self, p1: u32) -> impl Call<TCallArgs, String>;
    }
}

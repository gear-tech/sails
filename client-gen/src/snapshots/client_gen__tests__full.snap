---
source: client-gen/src/main.rs
expression: generated
---
// Code generated by sails-client-gen from test. DO NOT EDIT.
#![automatically_derived]
#![allow(unused)]
use parity_scale_codec::{Decode, Encode};
use sails_client::{Call, Sender};
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct ThisThatSvcAppTupleStruct(bool);
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct ThisThatSvcAppDoThatParam {
    p1: u32,
    p2: String,
    p3: ThisThatSvcAppManyVariants,
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub enum ThisThatSvcAppManyVariants {
    One,
    Two(u32),
    Three(Option<u32>),
    Four { a: u32, b: Option<u16> },
    Five(String, u32),
    Six(u32),
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub enum T {
    One,
}

#[doc(hidden)]
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct DoThisRequestArgs {
    p1: u32,
    p2: String,
    p3: (Option<String>, u8),
    p4: ThisThatSvcAppTupleStruct,
}

#[doc(hidden)]
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct DoThatRequestArgs {
    param: ThisThatSvcAppDoThatParam,
}

#[doc(hidden)]
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct ThisRequestArgs {
    v1: Vec<u16>,
}

#[doc(hidden)]
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct ThatRequestArgs {
    v1: (),
}

#[derive(Default, Clone)]
pub struct Client {
    program_id: [u8; 32],
}

impl Client {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn with_program_id(mut self, program_id: impl Into<[u8; 32]>) -> Self {
        self.program_id = program_id.into();
        self
    }

    pub fn do_this(
        &self,
        p1: u32,
        p2: String,
        p3: (Option<String>, u8),
        p4: ThisThatSvcAppTupleStruct,
    ) -> Call<(String, u32)> {
        let mut payload = Vec::from("DoThis/");
        DoThisRequestArgs { p1, p2, p3, p4 }.encode_to(&mut payload);

        Call::new(payload).with_program_id(self.program_id)
    }
    pub fn do_that(
        &self,
        param: ThisThatSvcAppDoThatParam,
    ) -> Call<Result<(String, u32), (String,)>> {
        let mut payload = Vec::from("DoThat/");
        DoThatRequestArgs { param }.encode_to(&mut payload);

        Call::new(payload).with_program_id(self.program_id)
    }
    pub fn this(&self, v1: Vec<u16>) -> Call<u32> {
        let mut payload = Vec::from("This/");
        ThisRequestArgs { v1 }.encode_to(&mut payload);

        Call::new(payload).with_program_id(self.program_id)
    }
    pub fn that(&self, v1: ()) -> Call<Result<String, String>> {
        let mut payload = Vec::from("That/");
        ThatRequestArgs { v1 }.encode_to(&mut payload);

        Call::new(payload).with_program_id(self.program_id)
    }
}


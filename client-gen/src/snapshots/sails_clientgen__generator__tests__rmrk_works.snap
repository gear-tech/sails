---
source: client-gen/src/generator.rs
expression: "generate(program, \"RmrkCatalog\").unwrap()"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
use parity_scale_codec::{Decode, Encode};
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Remoting, RemotingAction},
    prelude::*,
    String,
};
pub mod ctor {
    use super::*;
    pub trait RmrkCatalogConstructors<A: Default> {
        #[allow(clippy::new_ret_no_self)]
        fn new(remoting: impl Remoting<A>) -> RemotingAction<impl Remoting<A>, A, ActorId>;
    }
    pub struct ProgramFactory;
    impl ProgramFactory {
        #[allow(unused)]
        pub fn new() -> Self {
            Self
        }
    }
    impl<A: Default> RmrkCatalogConstructors<A> for ProgramFactory {
        fn new(remoting: impl Remoting<A>) -> RemotingAction<impl Remoting<A>, A, ActorId> {
            RemotingAction::new(remoting, &[12, 78, 101, 119], ())
        }
    }
}
pub mod traits {
    use super::*;
    pub trait RmrkCatalog<R, TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn add_equippables(
            &mut self,
            part_id: u32,
            collection_ids: Vec<ActorId>,
        ) -> RemotingAction<R, TCallArgs, Result<(u32, Vec<ActorId>), Error>>;
        #[allow(clippy::type_complexity)]
        fn add_parts(
            &mut self,
            parts: BTreeMap<u32, Part>,
        ) -> RemotingAction<R, TCallArgs, Result<BTreeMap<u32, Part>, Error>>;
        #[allow(clippy::type_complexity)]
        fn remove_equippable(
            &mut self,
            part_id: u32,
            collection_id: ActorId,
        ) -> RemotingAction<R, TCallArgs, Result<(u32, ActorId), Error>>;
        #[allow(clippy::type_complexity)]
        fn remove_parts(
            &mut self,
            part_ids: Vec<u32>,
        ) -> RemotingAction<R, TCallArgs, Result<Vec<u32>, Error>>;
        #[allow(clippy::type_complexity)]
        fn reset_equippables(
            &mut self,
            part_id: u32,
        ) -> RemotingAction<R, TCallArgs, Result<(), Error>>;
        #[allow(clippy::type_complexity)]
        fn set_equippables_to_all(
            &mut self,
            part_id: u32,
        ) -> RemotingAction<R, TCallArgs, Result<(), Error>>;
        #[allow(clippy::type_complexity)]
        fn equippable(
            &self,
            part_id: u32,
            collection_id: ActorId,
        ) -> RemotingAction<R, TCallArgs, Result<bool, Error>>;
        #[allow(clippy::type_complexity)]
        fn part(&self, part_id: u32) -> RemotingAction<R, TCallArgs, Option<Part>>;
    }
}

#[derive(Clone)]
pub struct RmrkCatalog<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}

impl<A: Default, R: Remoting<A>> RmrkCatalog<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}

impl<R, A> traits::RmrkCatalog<R, A> for RmrkCatalog<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn add_equippables(
        &mut self,
        part_id: u32,
        collection_ids: Vec<ActorId>,
    ) -> RemotingAction<R, A, Result<(u32, Vec<ActorId>), Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                56, 65, 100, 100, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115,
            ],
            (part_id, collection_ids),
        )
    }
    fn add_parts(
        &mut self,
        parts: BTreeMap<u32, Part>,
    ) -> RemotingAction<R, A, Result<BTreeMap<u32, Part>, Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[32, 65, 100, 100, 80, 97, 114, 116, 115],
            parts,
        )
    }
    fn remove_equippable(
        &mut self,
        part_id: u32,
        collection_id: ActorId,
    ) -> RemotingAction<R, A, Result<(u32, ActorId), Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                64, 82, 101, 109, 111, 118, 101, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101,
            ],
            (part_id, collection_id),
        )
    }
    fn remove_parts(
        &mut self,
        part_ids: Vec<u32>,
    ) -> RemotingAction<R, A, Result<Vec<u32>, Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[44, 82, 101, 109, 111, 118, 101, 80, 97, 114, 116, 115],
            part_ids,
        )
    }
    fn reset_equippables(&mut self, part_id: u32) -> RemotingAction<R, A, Result<(), Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                64, 82, 101, 115, 101, 116, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115,
            ],
            part_id,
        )
    }
    fn set_equippables_to_all(&mut self, part_id: u32) -> RemotingAction<R, A, Result<(), Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[
                76, 83, 101, 116, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101, 115, 84, 111, 65,
                108, 108,
            ],
            part_id,
        )
    }
    fn equippable(
        &self,
        part_id: u32,
        collection_id: ActorId,
    ) -> RemotingAction<R, A, Result<bool, Error>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[40, 69, 113, 117, 105, 112, 112, 97, 98, 108, 101],
            (part_id, collection_id),
        )
    }
    fn part(&self, part_id: u32) -> RemotingAction<R, A, Option<Part>> {
        RemotingAction::new(self.remoting.clone(), &[16, 80, 97, 114, 116], part_id)
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub enum Error {
    PartIdCantBeZero,
    BadConfig,
    PartAlreadyExists,
    ZeroLengthPassed,
    PartDoesNotExist,
    WrongPartFormat,
    NotAllowedToCall,
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub enum Part {
    Fixed(FixedPart),
    Slot(SlotPart),
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct FixedPart {
    z: Option<u32>,
    metadata_uri: String,
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct SlotPart {
    equippable: Vec<ActorId>,
    z: Option<u32>,
    metadata_uri: String,
}


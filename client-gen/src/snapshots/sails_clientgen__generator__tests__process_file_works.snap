---
source: client-gen/src/generator.rs
expression: generator.generate(program).unwrap()
---
#![automatically_derived]
#![allow(unused)]
use parity_scale_codec::{Encode, Decode};
use sails_sender::Call;
use gstd::prelude::*;
pub trait Service {
    fn do_this(&mut self, p1: u32, p2: MyParam) -> Call<u16>;
    fn do_that(&mut self, p1: (u8, u32)) -> Call<u8>;
}
#[derive(PartialEq, Debug, Encode, Decode)]
struct DoThisRequestArgs {
    pub p1: u32,
    pub p2: MyParam,
}
#[derive(PartialEq, Debug, Encode, Decode)]
struct DoThatRequestArgs {
    pub p1: (u8, u32),
}
#[derive(Default, Clone)]
pub struct Client {
    program_id: [u8; 32],
}
impl Client {
    pub fn new() -> Self {
        Self::default()
    }
}
impl Service for Client {
    fn do_this(&mut self, p1: u32, p2: MyParam) -> Call<u16> {
        let mut payload = Vec::from("DoThis/");
        DoThisRequestArgs { p1, p2 }.encode_to(&mut payload);
        Call::new(payload)
    }
    fn do_that(&mut self, p1: (u8, u32)) -> Call<u8> {
        let mut payload = Vec::from("DoThat/");
        DoThatRequestArgs { p1 }.encode_to(&mut payload);
        Call::new(payload)
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct MyParam {
    f1: u32,
    f2: Vec<String>,
    f3: Option<(u8, u32)>,
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub enum MyParam2 {
    Variant1,
    Variant2(u32),
    Variant3((u32,)),
    Variant4((u8, u32)),
    Variant5 { f1: String, f2: Vec<u8> },
}


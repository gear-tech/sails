---
source: client-gen/src/generator.rs
expression: "generate(program, \"Service\").unwrap()"
---
// Code generated by sails-client-gen. DO NOT EDIT.
use parity_scale_codec::{Decode, Encode};
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::RemotingAction, gstd::calls::Args, gstd::calls::Remoting, prelude::*, String,
};
pub trait Service<TCallArgs = ()> {
    #[allow(clippy::type_complexity)]
    fn do_this(&mut self, p1: u32, p2: MyParam) -> RemotingAction<Remoting, TCallArgs, u16>;
    #[allow(clippy::type_complexity)]
    fn do_that(&mut self, p1: (u8, u32)) -> RemotingAction<Remoting, TCallArgs, u8>;
}

#[derive(Clone)]
pub struct ServiceClient {
    remoting: Remoting,
}

impl ServiceClient {
    pub fn new(remoting: Remoting) -> Self {
        Self { remoting }
    }
}

impl<A: Default> Service<A> for ServiceClient {
    fn do_this(&mut self, p1: u32, p2: MyParam) -> RemotingAction<Remoting, A, u16> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 68, 111, 84, 104, 105, 115],
            (p1, p2),
        )
    }
    fn do_that(&mut self, p1: (u8, u32)) -> RemotingAction<Remoting, A, u8> {
        RemotingAction::new(self.remoting.clone(), &[24, 68, 111, 84, 104, 97, 116], p1)
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct MyParam {
    f1: u32,
    f2: Vec<String>,
    f3: Option<(u8, u32)>,
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub enum MyParam2 {
    Variant1,
    Variant2(u32),
    Variant3((u32,)),
    Variant4((u8, u32)),
    Variant5 { f1: String, f2: Vec<u8> },
}


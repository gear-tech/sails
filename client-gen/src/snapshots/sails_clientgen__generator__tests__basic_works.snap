---
source: client-gen/src/generator.rs
expression: generate(program).unwrap()
---
// Code generated by sails-client-gen. DO NOT EDIT.
use parity_scale_codec::{Decode, Encode};
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
use sails_rtl::{
    calls::RemotingAction, gstd::calls::Args, gstd::calls::Remoting, prelude::*, String,
};
pub trait Service {
    #[allow(clippy::type_complexity)]
    fn do_this(&mut self, p1: u32, p2: MyParam) -> RemotingAction<Remoting, Args, u16>;
    #[allow(clippy::type_complexity)]
    fn do_that(&mut self, p1: (u8, u32)) -> RemotingAction<Remoting, Args, u8>;
}

#[derive(Clone)]
pub struct Client {
    sender: Remoting,
}

impl Client {
    pub fn new(sender: Remoting) -> Self {
        Self { sender }
    }
}

impl Service for Client {
    fn do_this(&mut self, p1: u32, p2: MyParam) -> RemotingAction<Remoting, Args, u16> {
        RemotingAction::new(
            self.sender.clone(),
            &[24, 68, 111, 84, 104, 105, 115],
            (p1, p2),
        )
    }
    fn do_that(&mut self, p1: (u8, u32)) -> RemotingAction<Remoting, Args, u8> {
        RemotingAction::new(self.sender.clone(), &[24, 68, 111, 84, 104, 97, 116], p1)
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct MyParam {
    f1: u32,
    f2: Vec<String>,
    f3: Option<(u8, u32)>,
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub enum MyParam2 {
    Variant1,
    Variant2(u32),
    Variant3((u32,)),
    Variant4((u8, u32)),
    Variant5 { f1: String, f2: Vec<u8> },
}


---
source: client-gen/src/lib.rs
expression: generated
---
// Code generated by sails-client-gen. DO NOT EDIT.
use core::marker::PhantomData;
use parity_scale_codec::{Decode, Encode};
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::{Remoting, RemotingAction},
    prelude::*,
    String,
};
pub mod ctor {
    use super::*;
    pub trait ServiceConstructors<A: Default> {
        #[allow(clippy::new_ret_no_self)]
        fn new(remoting: impl Remoting<A>, a: u32) -> RemotingAction<impl Remoting<A>, A, ActorId>;
    }
    pub struct ProgramFactory;
    impl ProgramFactory {
        #[allow(unused)]
        pub fn new() -> Self {
            Self
        }
    }
    impl<A: Default> ServiceConstructors<A> for ProgramFactory {
        fn new(remoting: impl Remoting<A>, a: u32) -> RemotingAction<impl Remoting<A>, A, ActorId> {
            RemotingAction::new(remoting, &[12, 78, 101, 119], a)
        }
    }
}
pub mod traits {
    use super::*;
    pub trait Service<R, TCallArgs> {
        #[allow(clippy::type_complexity)]
        fn do_this(
            &mut self,
            p1: u32,
            p2: String,
            p3: (Option<String>, u8),
            p4: ThisThatSvcAppTupleStruct,
        ) -> RemotingAction<R, TCallArgs, (String, u32)>;
        #[allow(clippy::type_complexity)]
        fn do_that(
            &mut self,
            param: ThisThatSvcAppDoThatParam,
        ) -> RemotingAction<R, TCallArgs, Result<(String, u32), (String,)>>;
        #[allow(clippy::type_complexity)]
        fn this(&self, v1: Vec<u16>) -> RemotingAction<R, TCallArgs, u32>;
        #[allow(clippy::type_complexity)]
        fn that(&self, v1: ()) -> RemotingAction<R, TCallArgs, Result<String, String>>;
    }
}

#[derive(Clone)]
pub struct Service<R, A>
where
    R: Remoting<A>,
    A: Default,
{
    remoting: R,
    _phantom: PhantomData<A>,
}

impl<A: Default, R: Remoting<A>> Service<R, A> {
    pub fn new(remoting: R) -> Self {
        Self {
            remoting,
            _phantom: PhantomData,
        }
    }
}

impl<R, A> traits::Service<R, A> for Service<R, A>
where
    R: Remoting<A> + Clone,
    A: Default,
{
    fn do_this(
        &mut self,
        p1: u32,
        p2: String,
        p3: (Option<String>, u8),
        p4: ThisThatSvcAppTupleStruct,
    ) -> RemotingAction<R, A, (String, u32)> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 68, 111, 84, 104, 105, 115],
            (p1, p2, p3, p4),
        )
    }
    fn do_that(
        &mut self,
        param: ThisThatSvcAppDoThatParam,
    ) -> RemotingAction<R, A, Result<(String, u32), (String,)>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 68, 111, 84, 104, 97, 116],
            param,
        )
    }
    fn this(&self, v1: Vec<u16>) -> RemotingAction<R, A, u32> {
        RemotingAction::new(self.remoting.clone(), &[16, 84, 104, 105, 115], v1)
    }
    fn that(&self, v1: ()) -> RemotingAction<R, A, Result<String, String>> {
        RemotingAction::new(self.remoting.clone(), &[16, 84, 104, 97, 116], v1)
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct ThisThatSvcAppTupleStruct(bool);
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct ThisThatSvcAppDoThatParam {
    p1: u32,
    p2: String,
    p3: ThisThatSvcAppManyVariants,
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub enum ThisThatSvcAppManyVariants {
    One,
    Two(u32),
    Three(Option<u32>),
    Four { a: u32, b: Option<u16> },
    Five((String, u32)),
    Six((u32,)),
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub enum T {
    One,
}


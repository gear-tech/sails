---
source: client-gen/src/lib.rs
expression: generated
---
// Code generated by sails-client-gen. DO NOT EDIT.
use parity_scale_codec::{Decode, Encode};
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
use sails_rtl::{String, *};
#[allow(unused_imports)]
use sails_sender::{Call, CreateProgramCall, GStdSender};
pub mod ctor {
    use super::*;
    pub trait ProgramConstructors {
        #[allow(clippy::new_ret_no_self)]
        fn new(a: u32) -> CreateProgramCall;
    }
    pub struct ProgramFactory;
    impl ProgramFactory {
        #[allow(unused)]
        pub fn new() -> Self {
            Self
        }
    }
    impl ProgramConstructors for ProgramFactory {
        fn new(a: u32) -> CreateProgramCall {
            CreateProgramCall::new("New", a)
        }
    }
}
pub trait Service {
    fn do_this(
        &mut self,
        p1: u32,
        p2: String,
        p3: (Option<String>, u8),
        p4: ThisThatSvcAppTupleStruct,
    ) -> Call<(String, u32)>;
    fn do_that(
        &mut self,
        param: ThisThatSvcAppDoThatParam,
    ) -> Call<Result<(String, u32), (String,)>>;
    fn this(&self, v1: Vec<u16>) -> Call<u32>;
    fn that(&self, v1: ()) -> Call<Result<String, String>>;
}

#[derive(Clone)]
pub struct Client {
    sender: GStdSender,
}

impl Client {
    pub fn new(sender: GStdSender) -> Self {
        Self { sender }
    }
}

impl Service for Client {
    fn do_this(
        &mut self,
        p1: u32,
        p2: String,
        p3: (Option<String>, u8),
        p4: ThisThatSvcAppTupleStruct,
    ) -> Call<(String, u32)> {
        Call::new(&self.sender, "DoThis", (p1, p2, p3, p4))
    }
    fn do_that(
        &mut self,
        param: ThisThatSvcAppDoThatParam,
    ) -> Call<Result<(String, u32), (String,)>> {
        Call::new(&self.sender, "DoThat", param)
    }
    fn this(&self, v1: Vec<u16>) -> Call<u32> {
        Call::new(&self.sender, "This", v1)
    }
    fn that(&self, v1: ()) -> Call<Result<String, String>> {
        Call::new(&self.sender, "That", v1)
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct ThisThatSvcAppTupleStruct(bool);
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct ThisThatSvcAppDoThatParam {
    p1: u32,
    p2: String,
    p3: ThisThatSvcAppManyVariants,
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub enum ThisThatSvcAppManyVariants {
    One,
    Two(u32),
    Three(Option<u32>),
    Four { a: u32, b: Option<u16> },
    Five((String, u32)),
    Six((u32,)),
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub enum T {
    One,
}


---
source: client-gen/src/lib.rs
expression: generated
---
// Code generated by sails-client-gen. DO NOT EDIT.
use parity_scale_codec::{Decode, Encode};
#[allow(unused_imports)]
use sails_rtl::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rtl::{
    calls::RemotingAction, gstd::calls::Args, gstd::calls::Remoting, prelude::*, String,
};
pub mod ctor {
    use super::*;
    pub trait ServiceConstructors {
        #[allow(clippy::new_ret_no_self)]
        fn new(remoting: Remoting, a: u32) -> RemotingAction<Remoting, Args, ActorId>;
    }
    pub struct ProgramFactory;
    impl ProgramFactory {
        #[allow(unused)]
        pub fn new() -> Self {
            Self
        }
    }
    impl ServiceConstructors for ProgramFactory {
        fn new(remoting: Remoting, a: u32) -> RemotingAction<Remoting, Args, ActorId> {
            RemotingAction::new(remoting, &[12, 78, 101, 119], a)
        }
    }
}
pub trait Service<TCallArgs = ()> {
    #[allow(clippy::type_complexity)]
    fn do_this(
        &mut self,
        p1: u32,
        p2: String,
        p3: (Option<String>, u8),
        p4: ThisThatSvcAppTupleStruct,
    ) -> RemotingAction<Remoting, TCallArgs, (String, u32)>;
    #[allow(clippy::type_complexity)]
    fn do_that(
        &mut self,
        param: ThisThatSvcAppDoThatParam,
    ) -> RemotingAction<Remoting, TCallArgs, Result<(String, u32), (String,)>>;
    #[allow(clippy::type_complexity)]
    fn this(&self, v1: Vec<u16>) -> RemotingAction<Remoting, TCallArgs, u32>;
    #[allow(clippy::type_complexity)]
    fn that(&self, v1: ()) -> RemotingAction<Remoting, TCallArgs, Result<String, String>>;
}

#[derive(Clone)]
pub struct ServiceClient {
    remoting: Remoting,
}

impl ServiceClient {
    pub fn new(remoting: Remoting) -> Self {
        Self { remoting }
    }
}

impl<A: Default> Service<A> for ServiceClient {
    fn do_this(
        &mut self,
        p1: u32,
        p2: String,
        p3: (Option<String>, u8),
        p4: ThisThatSvcAppTupleStruct,
    ) -> RemotingAction<Remoting, A, (String, u32)> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 68, 111, 84, 104, 105, 115],
            (p1, p2, p3, p4),
        )
    }
    fn do_that(
        &mut self,
        param: ThisThatSvcAppDoThatParam,
    ) -> RemotingAction<Remoting, A, Result<(String, u32), (String,)>> {
        RemotingAction::new(
            self.remoting.clone(),
            &[24, 68, 111, 84, 104, 97, 116],
            param,
        )
    }
    fn this(&self, v1: Vec<u16>) -> RemotingAction<Remoting, A, u32> {
        RemotingAction::new(self.remoting.clone(), &[16, 84, 104, 105, 115], v1)
    }
    fn that(&self, v1: ()) -> RemotingAction<Remoting, A, Result<String, String>> {
        RemotingAction::new(self.remoting.clone(), &[16, 84, 104, 97, 116], v1)
    }
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct ThisThatSvcAppTupleStruct(bool);
#[derive(PartialEq, Debug, Encode, Decode)]
pub struct ThisThatSvcAppDoThatParam {
    p1: u32,
    p2: String,
    p3: ThisThatSvcAppManyVariants,
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub enum ThisThatSvcAppManyVariants {
    One,
    Two(u32),
    Three(Option<u32>),
    Four { a: u32, b: Option<u16> },
    Five((String, u32)),
    Six((u32,)),
}
#[derive(PartialEq, Debug, Encode, Decode)]
pub enum T {
    One,
}

